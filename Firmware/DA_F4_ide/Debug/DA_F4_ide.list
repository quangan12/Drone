
DA_F4_ide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b510  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  0800b698  0800b698  0000c698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b798  0800b798  0000d0c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b798  0800b798  0000c798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b7a0  0800b7a0  0000d0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b7a0  0800b7a0  0000c7a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b7a4  0800b7a4  0000c7a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800b7a8  0000d000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d0c8  2**0
                  CONTENTS
 10 .bss          00000aa8  200000c8  200000c8  0000d0c8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0000d0c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013692  00000000  00000000  0000d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027c5  00000000  00000000  0002078a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00022f50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e76  00000000  00000000  00024190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022158  00000000  00000000  00025006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016efd  00000000  00000000  0004715e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0148  00000000  00000000  0005e05b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012e1a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005714  00000000  00000000  0012e1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000be  00000000  00000000  001338fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000c8 	.word	0x200000c8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b680 	.word	0x0800b680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000cc 	.word	0x200000cc
 80001c4:	0800b680 	.word	0x0800b680

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b9a0 	b.w	8000ee8 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f83c 	bl	8000c2c <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_d2lz>:
 8000bc0:	b538      	push	{r3, r4, r5, lr}
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	f7ff ff2b 	bl	8000a24 <__aeabi_dcmplt>
 8000bce:	b928      	cbnz	r0, 8000bdc <__aeabi_d2lz+0x1c>
 8000bd0:	4620      	mov	r0, r4
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bd8:	f000 b80a 	b.w	8000bf0 <__aeabi_d2ulz>
 8000bdc:	4620      	mov	r0, r4
 8000bde:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000be2:	f000 f805 	bl	8000bf0 <__aeabi_d2ulz>
 8000be6:	4240      	negs	r0, r0
 8000be8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bec:	bd38      	pop	{r3, r4, r5, pc}
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2ulz>:
 8000bf0:	b5d0      	push	{r4, r6, r7, lr}
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <__aeabi_d2ulz+0x34>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4606      	mov	r6, r0
 8000bf8:	460f      	mov	r7, r1
 8000bfa:	f7ff fca1 	bl	8000540 <__aeabi_dmul>
 8000bfe:	f000 f975 	bl	8000eec <__aeabi_d2uiz>
 8000c02:	4604      	mov	r4, r0
 8000c04:	f7ff fc22 	bl	800044c <__aeabi_ui2d>
 8000c08:	4b07      	ldr	r3, [pc, #28]	@ (8000c28 <__aeabi_d2ulz+0x38>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f7ff fc98 	bl	8000540 <__aeabi_dmul>
 8000c10:	4602      	mov	r2, r0
 8000c12:	460b      	mov	r3, r1
 8000c14:	4630      	mov	r0, r6
 8000c16:	4639      	mov	r1, r7
 8000c18:	f7ff fada 	bl	80001d0 <__aeabi_dsub>
 8000c1c:	f000 f966 	bl	8000eec <__aeabi_d2uiz>
 8000c20:	4621      	mov	r1, r4
 8000c22:	bdd0      	pop	{r4, r6, r7, pc}
 8000c24:	3df00000 	.word	0x3df00000
 8000c28:	41f00000 	.word	0x41f00000

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9d08      	ldr	r5, [sp, #32]
 8000c32:	460c      	mov	r4, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14e      	bne.n	8000cd6 <__udivmoddi4+0xaa>
 8000c38:	4694      	mov	ip, r2
 8000c3a:	458c      	cmp	ip, r1
 8000c3c:	4686      	mov	lr, r0
 8000c3e:	fab2 f282 	clz	r2, r2
 8000c42:	d962      	bls.n	8000d0a <__udivmoddi4+0xde>
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	4091      	lsls	r1, r2
 8000c4c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c54:	4319      	orrs	r1, r3
 8000c56:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c5a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c5e:	fa1f f68c 	uxth.w	r6, ip
 8000c62:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c66:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c6a:	fb07 1114 	mls	r1, r7, r4, r1
 8000c6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c72:	fb04 f106 	mul.w	r1, r4, r6
 8000c76:	4299      	cmp	r1, r3
 8000c78:	d90a      	bls.n	8000c90 <__udivmoddi4+0x64>
 8000c7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c82:	f080 8112 	bcs.w	8000eaa <__udivmoddi4+0x27e>
 8000c86:	4299      	cmp	r1, r3
 8000c88:	f240 810f 	bls.w	8000eaa <__udivmoddi4+0x27e>
 8000c8c:	3c02      	subs	r4, #2
 8000c8e:	4463      	add	r3, ip
 8000c90:	1a59      	subs	r1, r3, r1
 8000c92:	fa1f f38e 	uxth.w	r3, lr
 8000c96:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c9a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ca2:	fb00 f606 	mul.w	r6, r0, r6
 8000ca6:	429e      	cmp	r6, r3
 8000ca8:	d90a      	bls.n	8000cc0 <__udivmoddi4+0x94>
 8000caa:	eb1c 0303 	adds.w	r3, ip, r3
 8000cae:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cb2:	f080 80fc 	bcs.w	8000eae <__udivmoddi4+0x282>
 8000cb6:	429e      	cmp	r6, r3
 8000cb8:	f240 80f9 	bls.w	8000eae <__udivmoddi4+0x282>
 8000cbc:	4463      	add	r3, ip
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	b11d      	cbz	r5, 8000cd2 <__udivmoddi4+0xa6>
 8000cca:	40d3      	lsrs	r3, r2
 8000ccc:	2200      	movs	r2, #0
 8000cce:	e9c5 3200 	strd	r3, r2, [r5]
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	428b      	cmp	r3, r1
 8000cd8:	d905      	bls.n	8000ce6 <__udivmoddi4+0xba>
 8000cda:	b10d      	cbz	r5, 8000ce0 <__udivmoddi4+0xb4>
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	4608      	mov	r0, r1
 8000ce4:	e7f5      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000ce6:	fab3 f183 	clz	r1, r3
 8000cea:	2900      	cmp	r1, #0
 8000cec:	d146      	bne.n	8000d7c <__udivmoddi4+0x150>
 8000cee:	42a3      	cmp	r3, r4
 8000cf0:	d302      	bcc.n	8000cf8 <__udivmoddi4+0xcc>
 8000cf2:	4290      	cmp	r0, r2
 8000cf4:	f0c0 80f0 	bcc.w	8000ed8 <__udivmoddi4+0x2ac>
 8000cf8:	1a86      	subs	r6, r0, r2
 8000cfa:	eb64 0303 	sbc.w	r3, r4, r3
 8000cfe:	2001      	movs	r0, #1
 8000d00:	2d00      	cmp	r5, #0
 8000d02:	d0e6      	beq.n	8000cd2 <__udivmoddi4+0xa6>
 8000d04:	e9c5 6300 	strd	r6, r3, [r5]
 8000d08:	e7e3      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000d0a:	2a00      	cmp	r2, #0
 8000d0c:	f040 8090 	bne.w	8000e30 <__udivmoddi4+0x204>
 8000d10:	eba1 040c 	sub.w	r4, r1, ip
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa1f f78c 	uxth.w	r7, ip
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d22:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d26:	fb08 4416 	mls	r4, r8, r6, r4
 8000d2a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d2e:	fb07 f006 	mul.w	r0, r7, r6
 8000d32:	4298      	cmp	r0, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x11c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x11a>
 8000d40:	4298      	cmp	r0, r3
 8000d42:	f200 80cd 	bhi.w	8000ee0 <__udivmoddi4+0x2b4>
 8000d46:	4626      	mov	r6, r4
 8000d48:	1a1c      	subs	r4, r3, r0
 8000d4a:	fa1f f38e 	uxth.w	r3, lr
 8000d4e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d52:	fb08 4410 	mls	r4, r8, r0, r4
 8000d56:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d5a:	fb00 f707 	mul.w	r7, r0, r7
 8000d5e:	429f      	cmp	r7, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x148>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x146>
 8000d6c:	429f      	cmp	r7, r3
 8000d6e:	f200 80b0 	bhi.w	8000ed2 <__udivmoddi4+0x2a6>
 8000d72:	4620      	mov	r0, r4
 8000d74:	1bdb      	subs	r3, r3, r7
 8000d76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d7a:	e7a5      	b.n	8000cc8 <__udivmoddi4+0x9c>
 8000d7c:	f1c1 0620 	rsb	r6, r1, #32
 8000d80:	408b      	lsls	r3, r1
 8000d82:	fa22 f706 	lsr.w	r7, r2, r6
 8000d86:	431f      	orrs	r7, r3
 8000d88:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d8c:	fa04 f301 	lsl.w	r3, r4, r1
 8000d90:	ea43 030c 	orr.w	r3, r3, ip
 8000d94:	40f4      	lsrs	r4, r6
 8000d96:	fa00 f801 	lsl.w	r8, r0, r1
 8000d9a:	0c38      	lsrs	r0, r7, #16
 8000d9c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000da0:	fbb4 fef0 	udiv	lr, r4, r0
 8000da4:	fa1f fc87 	uxth.w	ip, r7
 8000da8:	fb00 441e 	mls	r4, r0, lr, r4
 8000dac:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000db0:	fb0e f90c 	mul.w	r9, lr, ip
 8000db4:	45a1      	cmp	r9, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	d90a      	bls.n	8000dd2 <__udivmoddi4+0x1a6>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dc2:	f080 8084 	bcs.w	8000ece <__udivmoddi4+0x2a2>
 8000dc6:	45a1      	cmp	r9, r4
 8000dc8:	f240 8081 	bls.w	8000ece <__udivmoddi4+0x2a2>
 8000dcc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dd0:	443c      	add	r4, r7
 8000dd2:	eba4 0409 	sub.w	r4, r4, r9
 8000dd6:	fa1f f983 	uxth.w	r9, r3
 8000dda:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dde:	fb00 4413 	mls	r4, r0, r3, r4
 8000de2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000de6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dea:	45a4      	cmp	ip, r4
 8000dec:	d907      	bls.n	8000dfe <__udivmoddi4+0x1d2>
 8000dee:	193c      	adds	r4, r7, r4
 8000df0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000df4:	d267      	bcs.n	8000ec6 <__udivmoddi4+0x29a>
 8000df6:	45a4      	cmp	ip, r4
 8000df8:	d965      	bls.n	8000ec6 <__udivmoddi4+0x29a>
 8000dfa:	3b02      	subs	r3, #2
 8000dfc:	443c      	add	r4, r7
 8000dfe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e02:	fba0 9302 	umull	r9, r3, r0, r2
 8000e06:	eba4 040c 	sub.w	r4, r4, ip
 8000e0a:	429c      	cmp	r4, r3
 8000e0c:	46ce      	mov	lr, r9
 8000e0e:	469c      	mov	ip, r3
 8000e10:	d351      	bcc.n	8000eb6 <__udivmoddi4+0x28a>
 8000e12:	d04e      	beq.n	8000eb2 <__udivmoddi4+0x286>
 8000e14:	b155      	cbz	r5, 8000e2c <__udivmoddi4+0x200>
 8000e16:	ebb8 030e 	subs.w	r3, r8, lr
 8000e1a:	eb64 040c 	sbc.w	r4, r4, ip
 8000e1e:	fa04 f606 	lsl.w	r6, r4, r6
 8000e22:	40cb      	lsrs	r3, r1
 8000e24:	431e      	orrs	r6, r3
 8000e26:	40cc      	lsrs	r4, r1
 8000e28:	e9c5 6400 	strd	r6, r4, [r5]
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	e750      	b.n	8000cd2 <__udivmoddi4+0xa6>
 8000e30:	f1c2 0320 	rsb	r3, r2, #32
 8000e34:	fa20 f103 	lsr.w	r1, r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa24 f303 	lsr.w	r3, r4, r3
 8000e40:	4094      	lsls	r4, r2
 8000e42:	430c      	orrs	r4, r1
 8000e44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e48:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e4c:	fa1f f78c 	uxth.w	r7, ip
 8000e50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e54:	fb08 3110 	mls	r1, r8, r0, r3
 8000e58:	0c23      	lsrs	r3, r4, #16
 8000e5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e5e:	fb00 f107 	mul.w	r1, r0, r7
 8000e62:	4299      	cmp	r1, r3
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x24c>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e6e:	d22c      	bcs.n	8000eca <__udivmoddi4+0x29e>
 8000e70:	4299      	cmp	r1, r3
 8000e72:	d92a      	bls.n	8000eca <__udivmoddi4+0x29e>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	b2a4      	uxth	r4, r4
 8000e7c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e80:	fb08 3311 	mls	r3, r8, r1, r3
 8000e84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e88:	fb01 f307 	mul.w	r3, r1, r7
 8000e8c:	42a3      	cmp	r3, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x276>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e98:	d213      	bcs.n	8000ec2 <__udivmoddi4+0x296>
 8000e9a:	42a3      	cmp	r3, r4
 8000e9c:	d911      	bls.n	8000ec2 <__udivmoddi4+0x296>
 8000e9e:	3902      	subs	r1, #2
 8000ea0:	4464      	add	r4, ip
 8000ea2:	1ae4      	subs	r4, r4, r3
 8000ea4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea8:	e739      	b.n	8000d1e <__udivmoddi4+0xf2>
 8000eaa:	4604      	mov	r4, r0
 8000eac:	e6f0      	b.n	8000c90 <__udivmoddi4+0x64>
 8000eae:	4608      	mov	r0, r1
 8000eb0:	e706      	b.n	8000cc0 <__udivmoddi4+0x94>
 8000eb2:	45c8      	cmp	r8, r9
 8000eb4:	d2ae      	bcs.n	8000e14 <__udivmoddi4+0x1e8>
 8000eb6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eba:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ebe:	3801      	subs	r0, #1
 8000ec0:	e7a8      	b.n	8000e14 <__udivmoddi4+0x1e8>
 8000ec2:	4631      	mov	r1, r6
 8000ec4:	e7ed      	b.n	8000ea2 <__udivmoddi4+0x276>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	e799      	b.n	8000dfe <__udivmoddi4+0x1d2>
 8000eca:	4630      	mov	r0, r6
 8000ecc:	e7d4      	b.n	8000e78 <__udivmoddi4+0x24c>
 8000ece:	46d6      	mov	lr, sl
 8000ed0:	e77f      	b.n	8000dd2 <__udivmoddi4+0x1a6>
 8000ed2:	4463      	add	r3, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e74d      	b.n	8000d74 <__udivmoddi4+0x148>
 8000ed8:	4606      	mov	r6, r0
 8000eda:	4623      	mov	r3, r4
 8000edc:	4608      	mov	r0, r1
 8000ede:	e70f      	b.n	8000d00 <__udivmoddi4+0xd4>
 8000ee0:	3e02      	subs	r6, #2
 8000ee2:	4463      	add	r3, ip
 8000ee4:	e730      	b.n	8000d48 <__udivmoddi4+0x11c>
 8000ee6:	bf00      	nop

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <__aeabi_d2uiz>:
 8000eec:	004a      	lsls	r2, r1, #1
 8000eee:	d211      	bcs.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ef4:	d211      	bcs.n	8000f1a <__aeabi_d2uiz+0x2e>
 8000ef6:	d50d      	bpl.n	8000f14 <__aeabi_d2uiz+0x28>
 8000ef8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000efc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000f00:	d40e      	bmi.n	8000f20 <__aeabi_d2uiz+0x34>
 8000f02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000f0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000f0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000f12:	4770      	bx	lr
 8000f14:	f04f 0000 	mov.w	r0, #0
 8000f18:	4770      	bx	lr
 8000f1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000f1e:	d102      	bne.n	8000f26 <__aeabi_d2uiz+0x3a>
 8000f20:	f04f 30ff 	mov.w	r0, #4294967295
 8000f24:	4770      	bx	lr
 8000f26:	f04f 0000 	mov.w	r0, #0
 8000f2a:	4770      	bx	lr

08000f2c <delay>:
 *  Created on: Mar 26, 2024
 *      Author: phamt
 */
#include "DelayUs.h"
void delay(unsigned long cycles)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  while(cycles >0)
 8000f34:	e09e      	b.n	8001074 <delay+0x148>
    {
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	bf00      	nop
 8000f3c:	bf00      	nop
 8000f3e:	bf00      	nop
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f46:	bf00      	nop
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	bf00      	nop
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f76:	bf00      	nop
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	bf00      	nop
 8000f80:	bf00      	nop
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f86:	bf00      	nop
 8000f88:	bf00      	nop
 8000f8a:	bf00      	nop
 8000f8c:	bf00      	nop
 8000f8e:	bf00      	nop
 8000f90:	bf00      	nop
 8000f92:	bf00      	nop
 8000f94:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000f96:	bf00      	nop
 8000f98:	bf00      	nop
 8000f9a:	bf00      	nop
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	bf00      	nop
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	bf00      	nop
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fb6:	bf00      	nop
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	bf00      	nop
 8000fbe:	bf00      	nop
 8000fc0:	bf00      	nop
 8000fc2:	bf00      	nop
 8000fc4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	bf00      	nop
 8000fcc:	bf00      	nop
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	bf00      	nop
 8000fd4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fd6:	bf00      	nop
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	bf00      	nop
 8000fe4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000fe6:	bf00      	nop
 8000fe8:	bf00      	nop
 8000fea:	bf00      	nop
 8000fec:	bf00      	nop
 8000fee:	bf00      	nop
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8000ff6:	bf00      	nop
 8000ff8:	bf00      	nop
 8000ffa:	bf00      	nop
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001006:	bf00      	nop
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	bf00      	nop
 8001012:	bf00      	nop
 8001014:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001016:	bf00      	nop
 8001018:	bf00      	nop
 800101a:	bf00      	nop
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	bf00      	nop
        asm("nop");asm("nop");
 8001036:	bf00      	nop
 8001038:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800104a:	bf00      	nop
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	bf00      	nop
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	bf00      	nop
        asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");asm("nop");
 800105a:	bf00      	nop
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	bf00      	nop
 8001066:	bf00      	nop
 8001068:	bf00      	nop
        asm("nop");asm("nop");//156 nop
 800106a:	bf00      	nop
 800106c:	bf00      	nop


        //to get 1 uS if delay(1)
  cycles--;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3b01      	subs	r3, #1
 8001072:	607b      	str	r3, [r7, #4]
  while(cycles >0)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	f47f af5d 	bne.w	8000f36 <delay+0xa>
    }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
	...

0800108c <M8N_Initialization>:
	0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x31,
	0xBF
};

void M8N_Initialization(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT));
 8001090:	221c      	movs	r2, #28
 8001092:	4912      	ldr	r1, [pc, #72]	@ (80010dc <M8N_Initialization+0x50>)
 8001094:	4812      	ldr	r0, [pc, #72]	@ (80010e0 <M8N_Initialization+0x54>)
 8001096:	f007 fbd3 	bl	8008840 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_PRT, sizeof(UBX_CFG_PRT), HAL_MAX_DELAY);
	HAL_Delay(500);
 800109a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800109e:	f003 fdb7 	bl	8004c10 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG));
 80010a2:	2210      	movs	r2, #16
 80010a4:	490f      	ldr	r1, [pc, #60]	@ (80010e4 <M8N_Initialization+0x58>)
 80010a6:	480e      	ldr	r0, [pc, #56]	@ (80010e0 <M8N_Initialization+0x54>)
 80010a8:	f007 fbca 	bl	8008840 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_MSG, sizeof(UBX_CFG_MSG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010ac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010b0:	f003 fdae 	bl	8004c10 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE));
 80010b4:	220e      	movs	r2, #14
 80010b6:	490c      	ldr	r1, [pc, #48]	@ (80010e8 <M8N_Initialization+0x5c>)
 80010b8:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <M8N_Initialization+0x54>)
 80010ba:	f007 fbc1 	bl	8008840 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_RATE, sizeof(UBX_CFG_RATE), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010c2:	f003 fda5 	bl	8004c10 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG));
 80010c6:	2215      	movs	r2, #21
 80010c8:	4908      	ldr	r1, [pc, #32]	@ (80010ec <M8N_Initialization+0x60>)
 80010ca:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <M8N_Initialization+0x54>)
 80010cc:	f007 fbb8 	bl	8008840 <HAL_UART_Transmit_DMA>
	//HAL_UART_Transmit(&huart3, UBX_CFG_CFG, sizeof(UBX_CFG_CFG), HAL_MAX_DELAY);
	HAL_Delay(500);
 80010d0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010d4:	f003 fd9c 	bl	8004c10 <HAL_Delay>
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	0800b698 	.word	0x0800b698
 80010e0:	2000084c 	.word	0x2000084c
 80010e4:	0800b6b4 	.word	0x0800b6b4
 80010e8:	0800b6c4 	.word	0x0800b6c4
 80010ec:	0800b6d4 	.word	0x0800b6d4

080010f0 <setupSensor>:
extern float pid_p_gain_altitude;           //Gain setting for the altitude P-controller (default = 1.4).
extern float pid_i_gain_altitude;           //Gain setting for the altitude I-controller (default = 0.2).
extern float pid_d_gain_altitude;

void setupSensor(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
    twiSend(address, 0x1E,1); //just send 1 byte that tells MS5611 to reset
 80010f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001160 <setupSensor+0x70>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	211e      	movs	r1, #30
 80010fe:	4618      	mov	r0, r3
 8001100:	f003 fb0e 	bl	8004720 <twiSend>
    HAL_Delay(20); //delay 10 mS needed for device to execute reset
 8001104:	2014      	movs	r0, #20
 8001106:	f003 fd83 	bl	8004c10 <HAL_Delay>
    for (int i=1;i<=6;i++)
 800110a:	2301      	movs	r3, #1
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	e01e      	b.n	800114e <setupSensor+0x5e>
    {
    twiReceive(address, 0xA0+i*2, 2); //read all 14 bytes for callibration data from PROM
 8001110:	4b13      	ldr	r3, [pc, #76]	@ (8001160 <setupSensor+0x70>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3350      	adds	r3, #80	@ 0x50
 8001118:	b2db      	uxtb	r3, r3
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2202      	movs	r2, #2
 8001120:	4619      	mov	r1, r3
 8001122:	f003 fb4f 	bl	80047c4 <twiReceive>
    HAL_Delay(5); //at least 40 uS
 8001126:	2005      	movs	r0, #5
 8001128:	f003 fd72 	bl	8004c10 <HAL_Delay>
    calibrationData[i] = buffer[0]<<8|buffer[1]; //pair of bytes goes into each element of callibrationData[i], global variables, 14 uint8_t into 7 uint16_t
 800112c:	4b0d      	ldr	r3, [pc, #52]	@ (8001164 <setupSensor+0x74>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	4b0b      	ldr	r3, [pc, #44]	@ (8001164 <setupSensor+0x74>)
 8001136:	785b      	ldrb	r3, [r3, #1]
 8001138:	b21b      	sxth	r3, r3
 800113a:	4313      	orrs	r3, r2
 800113c:	b21b      	sxth	r3, r3
 800113e:	b299      	uxth	r1, r3
 8001140:	4a09      	ldr	r2, [pc, #36]	@ (8001168 <setupSensor+0x78>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i=1;i<=6;i++)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3301      	adds	r3, #1
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b06      	cmp	r3, #6
 8001152:	dddd      	ble.n	8001110 <setupSensor+0x20>
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000000 	.word	0x20000000
 8001164:	200001ec 	.word	0x200001ec
 8001168:	200001f4 	.word	0x200001f4
 800116c:	00000000 	.word	0x00000000

08001170 <getPressure>:

int getPressure(void)
{
 8001170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001174:	b0a4      	sub	sp, #144	@ 0x90
 8001176:	af00      	add	r7, sp, #0
	counter_pressure ++;
 8001178:	4b3d      	ldr	r3, [pc, #244]	@ (8001270 <getPressure+0x100>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	b2db      	uxtb	r3, r3
 8001180:	4a3b      	ldr	r2, [pc, #236]	@ (8001270 <getPressure+0x100>)
 8001182:	7013      	strb	r3, [r2, #0]
	if (counter_pressure == 1)
 8001184:	4b3a      	ldr	r3, [pc, #232]	@ (8001270 <getPressure+0x100>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	f040 808c 	bne.w	80012a6 <getPressure+0x136>
	{
		if(temperature_counter == 0)
 800118e:	4b39      	ldr	r3, [pc, #228]	@ (8001274 <getPressure+0x104>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d142      	bne.n	800121c <getPressure+0xac>
		{
			twiReceive(address, 0x00, 3);
 8001196:	4b38      	ldr	r3, [pc, #224]	@ (8001278 <getPressure+0x108>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2203      	movs	r2, #3
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f003 fb10 	bl	80047c4 <twiReceive>
			raw_average_temperature_total -= raw_temperature_rotating_memory[average_temperature_mem_location];
 80011a4:	4b35      	ldr	r3, [pc, #212]	@ (800127c <getPressure+0x10c>)
 80011a6:	6819      	ldr	r1, [r3, #0]
 80011a8:	4b35      	ldr	r3, [pc, #212]	@ (8001280 <getPressure+0x110>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b35      	ldr	r3, [pc, #212]	@ (8001284 <getPressure+0x114>)
 80011b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b4:	1aca      	subs	r2, r1, r3
 80011b6:	4b31      	ldr	r3, [pc, #196]	@ (800127c <getPressure+0x10c>)
 80011b8:	601a      	str	r2, [r3, #0]
			raw_temperature_rotating_memory[average_temperature_mem_location] = buffer[0]<<16|buffer[1]<<8|buffer[2];
 80011ba:	4b33      	ldr	r3, [pc, #204]	@ (8001288 <getPressure+0x118>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	041a      	lsls	r2, r3, #16
 80011c0:	4b31      	ldr	r3, [pc, #196]	@ (8001288 <getPressure+0x118>)
 80011c2:	785b      	ldrb	r3, [r3, #1]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	431a      	orrs	r2, r3
 80011c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001288 <getPressure+0x118>)
 80011ca:	789b      	ldrb	r3, [r3, #2]
 80011cc:	431a      	orrs	r2, r3
 80011ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001280 <getPressure+0x110>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	4619      	mov	r1, r3
 80011d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001284 <getPressure+0x114>)
 80011d6:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			raw_average_temperature_total += raw_temperature_rotating_memory[average_temperature_mem_location];
 80011da:	4b29      	ldr	r3, [pc, #164]	@ (8001280 <getPressure+0x110>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	461a      	mov	r2, r3
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <getPressure+0x114>)
 80011e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <getPressure+0x10c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	441a      	add	r2, r3
 80011ec:	4b23      	ldr	r3, [pc, #140]	@ (800127c <getPressure+0x10c>)
 80011ee:	601a      	str	r2, [r3, #0]
			average_temperature_mem_location++;
 80011f0:	4b23      	ldr	r3, [pc, #140]	@ (8001280 <getPressure+0x110>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	b2db      	uxtb	r3, r3
 80011f8:	4a21      	ldr	r2, [pc, #132]	@ (8001280 <getPressure+0x110>)
 80011fa:	7013      	strb	r3, [r2, #0]
			if (average_temperature_mem_location == 5)average_temperature_mem_location = 0;
 80011fc:	4b20      	ldr	r3, [pc, #128]	@ (8001280 <getPressure+0x110>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d102      	bne.n	800120a <getPressure+0x9a>
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <getPressure+0x110>)
 8001206:	2300      	movs	r3, #0
 8001208:	7013      	strb	r3, [r2, #0]
			raw_temperature = raw_average_temperature_total / 5;
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <getPressure+0x10c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b1f      	ldr	r3, [pc, #124]	@ (800128c <getPressure+0x11c>)
 8001210:	fba3 2302 	umull	r2, r3, r3, r2
 8001214:	089a      	lsrs	r2, r3, #2
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <getPressure+0x120>)
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e013      	b.n	8001244 <getPressure+0xd4>
		}
		else
		{
			twiReceive(address, 0x00, 3);
 800121c:	4b16      	ldr	r3, [pc, #88]	@ (8001278 <getPressure+0x108>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2203      	movs	r2, #3
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 facd 	bl	80047c4 <twiReceive>
			raw_pressure = buffer[0]<<16|buffer[1]<<8|buffer[2];
 800122a:	4b17      	ldr	r3, [pc, #92]	@ (8001288 <getPressure+0x118>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	041a      	lsls	r2, r3, #16
 8001230:	4b15      	ldr	r3, [pc, #84]	@ (8001288 <getPressure+0x118>)
 8001232:	785b      	ldrb	r3, [r3, #1]
 8001234:	021b      	lsls	r3, r3, #8
 8001236:	431a      	orrs	r2, r3
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <getPressure+0x118>)
 800123a:	789b      	ldrb	r3, [r3, #2]
 800123c:	4313      	orrs	r3, r2
 800123e:	461a      	mov	r2, r3
 8001240:	4b14      	ldr	r3, [pc, #80]	@ (8001294 <getPressure+0x124>)
 8001242:	601a      	str	r2, [r3, #0]
		}
		temperature_counter ++;        //Increase the temperature_counter variable.
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <getPressure+0x104>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	b2db      	uxtb	r3, r3
 800124c:	4a09      	ldr	r2, [pc, #36]	@ (8001274 <getPressure+0x104>)
 800124e:	7013      	strb	r3, [r2, #0]
		if (temperature_counter == 20)
 8001250:	4b08      	ldr	r3, [pc, #32]	@ (8001274 <getPressure+0x104>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b14      	cmp	r3, #20
 8001256:	d11f      	bne.n	8001298 <getPressure+0x128>
		{
			temperature_counter = 0;
 8001258:	4a06      	ldr	r2, [pc, #24]	@ (8001274 <getPressure+0x104>)
 800125a:	2300      	movs	r3, #0
 800125c:	7013      	strb	r3, [r2, #0]
			twiSend(address, 0x54,1);
 800125e:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <getPressure+0x108>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	2154      	movs	r1, #84	@ 0x54
 8001266:	4618      	mov	r0, r3
 8001268:	f003 fa5a 	bl	8004720 <twiSend>
 800126c:	e01b      	b.n	80012a6 <getPressure+0x136>
 800126e:	bf00      	nop
 8001270:	200000e4 	.word	0x200000e4
 8001274:	200000e5 	.word	0x200000e5
 8001278:	20000000 	.word	0x20000000
 800127c:	20000108 	.word	0x20000108
 8001280:	200000e6 	.word	0x200000e6
 8001284:	200000f0 	.word	0x200000f0
 8001288:	200001ec 	.word	0x200001ec
 800128c:	cccccccd 	.word	0xcccccccd
 8001290:	200000ec 	.word	0x200000ec
 8001294:	200000e8 	.word	0x200000e8
		}
		else twiSend(address, 0x44,1);
 8001298:	4b91      	ldr	r3, [pc, #580]	@ (80014e0 <getPressure+0x370>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2201      	movs	r2, #1
 800129e:	2144      	movs	r1, #68	@ 0x44
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fa3d 	bl	8004720 <twiSend>
	}

	if (counter_pressure == 2)
 80012a6:	4b8f      	ldr	r3, [pc, #572]	@ (80014e4 <getPressure+0x374>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b02      	cmp	r3, #2
 80012ac:	f040 8331 	bne.w	8001912 <getPressure+0x7a2>
	{
		dT = raw_temperature - ((int)calibrationData[5] << 8);
 80012b0:	4b8d      	ldr	r3, [pc, #564]	@ (80014e8 <getPressure+0x378>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	4b8d      	ldr	r3, [pc, #564]	@ (80014ec <getPressure+0x37c>)
 80012b6:	895b      	ldrh	r3, [r3, #10]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	461a      	mov	r2, r3
 80012be:	4b8c      	ldr	r3, [pc, #560]	@ (80014f0 <getPressure+0x380>)
 80012c0:	601a      	str	r2, [r3, #0]
		TEMP = (2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23));
 80012c2:	4b8b      	ldr	r3, [pc, #556]	@ (80014f0 <getPressure+0x380>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	17da      	asrs	r2, r3, #31
 80012c8:	469a      	mov	sl, r3
 80012ca:	4693      	mov	fp, r2
 80012cc:	4b87      	ldr	r3, [pc, #540]	@ (80014ec <getPressure+0x37c>)
 80012ce:	899b      	ldrh	r3, [r3, #12]
 80012d0:	b29b      	uxth	r3, r3
 80012d2:	2200      	movs	r2, #0
 80012d4:	4698      	mov	r8, r3
 80012d6:	4691      	mov	r9, r2
 80012d8:	fb08 f20b 	mul.w	r2, r8, fp
 80012dc:	fb0a f309 	mul.w	r3, sl, r9
 80012e0:	4413      	add	r3, r2
 80012e2:	fbaa 4508 	umull	r4, r5, sl, r8
 80012e6:	442b      	add	r3, r5
 80012e8:	461d      	mov	r5, r3
 80012ea:	f04f 0200 	mov.w	r2, #0
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	0de2      	lsrs	r2, r4, #23
 80012f4:	ea42 2245 	orr.w	r2, r2, r5, lsl #9
 80012f8:	15eb      	asrs	r3, r5, #23
 80012fa:	4613      	mov	r3, r2
 80012fc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001300:	461a      	mov	r2, r3
 8001302:	4b7c      	ldr	r3, [pc, #496]	@ (80014f4 <getPressure+0x384>)
 8001304:	601a      	str	r2, [r3, #0]
		if (TEMP<2000)  //if temperature of the sensor goes below 20°C, it activates "second order temperature compensation"
 8001306:	4b7b      	ldr	r3, [pc, #492]	@ (80014f4 <getPressure+0x384>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800130e:	f280 8105 	bge.w	800151c <getPressure+0x3ac>
		    {
		      T2=pow(dT,2)/2147483648;
 8001312:	4b77      	ldr	r3, [pc, #476]	@ (80014f0 <getPressure+0x380>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f8a8 	bl	800046c <__aeabi_i2d>
 800131c:	4602      	mov	r2, r0
 800131e:	460b      	mov	r3, r1
 8001320:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 80014d8 <getPressure+0x368>
 8001324:	ec43 2b10 	vmov	d0, r2, r3
 8001328:	f008 fcbc 	bl	8009ca4 <pow>
 800132c:	ec51 0b10 	vmov	r0, r1, d0
 8001330:	f04f 0200 	mov.w	r2, #0
 8001334:	4b70      	ldr	r3, [pc, #448]	@ (80014f8 <getPressure+0x388>)
 8001336:	f7ff fa2d 	bl	8000794 <__aeabi_ddiv>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
 8001342:	f7ff fbad 	bl	8000aa0 <__aeabi_d2iz>
 8001346:	4602      	mov	r2, r0
 8001348:	4b6c      	ldr	r3, [pc, #432]	@ (80014fc <getPressure+0x38c>)
 800134a:	601a      	str	r2, [r3, #0]
		      OFF2=5*pow((TEMP-2000),2)/2;
 800134c:	4b69      	ldr	r3, [pc, #420]	@ (80014f4 <getPressure+0x384>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f889 	bl	800046c <__aeabi_i2d>
 800135a:	4602      	mov	r2, r0
 800135c:	460b      	mov	r3, r1
 800135e:	ed9f 1b5e 	vldr	d1, [pc, #376]	@ 80014d8 <getPressure+0x368>
 8001362:	ec43 2b10 	vmov	d0, r2, r3
 8001366:	f008 fc9d 	bl	8009ca4 <pow>
 800136a:	ec51 0b10 	vmov	r0, r1, d0
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <getPressure+0x390>)
 8001374:	f7ff f8e4 	bl	8000540 <__aeabi_dmul>
 8001378:	4602      	mov	r2, r0
 800137a:	460b      	mov	r3, r1
 800137c:	4610      	mov	r0, r2
 800137e:	4619      	mov	r1, r3
 8001380:	f04f 0200 	mov.w	r2, #0
 8001384:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001388:	f7ff fa04 	bl	8000794 <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc14 	bl	8000bc0 <__aeabi_d2lz>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4959      	ldr	r1, [pc, #356]	@ (8001504 <getPressure+0x394>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
		      SENS2=5*pow((TEMP-2000),2)/4;
 80013a2:	4b54      	ldr	r3, [pc, #336]	@ (80014f4 <getPressure+0x384>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f85e 	bl	800046c <__aeabi_i2d>
 80013b0:	4602      	mov	r2, r0
 80013b2:	460b      	mov	r3, r1
 80013b4:	ed9f 1b48 	vldr	d1, [pc, #288]	@ 80014d8 <getPressure+0x368>
 80013b8:	ec43 2b10 	vmov	d0, r2, r3
 80013bc:	f008 fc72 	bl	8009ca4 <pow>
 80013c0:	ec51 0b10 	vmov	r0, r1, d0
 80013c4:	f04f 0200 	mov.w	r2, #0
 80013c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001500 <getPressure+0x390>)
 80013ca:	f7ff f8b9 	bl	8000540 <__aeabi_dmul>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <getPressure+0x398>)
 80013dc:	f7ff f9da 	bl	8000794 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fbea 	bl	8000bc0 <__aeabi_d2lz>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4946      	ldr	r1, [pc, #280]	@ (800150c <getPressure+0x39c>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
		      if (TEMP<-1500) //if temperature of the sensor goes even lower, below -15°C, then additional math is utilized
 80013f6:	4b3f      	ldr	r3, [pc, #252]	@ (80014f4 <getPressure+0x384>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	4b45      	ldr	r3, [pc, #276]	@ (8001510 <getPressure+0x3a0>)
 80013fc:	429a      	cmp	r2, r3
 80013fe:	f280 809e 	bge.w	800153e <getPressure+0x3ce>
		        {
		          OFF2=OFF2+7*pow((TEMP+1500),2);
 8001402:	4b40      	ldr	r3, [pc, #256]	@ (8001504 <getPressure+0x394>)
 8001404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001408:	4610      	mov	r0, r2
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff f86a 	bl	80004e4 <__aeabi_l2d>
 8001410:	4604      	mov	r4, r0
 8001412:	460d      	mov	r5, r1
 8001414:	4b37      	ldr	r3, [pc, #220]	@ (80014f4 <getPressure+0x384>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f825 	bl	800046c <__aeabi_i2d>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	ed9f 1b2c 	vldr	d1, [pc, #176]	@ 80014d8 <getPressure+0x368>
 800142a:	ec43 2b10 	vmov	d0, r2, r3
 800142e:	f008 fc39 	bl	8009ca4 <pow>
 8001432:	ec51 0b10 	vmov	r0, r1, d0
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	4b36      	ldr	r3, [pc, #216]	@ (8001514 <getPressure+0x3a4>)
 800143c:	f7ff f880 	bl	8000540 <__aeabi_dmul>
 8001440:	4602      	mov	r2, r0
 8001442:	460b      	mov	r3, r1
 8001444:	4620      	mov	r0, r4
 8001446:	4629      	mov	r1, r5
 8001448:	f7fe fec4 	bl	80001d4 <__adddf3>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4610      	mov	r0, r2
 8001452:	4619      	mov	r1, r3
 8001454:	f7ff fbb4 	bl	8000bc0 <__aeabi_d2lz>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4929      	ldr	r1, [pc, #164]	@ (8001504 <getPressure+0x394>)
 800145e:	e9c1 2300 	strd	r2, r3, [r1]
		          SENS2=SENS2+11*pow((TEMP+1500),2)/2;
 8001462:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <getPressure+0x39c>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	f7ff f83a 	bl	80004e4 <__aeabi_l2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <getPressure+0x384>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800147c:	4618      	mov	r0, r3
 800147e:	f7fe fff5 	bl	800046c <__aeabi_i2d>
 8001482:	4602      	mov	r2, r0
 8001484:	460b      	mov	r3, r1
 8001486:	ed9f 1b14 	vldr	d1, [pc, #80]	@ 80014d8 <getPressure+0x368>
 800148a:	ec43 2b10 	vmov	d0, r2, r3
 800148e:	f008 fc09 	bl	8009ca4 <pow>
 8001492:	ec51 0b10 	vmov	r0, r1, d0
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <getPressure+0x3a8>)
 800149c:	f7ff f850 	bl	8000540 <__aeabi_dmul>
 80014a0:	4602      	mov	r2, r0
 80014a2:	460b      	mov	r3, r1
 80014a4:	4610      	mov	r0, r2
 80014a6:	4619      	mov	r1, r3
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014b0:	f7ff f970 	bl	8000794 <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4620      	mov	r0, r4
 80014ba:	4629      	mov	r1, r5
 80014bc:	f7fe fe8a 	bl	80001d4 <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb7a 	bl	8000bc0 <__aeabi_d2lz>
 80014cc:	4602      	mov	r2, r0
 80014ce:	460b      	mov	r3, r1
 80014d0:	490e      	ldr	r1, [pc, #56]	@ (800150c <getPressure+0x39c>)
 80014d2:	e9c1 2300 	strd	r2, r3, [r1]
 80014d6:	e032      	b.n	800153e <getPressure+0x3ce>
 80014d8:	00000000 	.word	0x00000000
 80014dc:	40000000 	.word	0x40000000
 80014e0:	20000000 	.word	0x20000000
 80014e4:	200000e4 	.word	0x200000e4
 80014e8:	200000ec 	.word	0x200000ec
 80014ec:	200001f4 	.word	0x200001f4
 80014f0:	20000228 	.word	0x20000228
 80014f4:	2000022c 	.word	0x2000022c
 80014f8:	41e00000 	.word	0x41e00000
 80014fc:	20000234 	.word	0x20000234
 8001500:	40140000 	.word	0x40140000
 8001504:	20000210 	.word	0x20000210
 8001508:	40100000 	.word	0x40100000
 800150c:	20000220 	.word	0x20000220
 8001510:	fffffa24 	.word	0xfffffa24
 8001514:	401c0000 	.word	0x401c0000
 8001518:	40260000 	.word	0x40260000
		        }
		    }
	   else { T2=0; OFF2=0; SENS2=0; }
 800151c:	4ac3      	ldr	r2, [pc, #780]	@ (800182c <getPressure+0x6bc>)
 800151e:	2300      	movs	r3, #0
 8001520:	6013      	str	r3, [r2, #0]
 8001522:	49c3      	ldr	r1, [pc, #780]	@ (8001830 <getPressure+0x6c0>)
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	f04f 0300 	mov.w	r3, #0
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
 8001530:	49c0      	ldr	r1, [pc, #768]	@ (8001834 <getPressure+0x6c4>)
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c1 2300 	strd	r2, r3, [r1]

		    TEMP = ((2000 + (((int64_t)dT * (int64_t)calibrationData[6]) >> 23))-T2); //second order compensation included
 800153e:	4bbe      	ldr	r3, [pc, #760]	@ (8001838 <getPressure+0x6c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	17da      	asrs	r2, r3, #31
 8001544:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001548:	4bbc      	ldr	r3, [pc, #752]	@ (800183c <getPressure+0x6cc>)
 800154a:	899b      	ldrh	r3, [r3, #12]
 800154c:	b29b      	uxth	r3, r3
 800154e:	2200      	movs	r2, #0
 8001550:	663b      	str	r3, [r7, #96]	@ 0x60
 8001552:	667a      	str	r2, [r7, #100]	@ 0x64
 8001554:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001558:	462b      	mov	r3, r5
 800155a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800155e:	4642      	mov	r2, r8
 8001560:	fb02 f203 	mul.w	r2, r2, r3
 8001564:	464b      	mov	r3, r9
 8001566:	4621      	mov	r1, r4
 8001568:	fb01 f303 	mul.w	r3, r1, r3
 800156c:	4413      	add	r3, r2
 800156e:	4622      	mov	r2, r4
 8001570:	4641      	mov	r1, r8
 8001572:	fba2 1201 	umull	r1, r2, r2, r1
 8001576:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800157a:	460a      	mov	r2, r1
 800157c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8001580:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8001584:	4413      	add	r3, r2
 8001586:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800158a:	f04f 0200 	mov.w	r2, #0
 800158e:	f04f 0300 	mov.w	r3, #0
 8001592:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8001596:	4621      	mov	r1, r4
 8001598:	0dca      	lsrs	r2, r1, #23
 800159a:	4629      	mov	r1, r5
 800159c:	ea42 2241 	orr.w	r2, r2, r1, lsl #9
 80015a0:	4629      	mov	r1, r5
 80015a2:	15cb      	asrs	r3, r1, #23
 80015a4:	4ba1      	ldr	r3, [pc, #644]	@ (800182c <getPressure+0x6bc>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80015ae:	461a      	mov	r2, r3
 80015b0:	4ba3      	ldr	r3, [pc, #652]	@ (8001840 <getPressure+0x6d0>)
 80015b2:	601a      	str	r2, [r3, #0]
		    OFF = (((unsigned int)calibrationData[2] << 16) + (((int64_t)calibrationData[4] * dT) >> 7)-OFF2); //second order compensation included
 80015b4:	4ba1      	ldr	r3, [pc, #644]	@ (800183c <getPressure+0x6cc>)
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	041b      	lsls	r3, r3, #16
 80015ba:	2200      	movs	r2, #0
 80015bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015be:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015c0:	4b9e      	ldr	r3, [pc, #632]	@ (800183c <getPressure+0x6cc>)
 80015c2:	891b      	ldrh	r3, [r3, #8]
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	2200      	movs	r2, #0
 80015c8:	653b      	str	r3, [r7, #80]	@ 0x50
 80015ca:	657a      	str	r2, [r7, #84]	@ 0x54
 80015cc:	4b9a      	ldr	r3, [pc, #616]	@ (8001838 <getPressure+0x6c8>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	17da      	asrs	r2, r3, #31
 80015d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80015d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80015d6:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80015da:	462b      	mov	r3, r5
 80015dc:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80015e0:	4642      	mov	r2, r8
 80015e2:	fb02 f203 	mul.w	r2, r2, r3
 80015e6:	464b      	mov	r3, r9
 80015e8:	4621      	mov	r1, r4
 80015ea:	fb01 f303 	mul.w	r3, r1, r3
 80015ee:	4413      	add	r3, r2
 80015f0:	4622      	mov	r2, r4
 80015f2:	4641      	mov	r1, r8
 80015f4:	fba2 1201 	umull	r1, r2, r2, r1
 80015f8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015fc:	460a      	mov	r2, r1
 80015fe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8001602:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001606:	4413      	add	r3, r2
 8001608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800160c:	f04f 0200 	mov.w	r2, #0
 8001610:	f04f 0300 	mov.w	r3, #0
 8001614:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001618:	4621      	mov	r1, r4
 800161a:	09ca      	lsrs	r2, r1, #7
 800161c:	4629      	mov	r1, r5
 800161e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
 8001622:	4629      	mov	r1, r5
 8001624:	11cb      	asrs	r3, r1, #7
 8001626:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800162a:	4621      	mov	r1, r4
 800162c:	1889      	adds	r1, r1, r2
 800162e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001630:	4629      	mov	r1, r5
 8001632:	eb43 0101 	adc.w	r1, r3, r1
 8001636:	6479      	str	r1, [r7, #68]	@ 0x44
 8001638:	4b7d      	ldr	r3, [pc, #500]	@ (8001830 <getPressure+0x6c0>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8001642:	4621      	mov	r1, r4
 8001644:	1a89      	subs	r1, r1, r2
 8001646:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001648:	4629      	mov	r1, r5
 800164a:	eb61 0303 	sbc.w	r3, r1, r3
 800164e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001650:	4b7c      	ldr	r3, [pc, #496]	@ (8001844 <getPressure+0x6d4>)
 8001652:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8001656:	e9c3 1200 	strd	r1, r2, [r3]
		    SENS = (((unsigned int)calibrationData[1] << 15) + (((int64_t)calibrationData[3] * dT) >> 8)-SENS2); //second order compensation included
 800165a:	4b78      	ldr	r3, [pc, #480]	@ (800183c <getPressure+0x6cc>)
 800165c:	885b      	ldrh	r3, [r3, #2]
 800165e:	03db      	lsls	r3, r3, #15
 8001660:	2200      	movs	r2, #0
 8001662:	633b      	str	r3, [r7, #48]	@ 0x30
 8001664:	637a      	str	r2, [r7, #52]	@ 0x34
 8001666:	4b75      	ldr	r3, [pc, #468]	@ (800183c <getPressure+0x6cc>)
 8001668:	88db      	ldrh	r3, [r3, #6]
 800166a:	b29b      	uxth	r3, r3
 800166c:	2200      	movs	r2, #0
 800166e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001670:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001672:	4b71      	ldr	r3, [pc, #452]	@ (8001838 <getPressure+0x6c8>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	17da      	asrs	r2, r3, #31
 8001678:	623b      	str	r3, [r7, #32]
 800167a:	627a      	str	r2, [r7, #36]	@ 0x24
 800167c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8001680:	462b      	mov	r3, r5
 8001682:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001686:	4642      	mov	r2, r8
 8001688:	fb02 f203 	mul.w	r2, r2, r3
 800168c:	464b      	mov	r3, r9
 800168e:	4621      	mov	r1, r4
 8001690:	fb01 f303 	mul.w	r3, r1, r3
 8001694:	4413      	add	r3, r2
 8001696:	4622      	mov	r2, r4
 8001698:	4641      	mov	r1, r8
 800169a:	fba2 1201 	umull	r1, r2, r2, r1
 800169e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80016a0:	460a      	mov	r2, r1
 80016a2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80016a4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80016a6:	4413      	add	r3, r2
 80016a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b6:	4621      	mov	r1, r4
 80016b8:	0a0a      	lsrs	r2, r1, #8
 80016ba:	4629      	mov	r1, r5
 80016bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80016c0:	4629      	mov	r1, r5
 80016c2:	120b      	asrs	r3, r1, #8
 80016c4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80016c8:	4621      	mov	r1, r4
 80016ca:	1889      	adds	r1, r1, r2
 80016cc:	61b9      	str	r1, [r7, #24]
 80016ce:	4629      	mov	r1, r5
 80016d0:	eb43 0101 	adc.w	r1, r3, r1
 80016d4:	61f9      	str	r1, [r7, #28]
 80016d6:	4b57      	ldr	r3, [pc, #348]	@ (8001834 <getPressure+0x6c4>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80016e0:	4621      	mov	r1, r4
 80016e2:	1a89      	subs	r1, r1, r2
 80016e4:	6139      	str	r1, [r7, #16]
 80016e6:	4629      	mov	r1, r5
 80016e8:	eb61 0303 	sbc.w	r3, r1, r3
 80016ec:	617b      	str	r3, [r7, #20]
 80016ee:	4b56      	ldr	r3, [pc, #344]	@ (8001848 <getPressure+0x6d8>)
 80016f0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80016f4:	e9c3 1200 	strd	r1, r2, [r3]
		    P = (((raw_pressure * SENS) >> 21) - OFF) >> 15;
 80016f8:	4b54      	ldr	r3, [pc, #336]	@ (800184c <getPressure+0x6dc>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2200      	movs	r2, #0
 80016fe:	60bb      	str	r3, [r7, #8]
 8001700:	60fa      	str	r2, [r7, #12]
 8001702:	4b51      	ldr	r3, [pc, #324]	@ (8001848 <getPressure+0x6d8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800170c:	4629      	mov	r1, r5
 800170e:	fb02 f001 	mul.w	r0, r2, r1
 8001712:	4621      	mov	r1, r4
 8001714:	fb01 f103 	mul.w	r1, r1, r3
 8001718:	4401      	add	r1, r0
 800171a:	4620      	mov	r0, r4
 800171c:	fba0 2302 	umull	r2, r3, r0, r2
 8001720:	677b      	str	r3, [r7, #116]	@ 0x74
 8001722:	4613      	mov	r3, r2
 8001724:	673b      	str	r3, [r7, #112]	@ 0x70
 8001726:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001728:	18cb      	adds	r3, r1, r3
 800172a:	677b      	str	r3, [r7, #116]	@ 0x74
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8001738:	4621      	mov	r1, r4
 800173a:	0d4a      	lsrs	r2, r1, #21
 800173c:	4629      	mov	r1, r5
 800173e:	ea42 22c1 	orr.w	r2, r2, r1, lsl #11
 8001742:	4629      	mov	r1, r5
 8001744:	154b      	asrs	r3, r1, #21
 8001746:	493f      	ldr	r1, [pc, #252]	@ (8001844 <getPressure+0x6d4>)
 8001748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800174c:	1a14      	subs	r4, r2, r0
 800174e:	603c      	str	r4, [r7, #0]
 8001750:	eb63 0301 	sbc.w	r3, r3, r1
 8001754:	607b      	str	r3, [r7, #4]
 8001756:	f04f 0200 	mov.w	r2, #0
 800175a:	f04f 0300 	mov.w	r3, #0
 800175e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001762:	4621      	mov	r1, r4
 8001764:	0bca      	lsrs	r2, r1, #15
 8001766:	4629      	mov	r1, r5
 8001768:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 800176c:	4629      	mov	r1, r5
 800176e:	13cb      	asrs	r3, r1, #15
 8001770:	4b37      	ldr	r3, [pc, #220]	@ (8001850 <getPressure+0x6e0>)
 8001772:	601a      	str	r2, [r3, #0]

		    //To get a smoother pressure value we will use a 20 location rotating memory.
		    pressure_total_avarage -= pressure_rotating_mem[pressure_rotating_mem_location];                          //Subtract the current memory position to make room for the new value.
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <getPressure+0x6e4>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b37      	ldr	r3, [pc, #220]	@ (8001858 <getPressure+0x6e8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	4619      	mov	r1, r3
 800177e:	4b37      	ldr	r3, [pc, #220]	@ (800185c <getPressure+0x6ec>)
 8001780:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a33      	ldr	r2, [pc, #204]	@ (8001854 <getPressure+0x6e4>)
 8001788:	6013      	str	r3, [r2, #0]
		    pressure_rotating_mem[pressure_rotating_mem_location] = P;                                                //Calculate the new change between the actual pressure and the previous measurement.
 800178a:	4b33      	ldr	r3, [pc, #204]	@ (8001858 <getPressure+0x6e8>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4619      	mov	r1, r3
 8001790:	4b2f      	ldr	r3, [pc, #188]	@ (8001850 <getPressure+0x6e0>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a31      	ldr	r2, [pc, #196]	@ (800185c <getPressure+0x6ec>)
 8001796:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		    pressure_total_avarage += pressure_rotating_mem[pressure_rotating_mem_location];                          //Add the new value to the long term avarage value.
 800179a:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <getPressure+0x6e8>)
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b2e      	ldr	r3, [pc, #184]	@ (800185c <getPressure+0x6ec>)
 80017a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80017a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001854 <getPressure+0x6e4>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4413      	add	r3, r2
 80017ac:	4a29      	ldr	r2, [pc, #164]	@ (8001854 <getPressure+0x6e4>)
 80017ae:	6013      	str	r3, [r2, #0]
            pressure_rotating_mem_location++;                                                                         //Increase the rotating memory location.
 80017b0:	4b29      	ldr	r3, [pc, #164]	@ (8001858 <getPressure+0x6e8>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <getPressure+0x6e8>)
 80017ba:	701a      	strb	r2, [r3, #0]
		    if (pressure_rotating_mem_location == 20)pressure_rotating_mem_location = 0;                              //Start at 0 when the memory location 20 is reached.
 80017bc:	4b26      	ldr	r3, [pc, #152]	@ (8001858 <getPressure+0x6e8>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b14      	cmp	r3, #20
 80017c2:	d102      	bne.n	80017ca <getPressure+0x65a>
 80017c4:	4b24      	ldr	r3, [pc, #144]	@ (8001858 <getPressure+0x6e8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
		    actual_pressure_fast = (float)pressure_total_avarage / 20.0;
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <getPressure+0x6e4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	ee07 3a90 	vmov	s15, r3
 80017d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d6:	eef3 6a04 	vmov.f32	s13, #52	@ 0x41a00000  20.0
 80017da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <getPressure+0x6f0>)
 80017e0:	edc3 7a00 	vstr	s15, [r3]

		    //To get better results we will use a complementary fillter that can be adjusted by the fast average.
		    actual_pressure_slow = actual_pressure_slow * (float)0.985 + actual_pressure_fast * (float)0.015;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <getPressure+0x6f4>)
 80017e6:	edd3 7a00 	vldr	s15, [r3]
 80017ea:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8001868 <getPressure+0x6f8>
 80017ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <getPressure+0x6f0>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 800186c <getPressure+0x6fc>
 80017fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001804:	4b17      	ldr	r3, [pc, #92]	@ (8001864 <getPressure+0x6f4>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
		    actual_pressure_diff = actual_pressure_slow - actual_pressure_fast;                                       //Calculate the difference between the fast and the slow avarage value.
 800180a:	4b16      	ldr	r3, [pc, #88]	@ (8001864 <getPressure+0x6f4>)
 800180c:	ed93 7a00 	vldr	s14, [r3]
 8001810:	4b13      	ldr	r3, [pc, #76]	@ (8001860 <getPressure+0x6f0>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ee77 7a67 	vsub.f32	s15, s14, s15
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <getPressure+0x700>)
 800181c:	edc3 7a00 	vstr	s15, [r3]
		    if (actual_pressure_diff > 8)actual_pressure_diff = 8;                                                    //If the difference is larger then 8 limit the difference to 8.
 8001820:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <getPressure+0x700>)
 8001822:	edd3 7a00 	vldr	s15, [r3]
 8001826:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800182a:	e023      	b.n	8001874 <getPressure+0x704>
 800182c:	20000234 	.word	0x20000234
 8001830:	20000210 	.word	0x20000210
 8001834:	20000220 	.word	0x20000220
 8001838:	20000228 	.word	0x20000228
 800183c:	200001f4 	.word	0x200001f4
 8001840:	2000022c 	.word	0x2000022c
 8001844:	20000208 	.word	0x20000208
 8001848:	20000218 	.word	0x20000218
 800184c:	200000e8 	.word	0x200000e8
 8001850:	20000230 	.word	0x20000230
 8001854:	200001e4 	.word	0x200001e4
 8001858:	200001e8 	.word	0x200001e8
 800185c:	2000011c 	.word	0x2000011c
 8001860:	20000114 	.word	0x20000114
 8001864:	20000110 	.word	0x20000110
 8001868:	3f7c28f6 	.word	0x3f7c28f6
 800186c:	3c75c28f 	.word	0x3c75c28f
 8001870:	20000118 	.word	0x20000118
 8001874:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187c:	dd03      	ble.n	8001886 <getPressure+0x716>
 800187e:	4ba7      	ldr	r3, [pc, #668]	@ (8001b1c <getPressure+0x9ac>)
 8001880:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8001884:	601a      	str	r2, [r3, #0]
		    if (actual_pressure_diff < -8)actual_pressure_diff = -8;                                                  //If the difference is smaller then -8 limit the difference to -8.
 8001886:	4ba5      	ldr	r3, [pc, #660]	@ (8001b1c <getPressure+0x9ac>)
 8001888:	edd3 7a00 	vldr	s15, [r3]
 800188c:	eeba 7a00 	vmov.f32	s14, #160	@ 0xc1000000 -8.0
 8001890:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001898:	d503      	bpl.n	80018a2 <getPressure+0x732>
 800189a:	4ba0      	ldr	r3, [pc, #640]	@ (8001b1c <getPressure+0x9ac>)
 800189c:	f04f 4241 	mov.w	r2, #3238002688	@ 0xc1000000
 80018a0:	601a      	str	r2, [r3, #0]
		    //If the difference is larger then 1 or smaller then -1 the slow average is adjuste based on the error between the fast and slow average.
		    if (actual_pressure_diff > 1 || actual_pressure_diff < -1)actual_pressure_slow -= actual_pressure_diff / 6.0;
 80018a2:	4b9e      	ldr	r3, [pc, #632]	@ (8001b1c <getPressure+0x9ac>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	dc09      	bgt.n	80018ca <getPressure+0x75a>
 80018b6:	4b99      	ldr	r3, [pc, #612]	@ (8001b1c <getPressure+0x9ac>)
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80018c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d51f      	bpl.n	800190a <getPressure+0x79a>
 80018ca:	4b95      	ldr	r3, [pc, #596]	@ (8001b20 <getPressure+0x9b0>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdde 	bl	8000490 <__aeabi_f2d>
 80018d4:	4604      	mov	r4, r0
 80018d6:	460d      	mov	r5, r1
 80018d8:	4b90      	ldr	r3, [pc, #576]	@ (8001b1c <getPressure+0x9ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fdd7 	bl	8000490 <__aeabi_f2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001b24 <getPressure+0x9b4>)
 80018e8:	f7fe ff54 	bl	8000794 <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fc6c 	bl	80001d0 <__aeabi_dsub>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f7ff f8f6 	bl	8000af0 <__aeabi_d2f>
 8001904:	4603      	mov	r3, r0
 8001906:	4a86      	ldr	r2, [pc, #536]	@ (8001b20 <getPressure+0x9b0>)
 8001908:	6013      	str	r3, [r2, #0]
		    actual_pressure = actual_pressure_slow;
 800190a:	4b85      	ldr	r3, [pc, #532]	@ (8001b20 <getPressure+0x9b0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a86      	ldr	r2, [pc, #536]	@ (8001b28 <getPressure+0x9b8>)
 8001910:	6013      	str	r3, [r2, #0]
	}
	if (counter_pressure == 3) {
 8001912:	4b86      	ldr	r3, [pc, #536]	@ (8001b2c <getPressure+0x9bc>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b03      	cmp	r3, #3
 8001918:	f040 81a6 	bne.w	8001c68 <getPressure+0xaf8>
		counter_pressure = 0;
 800191c:	4b83      	ldr	r3, [pc, #524]	@ (8001b2c <getPressure+0x9bc>)
 800191e:	2200      	movs	r2, #0
 8001920:	701a      	strb	r2, [r3, #0]

	    if (manual_altitude_change == 1)	pressure_parachute_previous = actual_pressure * 10;                       //During manual altitude change the up/down detection is disabled.
 8001922:	4b83      	ldr	r3, [pc, #524]	@ (8001b30 <getPressure+0x9c0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b01      	cmp	r3, #1
 8001928:	d109      	bne.n	800193e <getPressure+0x7ce>
 800192a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b28 <getPressure+0x9b8>)
 800192c:	edd3 7a00 	vldr	s15, [r3]
 8001930:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001934:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001938:	4b7e      	ldr	r3, [pc, #504]	@ (8001b34 <getPressure+0x9c4>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
	    parachute_throttle -= parachute_buffer[parachute_rotating_mem_location];                                  //Subtract the current memory position to make room for the new value.
 800193e:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <getPressure+0x9c8>)
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	4b7e      	ldr	r3, [pc, #504]	@ (8001b3c <getPressure+0x9cc>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	4619      	mov	r1, r3
 8001948:	4b7d      	ldr	r3, [pc, #500]	@ (8001b40 <getPressure+0x9d0>)
 800194a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	4a79      	ldr	r2, [pc, #484]	@ (8001b38 <getPressure+0x9c8>)
 8001952:	6013      	str	r3, [r2, #0]
	    parachute_buffer[parachute_rotating_mem_location] = actual_pressure * 10 - pressure_parachute_previous;   //Calculate the new change between the actual pressure and the previous measurement.
 8001954:	4b74      	ldr	r3, [pc, #464]	@ (8001b28 <getPressure+0x9b8>)
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800195e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001962:	4b74      	ldr	r3, [pc, #464]	@ (8001b34 <getPressure+0x9c4>)
 8001964:	edd3 7a00 	vldr	s15, [r3]
 8001968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800196c:	4b73      	ldr	r3, [pc, #460]	@ (8001b3c <getPressure+0x9cc>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	461a      	mov	r2, r3
 8001972:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001976:	ee17 1a90 	vmov	r1, s15
 800197a:	4b71      	ldr	r3, [pc, #452]	@ (8001b40 <getPressure+0x9d0>)
 800197c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	    parachute_throttle += parachute_buffer[parachute_rotating_mem_location];                                  //Add the new value to the long term avarage value.
 8001980:	4b6e      	ldr	r3, [pc, #440]	@ (8001b3c <getPressure+0x9cc>)
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	461a      	mov	r2, r3
 8001986:	4b6e      	ldr	r3, [pc, #440]	@ (8001b40 <getPressure+0x9d0>)
 8001988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800198c:	4b6a      	ldr	r3, [pc, #424]	@ (8001b38 <getPressure+0x9c8>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4413      	add	r3, r2
 8001992:	4a69      	ldr	r2, [pc, #420]	@ (8001b38 <getPressure+0x9c8>)
 8001994:	6013      	str	r3, [r2, #0]
	    pressure_parachute_previous = actual_pressure * 10;                                                       //Store the current measurement for the next loop.
 8001996:	4b64      	ldr	r3, [pc, #400]	@ (8001b28 <getPressure+0x9b8>)
 8001998:	edd3 7a00 	vldr	s15, [r3]
 800199c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80019a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a4:	4b63      	ldr	r3, [pc, #396]	@ (8001b34 <getPressure+0x9c4>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
	    parachute_rotating_mem_location++;                                                                        //Increase the rotating memory location.
 80019aa:	4b64      	ldr	r3, [pc, #400]	@ (8001b3c <getPressure+0x9cc>)
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	3301      	adds	r3, #1
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	4b62      	ldr	r3, [pc, #392]	@ (8001b3c <getPressure+0x9cc>)
 80019b4:	701a      	strb	r2, [r3, #0]
	    if (parachute_rotating_mem_location == 30)	parachute_rotating_mem_location = 0;
 80019b6:	4b61      	ldr	r3, [pc, #388]	@ (8001b3c <getPressure+0x9cc>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b1e      	cmp	r3, #30
 80019bc:	d102      	bne.n	80019c4 <getPressure+0x854>
 80019be:	4b5f      	ldr	r3, [pc, #380]	@ (8001b3c <getPressure+0x9cc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]

	    if (flight_mode == 2) {
 80019c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001b44 <getPressure+0x9d4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	f040 813e 	bne.w	8001c4a <getPressure+0xada>
	    	manual_altitude_change = 0;
 80019ce:	4b58      	ldr	r3, [pc, #352]	@ (8001b30 <getPressure+0x9c0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
	    	if (pid_altitude_setpoint == 0)	pid_altitude_setpoint = actual_pressure;
 80019d4:	4b5c      	ldr	r3, [pc, #368]	@ (8001b48 <getPressure+0x9d8>)
 80019d6:	edd3 7a00 	vldr	s15, [r3]
 80019da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019e2:	d103      	bne.n	80019ec <getPressure+0x87c>
 80019e4:	4b50      	ldr	r3, [pc, #320]	@ (8001b28 <getPressure+0x9b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a57      	ldr	r2, [pc, #348]	@ (8001b48 <getPressure+0x9d8>)
 80019ea:	6013      	str	r3, [r2, #0]

	        //Calculate the PID output of the altitude hold.
	        pid_altitude_input = actual_pressure;                                          //Set the setpoint (pid_altitude_input) of the PID-controller.
 80019ec:	4b4e      	ldr	r3, [pc, #312]	@ (8001b28 <getPressure+0x9b8>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a56      	ldr	r2, [pc, #344]	@ (8001b4c <getPressure+0x9dc>)
 80019f2:	6013      	str	r3, [r2, #0]
	        pid_error_temp = pid_altitude_input - pid_altitude_setpoint;                   //Calculate the error between the setpoint and the actual pressure value.
 80019f4:	4b55      	ldr	r3, [pc, #340]	@ (8001b4c <getPressure+0x9dc>)
 80019f6:	ed93 7a00 	vldr	s14, [r3]
 80019fa:	4b53      	ldr	r3, [pc, #332]	@ (8001b48 <getPressure+0x9d8>)
 80019fc:	edd3 7a00 	vldr	s15, [r3]
 8001a00:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a04:	4b52      	ldr	r3, [pc, #328]	@ (8001b50 <getPressure+0x9e0>)
 8001a06:	edc3 7a00 	vstr	s15, [r3]

	        //To get better results the P-gain is increased when the error between the setpoint and the actual pressure value increases.
	        //The variable pid_error_gain_altitude will be used to adjust the P-gain of the PID-controller.
	        pid_error_gain_altitude = 0;                                                   //Set the pid_error_gain_altitude to 0.
 8001a0a:	4b52      	ldr	r3, [pc, #328]	@ (8001b54 <getPressure+0x9e4>)
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
	        if (pid_error_temp > 10 || pid_error_temp < -10) {                             //If the error between the setpoint and the actual pressure is larger than 10 or smaller then -10.
 8001a12:	4b4f      	ldr	r3, [pc, #316]	@ (8001b50 <getPressure+0x9e0>)
 8001a14:	edd3 7a00 	vldr	s15, [r3]
 8001a18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a24:	dc09      	bgt.n	8001a3a <getPressure+0x8ca>
 8001a26:	4b4a      	ldr	r3, [pc, #296]	@ (8001b50 <getPressure+0x9e0>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	eeba 7a04 	vmov.f32	s14, #164	@ 0xc1200000 -10.0
 8001a30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a38:	d528      	bpl.n	8001a8c <getPressure+0x91c>
	          pid_error_gain_altitude = (abs(pid_error_temp) - 10) / 20.0;                 //The positive pid_error_gain_altitude variable is calculated based based on the error.
 8001a3a:	4b45      	ldr	r3, [pc, #276]	@ (8001b50 <getPressure+0x9e0>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a44:	ee17 3a90 	vmov	r3, s15
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	bfb8      	it	lt
 8001a4c:	425b      	neglt	r3, r3
 8001a4e:	3b0a      	subs	r3, #10
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7fe fd0b 	bl	800046c <__aeabi_i2d>
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001b58 <getPressure+0x9e8>)
 8001a5c:	f7fe fe9a 	bl	8000794 <__aeabi_ddiv>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	f7ff f842 	bl	8000af0 <__aeabi_d2f>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	4a39      	ldr	r2, [pc, #228]	@ (8001b54 <getPressure+0x9e4>)
 8001a70:	6013      	str	r3, [r2, #0]
	          if (pid_error_gain_altitude > 3)pid_error_gain_altitude = 3;                 //To prevent extreme P-gains it must be limited to 3.
 8001a72:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <getPressure+0x9e4>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001a7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a84:	dd02      	ble.n	8001a8c <getPressure+0x91c>
 8001a86:	4b33      	ldr	r3, [pc, #204]	@ (8001b54 <getPressure+0x9e4>)
 8001a88:	4a34      	ldr	r2, [pc, #208]	@ (8001b5c <getPressure+0x9ec>)
 8001a8a:	601a      	str	r2, [r3, #0]
	        }

	        //In the following section the I-output is calculated. It's an accumulation of errors over time.
	        //The time factor is removed as the program loop runs at 250Hz.
	        pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp;
 8001a8c:	4b34      	ldr	r3, [pc, #208]	@ (8001b60 <getPressure+0x9f0>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fcfd 	bl	8000490 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	4b32      	ldr	r3, [pc, #200]	@ (8001b64 <getPressure+0x9f4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcf6 	bl	8000490 <__aeabi_f2d>
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b68 <getPressure+0x9f8>)
 8001aaa:	f7fe fe73 	bl	8000794 <__aeabi_ddiv>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4690      	mov	r8, r2
 8001ab4:	4699      	mov	r9, r3
 8001ab6:	4b26      	ldr	r3, [pc, #152]	@ (8001b50 <getPressure+0x9e0>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7fe fce8 	bl	8000490 <__aeabi_f2d>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4640      	mov	r0, r8
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	f7fe fd3a 	bl	8000540 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	4629      	mov	r1, r5
 8001ad4:	f7fe fb7e 	bl	80001d4 <__adddf3>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7ff f806 	bl	8000af0 <__aeabi_d2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b60 <getPressure+0x9f0>)
 8001ae8:	6013      	str	r3, [r2, #0]
	        if (pid_i_mem_altitude > pid_max_altitude)pid_i_mem_altitude = pid_max_altitude;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <getPressure+0x9fc>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
 8001af2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af6:	4b1a      	ldr	r3, [pc, #104]	@ (8001b60 <getPressure+0x9f0>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	d534      	bpl.n	8001b70 <getPressure+0xa00>
 8001b06:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <getPressure+0x9fc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	ee07 3a90 	vmov	s15, r3
 8001b0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b12:	4b13      	ldr	r3, [pc, #76]	@ (8001b60 <getPressure+0x9f0>)
 8001b14:	edc3 7a00 	vstr	s15, [r3]
 8001b18:	e043      	b.n	8001ba2 <getPressure+0xa32>
 8001b1a:	bf00      	nop
 8001b1c:	20000118 	.word	0x20000118
 8001b20:	20000110 	.word	0x20000110
 8001b24:	40180000 	.word	0x40180000
 8001b28:	2000010c 	.word	0x2000010c
 8001b2c:	200000e4 	.word	0x200000e4
 8001b30:	200002e8 	.word	0x200002e8
 8001b34:	200002e0 	.word	0x200002e0
 8001b38:	200002dc 	.word	0x200002dc
 8001b3c:	2000024c 	.word	0x2000024c
 8001b40:	20000250 	.word	0x20000250
 8001b44:	20000468 	.word	0x20000468
 8001b48:	2000023c 	.word	0x2000023c
 8001b4c:	20000240 	.word	0x20000240
 8001b50:	20000248 	.word	0x20000248
 8001b54:	200002e4 	.word	0x200002e4
 8001b58:	40340000 	.word	0x40340000
 8001b5c:	40400000 	.word	0x40400000
 8001b60:	20000238 	.word	0x20000238
 8001b64:	20000050 	.word	0x20000050
 8001b68:	40590000 	.word	0x40590000
 8001b6c:	20000004 	.word	0x20000004
	        else if (pid_i_mem_altitude < pid_max_altitude * -1)pid_i_mem_altitude = pid_max_altitude * -1;
 8001b70:	4b43      	ldr	r3, [pc, #268]	@ (8001c80 <getPressure+0xb10>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	425b      	negs	r3, r3
 8001b76:	ee07 3a90 	vmov	s15, r3
 8001b7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b7e:	4b41      	ldr	r3, [pc, #260]	@ (8001c84 <getPressure+0xb14>)
 8001b80:	edd3 7a00 	vldr	s15, [r3]
 8001b84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b8c:	dd09      	ble.n	8001ba2 <getPressure+0xa32>
 8001b8e:	4b3c      	ldr	r3, [pc, #240]	@ (8001c80 <getPressure+0xb10>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	425b      	negs	r3, r3
 8001b94:	ee07 3a90 	vmov	s15, r3
 8001b98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b9c:	4b39      	ldr	r3, [pc, #228]	@ (8001c84 <getPressure+0xb14>)
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
	        //In the following line the PID-output is calculated.
	        //P = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp.
	        //I = pid_i_mem_altitude += (pid_i_gain_altitude / 100.0) * pid_error_temp (see above).
	        //D = pid_d_gain_altitude * parachute_throttle.
	        pid_output_altitude = (pid_p_gain_altitude + pid_error_gain_altitude) * pid_error_temp + pid_i_mem_altitude + pid_d_gain_altitude * parachute_throttle;
 8001ba2:	4b39      	ldr	r3, [pc, #228]	@ (8001c88 <getPressure+0xb18>)
 8001ba4:	ed93 7a00 	vldr	s14, [r3]
 8001ba8:	4b38      	ldr	r3, [pc, #224]	@ (8001c8c <getPressure+0xb1c>)
 8001baa:	edd3 7a00 	vldr	s15, [r3]
 8001bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb2:	4b37      	ldr	r3, [pc, #220]	@ (8001c90 <getPressure+0xb20>)
 8001bb4:	edd3 7a00 	vldr	s15, [r3]
 8001bb8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bbc:	4b31      	ldr	r3, [pc, #196]	@ (8001c84 <getPressure+0xb14>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bc6:	4b33      	ldr	r3, [pc, #204]	@ (8001c94 <getPressure+0xb24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	ee07 3a90 	vmov	s15, r3
 8001bce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd2:	4b31      	ldr	r3, [pc, #196]	@ (8001c98 <getPressure+0xb28>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be0:	4b2e      	ldr	r3, [pc, #184]	@ (8001c9c <getPressure+0xb2c>)
 8001be2:	edc3 7a00 	vstr	s15, [r3]
	        //To prevent extreme PID-output the output must be limited.
	        if (pid_output_altitude > pid_max_altitude)pid_output_altitude = pid_max_altitude;
 8001be6:	4b26      	ldr	r3, [pc, #152]	@ (8001c80 <getPressure+0xb10>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bf2:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <getPressure+0xb2c>)
 8001bf4:	edd3 7a00 	vldr	s15, [r3]
 8001bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c00:	d509      	bpl.n	8001c16 <getPressure+0xaa6>
 8001c02:	4b1f      	ldr	r3, [pc, #124]	@ (8001c80 <getPressure+0xb10>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	4b23      	ldr	r3, [pc, #140]	@ (8001c9c <getPressure+0xb2c>)
 8001c10:	edc3 7a00 	vstr	s15, [r3]
 8001c14:	e028      	b.n	8001c68 <getPressure+0xaf8>
	        else if (pid_output_altitude < pid_max_altitude * -1)pid_output_altitude = pid_max_altitude * -1;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <getPressure+0xb10>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	425b      	negs	r3, r3
 8001c1c:	ee07 3a90 	vmov	s15, r3
 8001c20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <getPressure+0xb2c>)
 8001c26:	edd3 7a00 	vldr	s15, [r3]
 8001c2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c32:	dd19      	ble.n	8001c68 <getPressure+0xaf8>
 8001c34:	4b12      	ldr	r3, [pc, #72]	@ (8001c80 <getPressure+0xb10>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	425b      	negs	r3, r3
 8001c3a:	ee07 3a90 	vmov	s15, r3
 8001c3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c42:	4b16      	ldr	r3, [pc, #88]	@ (8001c9c <getPressure+0xb2c>)
 8001c44:	edc3 7a00 	vstr	s15, [r3]
 8001c48:	e00e      	b.n	8001c68 <getPressure+0xaf8>
	    }
	    else{
	        pid_altitude_setpoint = 0;                                                     //Reset the PID altitude setpoint.
 8001c4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ca0 <getPressure+0xb30>)
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	601a      	str	r2, [r3, #0]
	        pid_output_altitude = 0;                                                       //Reset the output of the PID controller.
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <getPressure+0xb2c>)
 8001c54:	f04f 0200 	mov.w	r2, #0
 8001c58:	601a      	str	r2, [r3, #0]
	        pid_i_mem_altitude = 0;                                                        //Reset the I-controller.
 8001c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <getPressure+0xb14>)
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
	        manual_altitude_change = 1;
 8001c62:	4b10      	ldr	r3, [pc, #64]	@ (8001ca4 <getPressure+0xb34>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
	    }
	}

  //return actual_pressure; //returns back pressure P
	return pid_output_altitude;
 8001c68:	4b0c      	ldr	r3, [pc, #48]	@ (8001c9c <getPressure+0xb2c>)
 8001c6a:	edd3 7a00 	vldr	s15, [r3]
 8001c6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c72:	ee17 3a90 	vmov	r3, s15
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3790      	adds	r7, #144	@ 0x90
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c80:	20000004 	.word	0x20000004
 8001c84:	20000238 	.word	0x20000238
 8001c88:	2000004c 	.word	0x2000004c
 8001c8c:	200002e4 	.word	0x200002e4
 8001c90:	20000248 	.word	0x20000248
 8001c94:	200002dc 	.word	0x200002dc
 8001c98:	20000054 	.word	0x20000054
 8001c9c:	20000244 	.word	0x20000244
 8001ca0:	2000023c 	.word	0x2000023c
 8001ca4:	200002e8 	.word	0x200002e8

08001ca8 <Send_Data_To_Gui>:
void fault_dec()
{
	while(1);
}
void Send_Data_To_Gui()
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b092      	sub	sp, #72	@ 0x48
 8001cac:	af00      	add	r7, sp, #0
	 Tx_buff[0] = 0x44;
 8001cae:	4b74      	ldr	r3, [pc, #464]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001cb0:	2244      	movs	r2, #68	@ 0x44
 8001cb2:	701a      	strb	r2, [r3, #0]
     Tx_buff[1] = 0x41;
 8001cb4:	4b72      	ldr	r3, [pc, #456]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001cb6:	2241      	movs	r2, #65	@ 0x41
 8001cb8:	705a      	strb	r2, [r3, #1]
	 unsigned char *AngleRoll_Bytes = (unsigned char *)&KalmanAngleRoll; //KalmanAngleRoll
 8001cba:	4b72      	ldr	r3, [pc, #456]	@ (8001e84 <Send_Data_To_Gui+0x1dc>)
 8001cbc:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cc2:	e00a      	b.n	8001cda <Send_Data_To_Gui+0x32>
        Tx_buff[i + 2] = AngleRoll_Bytes[i];
 8001cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	441a      	add	r2, r3
 8001cca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ccc:	3302      	adds	r3, #2
 8001cce:	7811      	ldrb	r1, [r2, #0]
 8001cd0:	4a6b      	ldr	r2, [pc, #428]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001cd2:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d9f1      	bls.n	8001cc4 <Send_Data_To_Gui+0x1c>
    }
		unsigned char *AnglePitch_Bytes = (unsigned char *)&KalmanAnglePitch; //KalmanAnglePitch
 8001ce0:	4b69      	ldr	r3, [pc, #420]	@ (8001e88 <Send_Data_To_Gui+0x1e0>)
 8001ce2:	61fb      	str	r3, [r7, #28]
    for (int i = 0; i < sizeof(float); ++i) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ce8:	e00a      	b.n	8001d00 <Send_Data_To_Gui+0x58>
        Tx_buff[i + 6] = AnglePitch_Bytes[i];
 8001cea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cec:	69fa      	ldr	r2, [r7, #28]
 8001cee:	441a      	add	r2, r3
 8001cf0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cf2:	3306      	adds	r3, #6
 8001cf4:	7811      	ldrb	r1, [r2, #0]
 8001cf6:	4a62      	ldr	r2, [pc, #392]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001cf8:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001cfa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8001d00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d02:	2b03      	cmp	r3, #3
 8001d04:	d9f1      	bls.n	8001cea <Send_Data_To_Gui+0x42>
    }
		unsigned char *AngleRoll_Setpoint_Bytes = (unsigned char *)&DesiredAngleRoll; //DesiredAngleRoll
 8001d06:	4b61      	ldr	r3, [pc, #388]	@ (8001e8c <Send_Data_To_Gui+0x1e4>)
 8001d08:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d0e:	e00a      	b.n	8001d26 <Send_Data_To_Gui+0x7e>
        Tx_buff[i + 10] = AngleRoll_Setpoint_Bytes[i];
 8001d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	441a      	add	r2, r3
 8001d16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d18:	330a      	adds	r3, #10
 8001d1a:	7811      	ldrb	r1, [r2, #0]
 8001d1c:	4a58      	ldr	r2, [pc, #352]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001d1e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d22:	3301      	adds	r3, #1
 8001d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001d26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001d28:	2b03      	cmp	r3, #3
 8001d2a:	d9f1      	bls.n	8001d10 <Send_Data_To_Gui+0x68>
    }
		unsigned char *AnglePitch_Setpoint_Bytes = (unsigned char *)&DesiredAnglePitch; //DesiredAnglePitch
 8001d2c:	4b58      	ldr	r3, [pc, #352]	@ (8001e90 <Send_Data_To_Gui+0x1e8>)
 8001d2e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d30:	2300      	movs	r3, #0
 8001d32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d34:	e00a      	b.n	8001d4c <Send_Data_To_Gui+0xa4>
        Tx_buff[i + 14] = AnglePitch_Setpoint_Bytes[i];
 8001d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	441a      	add	r2, r3
 8001d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d3e:	330e      	adds	r3, #14
 8001d40:	7811      	ldrb	r1, [r2, #0]
 8001d42:	4a4f      	ldr	r2, [pc, #316]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001d44:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d48:	3301      	adds	r3, #1
 8001d4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d4e:	2b03      	cmp	r3, #3
 8001d50:	d9f1      	bls.n	8001d36 <Send_Data_To_Gui+0x8e>
    }
    	unsigned char *InputThrottle_Bytes = (unsigned char *)&InputThrottle;    //InputThrottle
 8001d52:	4b50      	ldr	r3, [pc, #320]	@ (8001e94 <Send_Data_To_Gui+0x1ec>)
 8001d54:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d5a:	e00a      	b.n	8001d72 <Send_Data_To_Gui+0xca>
        Tx_buff[i + 18] = InputThrottle_Bytes[i];
 8001d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	441a      	add	r2, r3
 8001d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d64:	3312      	adds	r3, #18
 8001d66:	7811      	ldrb	r1, [r2, #0]
 8001d68:	4a45      	ldr	r2, [pc, #276]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001d6a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < sizeof(float); ++i) {
 8001d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d6e:	3301      	adds	r3, #1
 8001d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d74:	2b03      	cmp	r3, #3
 8001d76:	d9f1      	bls.n	8001d5c <Send_Data_To_Gui+0xb4>
    }
		unsigned char *actual_pressure_Bytes = (unsigned char *)&actual_pressure;   //actual_pressure
 8001d78:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <Send_Data_To_Gui+0x1f0>)
 8001d7a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d80:	e00a      	b.n	8001d98 <Send_Data_To_Gui+0xf0>
		Tx_buff[i + 22] = actual_pressure_Bytes[i];
 8001d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	441a      	add	r2, r3
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	3316      	adds	r3, #22
 8001d8c:	7811      	ldrb	r1, [r2, #0]
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001d90:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d94:	3301      	adds	r3, #1
 8001d96:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d9f1      	bls.n	8001d82 <Send_Data_To_Gui+0xda>
	}

	Tx_buff[26] = m8n_rx_buf[10]; Tx_buff[27] = m8n_rx_buf[11];
 8001d9e:	4b3f      	ldr	r3, [pc, #252]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001da0:	7a9a      	ldrb	r2, [r3, #10]
 8001da2:	4b37      	ldr	r3, [pc, #220]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001da4:	769a      	strb	r2, [r3, #26]
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001da8:	7ada      	ldrb	r2, [r3, #11]
 8001daa:	4b35      	ldr	r3, [pc, #212]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dac:	76da      	strb	r2, [r3, #27]
	Tx_buff[28] = m8n_rx_buf[12]; Tx_buff[29] = m8n_rx_buf[13];
 8001dae:	4b3b      	ldr	r3, [pc, #236]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001db0:	7b1a      	ldrb	r2, [r3, #12]
 8001db2:	4b33      	ldr	r3, [pc, #204]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001db4:	771a      	strb	r2, [r3, #28]
 8001db6:	4b39      	ldr	r3, [pc, #228]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001db8:	7b5a      	ldrb	r2, [r3, #13]
 8001dba:	4b31      	ldr	r3, [pc, #196]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dbc:	775a      	strb	r2, [r3, #29]

	Tx_buff[30] = m8n_rx_buf[14]; Tx_buff[31] = m8n_rx_buf[15];
 8001dbe:	4b37      	ldr	r3, [pc, #220]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001dc0:	7b9a      	ldrb	r2, [r3, #14]
 8001dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dc4:	779a      	strb	r2, [r3, #30]
 8001dc6:	4b35      	ldr	r3, [pc, #212]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001dc8:	7bda      	ldrb	r2, [r3, #15]
 8001dca:	4b2d      	ldr	r3, [pc, #180]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dcc:	77da      	strb	r2, [r3, #31]
	Tx_buff[32] = m8n_rx_buf[16]; Tx_buff[33] = m8n_rx_buf[17];
 8001dce:	4b33      	ldr	r3, [pc, #204]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001dd0:	7c1a      	ldrb	r2, [r3, #16]
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dd4:	f883 2020 	strb.w	r2, [r3, #32]
 8001dd8:	4b30      	ldr	r3, [pc, #192]	@ (8001e9c <Send_Data_To_Gui+0x1f4>)
 8001dda:	7c5a      	ldrb	r2, [r3, #17]
 8001ddc:	4b28      	ldr	r3, [pc, #160]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dde:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	unsigned char *Altitude_Bytes = (unsigned char *)&Altitude_gui;   //Altitude_gui
 8001de2:	4b2f      	ldr	r3, [pc, #188]	@ (8001ea0 <Send_Data_To_Gui+0x1f8>)
 8001de4:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < sizeof(float); ++i) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dea:	e00a      	b.n	8001e02 <Send_Data_To_Gui+0x15a>
	Tx_buff[i + 34] = Altitude_Bytes[i];
 8001dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dee:	68ba      	ldr	r2, [r7, #8]
 8001df0:	441a      	add	r2, r3
 8001df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001df4:	3322      	adds	r3, #34	@ 0x22
 8001df6:	7811      	ldrb	r1, [r2, #0]
 8001df8:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001dfa:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dfe:	3301      	adds	r3, #1
 8001e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e04:	2b03      	cmp	r3, #3
 8001e06:	d9f1      	bls.n	8001dec <Send_Data_To_Gui+0x144>
	}
	unsigned char *Altitude_setpoint_Bytes = (unsigned char *)&Altitude_setpoint;   //Altitude_setpoint
 8001e08:	4b26      	ldr	r3, [pc, #152]	@ (8001ea4 <Send_Data_To_Gui+0x1fc>)
 8001e0a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < sizeof(float); ++i) {
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e10:	e00a      	b.n	8001e28 <Send_Data_To_Gui+0x180>
	Tx_buff[i + 38] = Altitude_setpoint_Bytes[i];
 8001e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	441a      	add	r2, r3
 8001e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e1a:	3326      	adds	r3, #38	@ 0x26
 8001e1c:	7811      	ldrb	r1, [r2, #0]
 8001e1e:	4a18      	ldr	r2, [pc, #96]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001e20:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e24:	3301      	adds	r3, #1
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	2b03      	cmp	r3, #3
 8001e2c:	d9f1      	bls.n	8001e12 <Send_Data_To_Gui+0x16a>
	}
	unsigned char *Altitude_gui_Bytes = (unsigned char *)&Altitude;   //Altitude
 8001e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea8 <Send_Data_To_Gui+0x200>)
 8001e30:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < sizeof(float); ++i) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e36:	e00a      	b.n	8001e4e <Send_Data_To_Gui+0x1a6>
	Tx_buff[i + 42] = Altitude_gui_Bytes[i];
 8001e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	441a      	add	r2, r3
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	332a      	adds	r3, #42	@ 0x2a
 8001e42:	7811      	ldrb	r1, [r2, #0]
 8001e44:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001e46:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < sizeof(float); ++i) {
 8001e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	2b03      	cmp	r3, #3
 8001e52:	d9f1      	bls.n	8001e38 <Send_Data_To_Gui+0x190>
	}

	Tx_buff[46] = '\r'; Tx_buff[47] = '\n';
 8001e54:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001e56:	220d      	movs	r2, #13
 8001e58:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8001e5c:	4b08      	ldr	r3, [pc, #32]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001e5e:	220a      	movs	r2, #10
 8001e60:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	if(Flag_Plot)
 8001e64:	4b11      	ldr	r3, [pc, #68]	@ (8001eac <Send_Data_To_Gui+0x204>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d004      	beq.n	8001e76 <Send_Data_To_Gui+0x1ce>
	{
		HAL_UART_Transmit_DMA(&huart2, Tx_buff,48);
 8001e6c:	2230      	movs	r2, #48	@ 0x30
 8001e6e:	4904      	ldr	r1, [pc, #16]	@ (8001e80 <Send_Data_To_Gui+0x1d8>)
 8001e70:	480f      	ldr	r0, [pc, #60]	@ (8001eb0 <Send_Data_To_Gui+0x208>)
 8001e72:	f006 fce5 	bl	8008840 <HAL_UART_Transmit_DMA>
	}
}
 8001e76:	bf00      	nop
 8001e78:	3748      	adds	r7, #72	@ 0x48
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200003a4 	.word	0x200003a4
 8001e84:	20000494 	.word	0x20000494
 8001e88:	20000498 	.word	0x20000498
 8001e8c:	20000500 	.word	0x20000500
 8001e90:	20000504 	.word	0x20000504
 8001e94:	200004c0 	.word	0x200004c0
 8001e98:	2000010c 	.word	0x2000010c
 8001e9c:	2000046c 	.word	0x2000046c
 8001ea0:	20000304 	.word	0x20000304
 8001ea4:	20000300 	.word	0x20000300
 8001ea8:	200002f8 	.word	0x200002f8
 8001eac:	20000308 	.word	0x20000308
 8001eb0:	20000808 	.word	0x20000808
 8001eb4:	00000000 	.word	0x00000000

08001eb8 <kalman_1d>:

void kalman_1d(float KalmanState, float KalmanUncertainty, float KalmanInput, float KalmanMeasurement) {
 8001eb8:	b5b0      	push	{r4, r5, r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	ed87 0a03 	vstr	s0, [r7, #12]
 8001ec2:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ec6:	ed87 1a01 	vstr	s2, [r7, #4]
 8001eca:	edc7 1a00 	vstr	s3, [r7]
  KalmanState = KalmanState + 0.004*KalmanInput;
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f7fe fade 	bl	8000490 <__aeabi_f2d>
 8001ed4:	4604      	mov	r4, r0
 8001ed6:	460d      	mov	r5, r1
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7fe fad9 	bl	8000490 <__aeabi_f2d>
 8001ede:	a32b      	add	r3, pc, #172	@ (adr r3, 8001f8c <kalman_1d+0xd4>)
 8001ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee4:	f7fe fb2c 	bl	8000540 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f970 	bl	80001d4 <__adddf3>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	460b      	mov	r3, r1
 8001ef8:	4610      	mov	r0, r2
 8001efa:	4619      	mov	r1, r3
 8001efc:	f7fe fdf8 	bl	8000af0 <__aeabi_d2f>
 8001f00:	4603      	mov	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]
  KalmanUncertainty = KalmanUncertainty + 0.004 * 0.004 * 4 * 4;
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	f7fe fac3 	bl	8000490 <__aeabi_f2d>
 8001f0a:	a322      	add	r3, pc, #136	@ (adr r3, 8001f94 <kalman_1d+0xdc>)
 8001f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f10:	f7fe f960 	bl	80001d4 <__adddf3>
 8001f14:	4602      	mov	r2, r0
 8001f16:	460b      	mov	r3, r1
 8001f18:	4610      	mov	r0, r2
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	f7fe fde8 	bl	8000af0 <__aeabi_d2f>
 8001f20:	4603      	mov	r3, r0
 8001f22:	60bb      	str	r3, [r7, #8]
  float KalmanGain = KalmanUncertainty * 1/(1*KalmanUncertainty + 3 * 3);
 8001f24:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f28:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
 8001f2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001f30:	edd7 6a02 	vldr	s13, [r7, #8]
 8001f34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f38:	edc7 7a05 	vstr	s15, [r7, #20]
  KalmanState = KalmanState+KalmanGain * (KalmanMeasurement-KalmanState);
 8001f3c:	ed97 7a00 	vldr	s14, [r7]
 8001f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f44:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f48:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f50:	ed97 7a03 	vldr	s14, [r7, #12]
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	edc7 7a03 	vstr	s15, [r7, #12]
  KalmanUncertainty = (1-KalmanGain) * KalmanUncertainty;
 8001f5c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f60:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f68:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f70:	edc7 7a02 	vstr	s15, [r7, #8]
  Kalman1DOutput[0] = KalmanState;
 8001f74:	4a04      	ldr	r2, [pc, #16]	@ (8001f88 <kalman_1d+0xd0>)
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6013      	str	r3, [r2, #0]
  Kalman1DOutput[1] = KalmanUncertainty;
 8001f7a:	4a03      	ldr	r2, [pc, #12]	@ (8001f88 <kalman_1d+0xd0>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	6053      	str	r3, [r2, #4]
}
 8001f80:	bf00      	nop
 8001f82:	3718      	adds	r7, #24
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	2000049c 	.word	0x2000049c
 8001f8c:	d2f1a9fc 	.word	0xd2f1a9fc
 8001f90:	3f70624d 	.word	0x3f70624d
 8001f94:	a0b5ed8d 	.word	0xa0b5ed8d
 8001f98:	3f30c6f7 	.word	0x3f30c6f7

08001f9c <SetValue>:
void kalman_2d(void);
void define_kalman_2d(void);

int SetValue(int value, int inMin, int inMax, int outMin, int outMax)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
 8001fa8:	603b      	str	r3, [r7, #0]
	if (value < inMin) return outMin;
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	da01      	bge.n	8001fb6 <SetValue+0x1a>
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	e006      	b.n	8001fc4 <SetValue+0x28>
	else if (value > inMax) return outMax;
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	dd01      	ble.n	8001fc2 <SetValue+0x26>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	e000      	b.n	8001fc4 <SetValue+0x28>
	else return value;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001fd0:	b590      	push	{r4, r7, lr}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af02      	add	r7, sp, #8
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	80fb      	strh	r3, [r7, #6]

	if ( GPIO_Pin == GPIO_PIN_15){
 8001fda:	88fb      	ldrh	r3, [r7, #6]
 8001fdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fe0:	d133      	bne.n	800204a <HAL_GPIO_EXTI_Callback+0x7a>
		tick = __HAL_TIM_GET_COUNTER(&htim2);
 8001fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8002054 <HAL_GPIO_EXTI_Callback+0x84>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe8:	461a      	mov	r2, r3
 8001fea:	4b1b      	ldr	r3, [pc, #108]	@ (8002058 <HAL_GPIO_EXTI_Callback+0x88>)
 8001fec:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COUNTER(&htim2,0);
 8001fee:	4b19      	ldr	r3, [pc, #100]	@ (8002054 <HAL_GPIO_EXTI_Callback+0x84>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	@ 0x24

		if ( tick < 2100){
 8001ff6:	4b18      	ldr	r3, [pc, #96]	@ (8002058 <HAL_GPIO_EXTI_Callback+0x88>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f640 0233 	movw	r2, #2099	@ 0x833
 8001ffe:	4293      	cmp	r3, r2
 8002000:	dc1c      	bgt.n	800203c <HAL_GPIO_EXTI_Callback+0x6c>
			ch[pulse] = SetValue(tick, 1030, 1950, 1000, 2000);;
 8002002:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <HAL_GPIO_EXTI_Callback+0x88>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	461c      	mov	r4, r3
 800200e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002018:	f240 729e 	movw	r2, #1950	@ 0x79e
 800201c:	f240 4106 	movw	r1, #1030	@ 0x406
 8002020:	f7ff ffbc 	bl	8001f9c <SetValue>
 8002024:	4603      	mov	r3, r0
 8002026:	4a0e      	ldr	r2, [pc, #56]	@ (8002060 <HAL_GPIO_EXTI_Callback+0x90>)
 8002028:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			pulse++;
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <HAL_GPIO_EXTI_Callback+0x8c>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2db      	uxtb	r3, r3
 8002032:	3301      	adds	r3, #1
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4b09      	ldr	r3, [pc, #36]	@ (800205c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002038:	701a      	strb	r2, [r3, #0]
		else{
			__HAL_TIM_SET_COUNTER(&htim2,0);
			pulse =0;
		}
	}
}
 800203a:	e006      	b.n	800204a <HAL_GPIO_EXTI_Callback+0x7a>
			__HAL_TIM_SET_COUNTER(&htim2,0);
 800203c:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_GPIO_EXTI_Callback+0x84>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24
			pulse =0;
 8002044:	4b05      	ldr	r3, [pc, #20]	@ (800205c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002046:	2200      	movs	r2, #0
 8002048:	701a      	strb	r2, [r3, #0]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	bd90      	pop	{r4, r7, pc}
 8002052:	bf00      	nop
 8002054:	20000730 	.word	0x20000730
 8002058:	2000040c 	.word	0x2000040c
 800205c:	20000410 	.word	0x20000410
 8002060:	200003ec 	.word	0x200003ec

08002064 <MPU6050_Init>:


HAL_StatusTypeDef MPU6050_Init (void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af04      	add	r7, sp, #16
	uint8_t check;
	uint8_t Data;

	// check device ID WHO_AM_I

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR,WHO_AM_I_REG,1, &check, 1,1000)!= HAL_OK) return HAL_ERROR;
 800206a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800206e:	9302      	str	r3, [sp, #8]
 8002070:	2301      	movs	r3, #1
 8002072:	9301      	str	r3, [sp, #4]
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	2275      	movs	r2, #117	@ 0x75
 800207c:	21d0      	movs	r1, #208	@ 0xd0
 800207e:	483a      	ldr	r0, [pc, #232]	@ (8002168 <MPU6050_Init+0x104>)
 8002080:	f004 f894 	bl	80061ac <HAL_I2C_Mem_Read>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MPU6050_Init+0x2a>
 800208a:	2301      	movs	r3, #1
 800208c:	e067      	b.n	800215e <MPU6050_Init+0xfa>

	if (check == 104)  // 0x68 will be returned by the sensor if everything goes well
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	2b68      	cmp	r3, #104	@ 0x68
 8002092:	d163      	bne.n	800215c <MPU6050_Init+0xf8>
	{
		// power management register 0X6B we should write all 0's to wake the sensor up
		Data = 0;
 8002094:	2300      	movs	r3, #0
 8002096:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1,&Data, 1,1000)!= HAL_OK)
 8002098:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800209c:	9302      	str	r3, [sp, #8]
 800209e:	2301      	movs	r3, #1
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	1dbb      	adds	r3, r7, #6
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2301      	movs	r3, #1
 80020a8:	226b      	movs	r2, #107	@ 0x6b
 80020aa:	21d0      	movs	r1, #208	@ 0xd0
 80020ac:	482e      	ldr	r0, [pc, #184]	@ (8002168 <MPU6050_Init+0x104>)
 80020ae:	f003 ff83 	bl	8005fb8 <HAL_I2C_Mem_Write>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MPU6050_Init+0x58>
			return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e050      	b.n	800215e <MPU6050_Init+0xfa>
		// config 1KHz Digital Low Pass Filter 10Hz
		Data = 0x05;
 80020bc:	2305      	movs	r3, #5
 80020be:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, CONFIG_REG, 1,&Data, 1,1000)!= HAL_OK)
 80020c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c4:	9302      	str	r3, [sp, #8]
 80020c6:	2301      	movs	r3, #1
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	1dbb      	adds	r3, r7, #6
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2301      	movs	r3, #1
 80020d0:	221a      	movs	r2, #26
 80020d2:	21d0      	movs	r1, #208	@ 0xd0
 80020d4:	4824      	ldr	r0, [pc, #144]	@ (8002168 <MPU6050_Init+0x104>)
 80020d6:	f003 ff6f 	bl	8005fb8 <HAL_I2C_Mem_Write>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MPU6050_Init+0x80>
			return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e03c      	b.n	800215e <MPU6050_Init+0xfa>
		
		// Set DATA RATE of 1KHz by writing SMPLRT_DIV register
		Data = 0x07;
 80020e4:	2307      	movs	r3, #7
 80020e6:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1,1000)!= HAL_OK)
 80020e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020ec:	9302      	str	r3, [sp, #8]
 80020ee:	2301      	movs	r3, #1
 80020f0:	9301      	str	r3, [sp, #4]
 80020f2:	1dbb      	adds	r3, r7, #6
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	2301      	movs	r3, #1
 80020f8:	2219      	movs	r2, #25
 80020fa:	21d0      	movs	r1, #208	@ 0xd0
 80020fc:	481a      	ldr	r0, [pc, #104]	@ (8002168 <MPU6050_Init+0x104>)
 80020fe:	f003 ff5b 	bl	8005fb8 <HAL_I2C_Mem_Write>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MPU6050_Init+0xa8>
			return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e028      	b.n	800215e <MPU6050_Init+0xfa>

		// Set accelerometer configuration in ACCEL_CONFIG Register
		// XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 8g
		Data = 0x10;
 800210c:	2310      	movs	r3, #16
 800210e:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 8002110:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002114:	9302      	str	r3, [sp, #8]
 8002116:	2301      	movs	r3, #1
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	1dbb      	adds	r3, r7, #6
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2301      	movs	r3, #1
 8002120:	221c      	movs	r2, #28
 8002122:	21d0      	movs	r1, #208	@ 0xd0
 8002124:	4810      	ldr	r0, [pc, #64]	@ (8002168 <MPU6050_Init+0x104>)
 8002126:	f003 ff47 	bl	8005fb8 <HAL_I2C_Mem_Write>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MPU6050_Init+0xd0>
			return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e014      	b.n	800215e <MPU6050_Init+0xfa>

		// Set Gyroscopic configuration in GYRO_CONFIG Register
		// XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 500 �/s
		Data = 0x08;
 8002134:	2308      	movs	r3, #8
 8002136:	71bb      	strb	r3, [r7, #6]
		if(HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1,1000)!= HAL_OK)
 8002138:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	2301      	movs	r3, #1
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	1dbb      	adds	r3, r7, #6
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2301      	movs	r3, #1
 8002148:	221b      	movs	r2, #27
 800214a:	21d0      	movs	r1, #208	@ 0xd0
 800214c:	4806      	ldr	r0, [pc, #24]	@ (8002168 <MPU6050_Init+0x104>)
 800214e:	f003 ff33 	bl	8005fb8 <HAL_I2C_Mem_Write>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <MPU6050_Init+0xf8>
			return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e000      	b.n	800215e <MPU6050_Init+0xfa>
	}
	return HAL_OK;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	20000528 	.word	0x20000528
 800216c:	00000000 	.word	0x00000000

08002170 <MPU6050_Read_Data>:


HAL_StatusTypeDef MPU6050_Read_Data (void)
{
 8002170:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002174:	b088      	sub	sp, #32
 8002176:	af04      	add	r7, sp, #16
	uint8_t Rec_Data_Acc[6];
	uint8_t Rec_Data_Gyro[6];

	// Read 6 BYTES of data starting from ACCEL_XOUT_H register

	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, ACCEL_XOUT_H_REG,1,Rec_Data_Acc,6,20) != HAL_OK)
 8002178:	2314      	movs	r3, #20
 800217a:	9302      	str	r3, [sp, #8]
 800217c:	2306      	movs	r3, #6
 800217e:	9301      	str	r3, [sp, #4]
 8002180:	f107 0308 	add.w	r3, r7, #8
 8002184:	9300      	str	r3, [sp, #0]
 8002186:	2301      	movs	r3, #1
 8002188:	223b      	movs	r2, #59	@ 0x3b
 800218a:	21d0      	movs	r1, #208	@ 0xd0
 800218c:	485e      	ldr	r0, [pc, #376]	@ (8002308 <MPU6050_Read_Data+0x198>)
 800218e:	f004 f80d 	bl	80061ac <HAL_I2C_Mem_Read>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d001      	beq.n	800219c <MPU6050_Read_Data+0x2c>
		return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e1e7      	b.n	800256c <MPU6050_Read_Data+0x3fc>

	Accel_X_RAW = (int16_t)(Rec_Data_Acc[0] << 8 | Rec_Data_Acc [1]);
 800219c:	7a3b      	ldrb	r3, [r7, #8]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	7a7b      	ldrb	r3, [r7, #9]
 80021a4:	b21b      	sxth	r3, r3
 80021a6:	4313      	orrs	r3, r2
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	4b58      	ldr	r3, [pc, #352]	@ (800230c <MPU6050_Read_Data+0x19c>)
 80021ac:	801a      	strh	r2, [r3, #0]
	Accel_Y_RAW = (int16_t)(Rec_Data_Acc[2] << 8 | Rec_Data_Acc [3]);
 80021ae:	7abb      	ldrb	r3, [r7, #10]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	b21a      	sxth	r2, r3
 80021b4:	7afb      	ldrb	r3, [r7, #11]
 80021b6:	b21b      	sxth	r3, r3
 80021b8:	4313      	orrs	r3, r2
 80021ba:	b21a      	sxth	r2, r3
 80021bc:	4b54      	ldr	r3, [pc, #336]	@ (8002310 <MPU6050_Read_Data+0x1a0>)
 80021be:	801a      	strh	r2, [r3, #0]
	Accel_Z_RAW = (int16_t)(Rec_Data_Acc[4] << 8 | Rec_Data_Acc [5]);
 80021c0:	7b3b      	ldrb	r3, [r7, #12]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	4b51      	ldr	r3, [pc, #324]	@ (8002314 <MPU6050_Read_Data+0x1a4>)
 80021d0:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into acceleration in 'g'
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 16384.0
	     for more details check ACCEL_CONFIG Register              ****/

	Ax = Accel_X_RAW/4096.0 - 0.026 + 0.0389;
 80021d2:	4b4e      	ldr	r3, [pc, #312]	@ (800230c <MPU6050_Read_Data+0x19c>)
 80021d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021d8:	4618      	mov	r0, r3
 80021da:	f7fe f947 	bl	800046c <__aeabi_i2d>
 80021de:	f04f 0200 	mov.w	r2, #0
 80021e2:	4b4d      	ldr	r3, [pc, #308]	@ (8002318 <MPU6050_Read_Data+0x1a8>)
 80021e4:	f7fe fad6 	bl	8000794 <__aeabi_ddiv>
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4610      	mov	r0, r2
 80021ee:	4619      	mov	r1, r3
 80021f0:	a339      	add	r3, pc, #228	@ (adr r3, 80022d8 <MPU6050_Read_Data+0x168>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fd ffeb 	bl	80001d0 <__aeabi_dsub>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	a337      	add	r3, pc, #220	@ (adr r3, 80022e0 <MPU6050_Read_Data+0x170>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fd ffe4 	bl	80001d4 <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc6c 	bl	8000af0 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4a40      	ldr	r2, [pc, #256]	@ (800231c <MPU6050_Read_Data+0x1ac>)
 800221c:	6013      	str	r3, [r2, #0]
	Ay = Accel_Y_RAW/4096.0 + 0.028 + 0.0157;
 800221e:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <MPU6050_Read_Data+0x1a0>)
 8002220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002224:	4618      	mov	r0, r3
 8002226:	f7fe f921 	bl	800046c <__aeabi_i2d>
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	4b3a      	ldr	r3, [pc, #232]	@ (8002318 <MPU6050_Read_Data+0x1a8>)
 8002230:	f7fe fab0 	bl	8000794 <__aeabi_ddiv>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	a32a      	add	r3, pc, #168	@ (adr r3, 80022e8 <MPU6050_Read_Data+0x178>)
 800223e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002242:	f7fd ffc7 	bl	80001d4 <__adddf3>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	a328      	add	r3, pc, #160	@ (adr r3, 80022f0 <MPU6050_Read_Data+0x180>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fd ffbe 	bl	80001d4 <__adddf3>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f7fe fc46 	bl	8000af0 <__aeabi_d2f>
 8002264:	4603      	mov	r3, r0
 8002266:	4a2e      	ldr	r2, [pc, #184]	@ (8002320 <MPU6050_Read_Data+0x1b0>)
 8002268:	6013      	str	r3, [r2, #0]
	Az = Accel_Z_RAW/4096.0 + 0.038 - 0.01578;
 800226a:	4b2a      	ldr	r3, [pc, #168]	@ (8002314 <MPU6050_Read_Data+0x1a4>)
 800226c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe f8fb 	bl	800046c <__aeabi_i2d>
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b27      	ldr	r3, [pc, #156]	@ (8002318 <MPU6050_Read_Data+0x1a8>)
 800227c:	f7fe fa8a 	bl	8000794 <__aeabi_ddiv>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	a31b      	add	r3, pc, #108	@ (adr r3, 80022f8 <MPU6050_Read_Data+0x188>)
 800228a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228e:	f7fd ffa1 	bl	80001d4 <__adddf3>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	a319      	add	r3, pc, #100	@ (adr r3, 8002300 <MPU6050_Read_Data+0x190>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fd ff96 	bl	80001d0 <__aeabi_dsub>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4610      	mov	r0, r2
 80022aa:	4619      	mov	r1, r3
 80022ac:	f7fe fc20 	bl	8000af0 <__aeabi_d2f>
 80022b0:	4603      	mov	r3, r0
 80022b2:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <MPU6050_Read_Data+0x1b4>)
 80022b4:	6013      	str	r3, [r2, #0]
	
	if(HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG,1,Rec_Data_Gyro,6,20)!= HAL_OK)
 80022b6:	2314      	movs	r3, #20
 80022b8:	9302      	str	r3, [sp, #8]
 80022ba:	2306      	movs	r3, #6
 80022bc:	9301      	str	r3, [sp, #4]
 80022be:	463b      	mov	r3, r7
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	2301      	movs	r3, #1
 80022c4:	2243      	movs	r2, #67	@ 0x43
 80022c6:	21d0      	movs	r1, #208	@ 0xd0
 80022c8:	480f      	ldr	r0, [pc, #60]	@ (8002308 <MPU6050_Read_Data+0x198>)
 80022ca:	f003 ff6f 	bl	80061ac <HAL_I2C_Mem_Read>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d029      	beq.n	8002328 <MPU6050_Read_Data+0x1b8>
		return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e149      	b.n	800256c <MPU6050_Read_Data+0x3fc>
 80022d8:	76c8b439 	.word	0x76c8b439
 80022dc:	3f9a9fbe 	.word	0x3f9a9fbe
 80022e0:	67a0f909 	.word	0x67a0f909
 80022e4:	3fa3eab3 	.word	0x3fa3eab3
 80022e8:	3126e979 	.word	0x3126e979
 80022ec:	3f9cac08 	.word	0x3f9cac08
 80022f0:	2a305532 	.word	0x2a305532
 80022f4:	3f9013a9 	.word	0x3f9013a9
 80022f8:	6a7ef9db 	.word	0x6a7ef9db
 80022fc:	3fa374bc 	.word	0x3fa374bc
 8002300:	dfb9389b 	.word	0xdfb9389b
 8002304:	3f9028a1 	.word	0x3f9028a1
 8002308:	20000528 	.word	0x20000528
 800230c:	20000420 	.word	0x20000420
 8002310:	20000422 	.word	0x20000422
 8002314:	20000424 	.word	0x20000424
 8002318:	40b00000 	.word	0x40b00000
 800231c:	2000042c 	.word	0x2000042c
 8002320:	20000430 	.word	0x20000430
 8002324:	20000434 	.word	0x20000434
	Gyro_X_RAW = (int16_t)(Rec_Data_Gyro[0] << 8 | Rec_Data_Gyro [1]);
 8002328:	783b      	ldrb	r3, [r7, #0]
 800232a:	021b      	lsls	r3, r3, #8
 800232c:	b21a      	sxth	r2, r3
 800232e:	787b      	ldrb	r3, [r7, #1]
 8002330:	b21b      	sxth	r3, r3
 8002332:	4313      	orrs	r3, r2
 8002334:	b21a      	sxth	r2, r3
 8002336:	4b9e      	ldr	r3, [pc, #632]	@ (80025b0 <MPU6050_Read_Data+0x440>)
 8002338:	801a      	strh	r2, [r3, #0]
	Gyro_Y_RAW = (int16_t)(Rec_Data_Gyro[2] << 8 | Rec_Data_Gyro [3]);
 800233a:	78bb      	ldrb	r3, [r7, #2]
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	b21a      	sxth	r2, r3
 8002340:	78fb      	ldrb	r3, [r7, #3]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21a      	sxth	r2, r3
 8002348:	4b9a      	ldr	r3, [pc, #616]	@ (80025b4 <MPU6050_Read_Data+0x444>)
 800234a:	801a      	strh	r2, [r3, #0]
	Gyro_Z_RAW = (int16_t)(Rec_Data_Gyro[4] << 8 | Rec_Data_Gyro [5]);
 800234c:	793b      	ldrb	r3, [r7, #4]
 800234e:	021b      	lsls	r3, r3, #8
 8002350:	b21a      	sxth	r2, r3
 8002352:	797b      	ldrb	r3, [r7, #5]
 8002354:	b21b      	sxth	r3, r3
 8002356:	4313      	orrs	r3, r2
 8002358:	b21a      	sxth	r2, r3
 800235a:	4b97      	ldr	r3, [pc, #604]	@ (80025b8 <MPU6050_Read_Data+0x448>)
 800235c:	801a      	strh	r2, [r3, #0]
	/*** convert the RAW values into dps (�/s)
	     we have to divide according to the Full scale value set in FS_SEL
	     I have configured FS_SEL = 0. So I am dividing by 131.0
	     for more details check GYRO_CONFIG Register              ****/

	Gx = Gyro_X_RAW/65.5+1.572519064;
 800235e:	4b94      	ldr	r3, [pc, #592]	@ (80025b0 <MPU6050_Read_Data+0x440>)
 8002360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f881 	bl	800046c <__aeabi_i2d>
 800236a:	a383      	add	r3, pc, #524	@ (adr r3, 8002578 <MPU6050_Read_Data+0x408>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe fa10 	bl	8000794 <__aeabi_ddiv>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	a380      	add	r3, pc, #512	@ (adr r3, 8002580 <MPU6050_Read_Data+0x410>)
 800237e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002382:	f7fd ff27 	bl	80001d4 <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fbaf 	bl	8000af0 <__aeabi_d2f>
 8002392:	4603      	mov	r3, r0
 8002394:	4a89      	ldr	r2, [pc, #548]	@ (80025bc <MPU6050_Read_Data+0x44c>)
 8002396:	6013      	str	r3, [r2, #0]
	Gy = Gyro_Y_RAW/65.5+0.0610687025;
 8002398:	4b86      	ldr	r3, [pc, #536]	@ (80025b4 <MPU6050_Read_Data+0x444>)
 800239a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f864 	bl	800046c <__aeabi_i2d>
 80023a4:	a374      	add	r3, pc, #464	@ (adr r3, 8002578 <MPU6050_Read_Data+0x408>)
 80023a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023aa:	f7fe f9f3 	bl	8000794 <__aeabi_ddiv>
 80023ae:	4602      	mov	r2, r0
 80023b0:	460b      	mov	r3, r1
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	a374      	add	r3, pc, #464	@ (adr r3, 8002588 <MPU6050_Read_Data+0x418>)
 80023b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023bc:	f7fd ff0a 	bl	80001d4 <__adddf3>
 80023c0:	4602      	mov	r2, r0
 80023c2:	460b      	mov	r3, r1
 80023c4:	4610      	mov	r0, r2
 80023c6:	4619      	mov	r1, r3
 80023c8:	f7fe fb92 	bl	8000af0 <__aeabi_d2f>
 80023cc:	4603      	mov	r3, r0
 80023ce:	4a7c      	ldr	r2, [pc, #496]	@ (80025c0 <MPU6050_Read_Data+0x450>)
 80023d0:	6013      	str	r3, [r2, #0]
	Gz = Gyro_Z_RAW/65.5-0.595419824;
 80023d2:	4b79      	ldr	r3, [pc, #484]	@ (80025b8 <MPU6050_Read_Data+0x448>)
 80023d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d8:	4618      	mov	r0, r3
 80023da:	f7fe f847 	bl	800046c <__aeabi_i2d>
 80023de:	a366      	add	r3, pc, #408	@ (adr r3, 8002578 <MPU6050_Read_Data+0x408>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	f7fe f9d6 	bl	8000794 <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	a367      	add	r3, pc, #412	@ (adr r3, 8002590 <MPU6050_Read_Data+0x420>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	f7fd feeb 	bl	80001d0 <__aeabi_dsub>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4610      	mov	r0, r2
 8002400:	4619      	mov	r1, r3
 8002402:	f7fe fb75 	bl	8000af0 <__aeabi_d2f>
 8002406:	4603      	mov	r3, r0
 8002408:	4a6e      	ldr	r2, [pc, #440]	@ (80025c4 <MPU6050_Read_Data+0x454>)
 800240a:	6013      	str	r3, [r2, #0]
	
	AngleRoll = atan(Ay/(sqrt(Ax*Ax + Az*Az)))*180/pi-0.419354528;
 800240c:	4b6e      	ldr	r3, [pc, #440]	@ (80025c8 <MPU6050_Read_Data+0x458>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4618      	mov	r0, r3
 8002412:	f7fe f83d 	bl	8000490 <__aeabi_f2d>
 8002416:	4680      	mov	r8, r0
 8002418:	4689      	mov	r9, r1
 800241a:	4b6c      	ldr	r3, [pc, #432]	@ (80025cc <MPU6050_Read_Data+0x45c>)
 800241c:	ed93 7a00 	vldr	s14, [r3]
 8002420:	4b6a      	ldr	r3, [pc, #424]	@ (80025cc <MPU6050_Read_Data+0x45c>)
 8002422:	edd3 7a00 	vldr	s15, [r3]
 8002426:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242a:	4b69      	ldr	r3, [pc, #420]	@ (80025d0 <MPU6050_Read_Data+0x460>)
 800242c:	edd3 6a00 	vldr	s13, [r3]
 8002430:	4b67      	ldr	r3, [pc, #412]	@ (80025d0 <MPU6050_Read_Data+0x460>)
 8002432:	edd3 7a00 	vldr	s15, [r3]
 8002436:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800243a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800243e:	ee17 0a90 	vmov	r0, s15
 8002442:	f7fe f825 	bl	8000490 <__aeabi_f2d>
 8002446:	4602      	mov	r2, r0
 8002448:	460b      	mov	r3, r1
 800244a:	ec43 2b10 	vmov	d0, r2, r3
 800244e:	f007 fc99 	bl	8009d84 <sqrt>
 8002452:	ec53 2b10 	vmov	r2, r3, d0
 8002456:	4640      	mov	r0, r8
 8002458:	4649      	mov	r1, r9
 800245a:	f7fe f99b 	bl	8000794 <__aeabi_ddiv>
 800245e:	4602      	mov	r2, r0
 8002460:	460b      	mov	r3, r1
 8002462:	ec43 2b17 	vmov	d7, r2, r3
 8002466:	eeb0 0a47 	vmov.f32	s0, s14
 800246a:	eef0 0a67 	vmov.f32	s1, s15
 800246e:	f007 fcb7 	bl	8009de0 <atan>
 8002472:	ec51 0b10 	vmov	r0, r1, d0
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b56      	ldr	r3, [pc, #344]	@ (80025d4 <MPU6050_Read_Data+0x464>)
 800247c:	f7fe f860 	bl	8000540 <__aeabi_dmul>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	4610      	mov	r0, r2
 8002486:	4619      	mov	r1, r3
 8002488:	a343      	add	r3, pc, #268	@ (adr r3, 8002598 <MPU6050_Read_Data+0x428>)
 800248a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800248e:	f7fe f981 	bl	8000794 <__aeabi_ddiv>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4610      	mov	r0, r2
 8002498:	4619      	mov	r1, r3
 800249a:	a341      	add	r3, pc, #260	@ (adr r3, 80025a0 <MPU6050_Read_Data+0x430>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	f7fd fe96 	bl	80001d0 <__aeabi_dsub>
 80024a4:	4602      	mov	r2, r0
 80024a6:	460b      	mov	r3, r1
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fb20 	bl	8000af0 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4a49      	ldr	r2, [pc, #292]	@ (80025d8 <MPU6050_Read_Data+0x468>)
 80024b4:	6013      	str	r3, [r2, #0]
	AnglePitch = -atan(Ax/(sqrt(Ay*Ay + Az*Az)))*180/pi+0.431143314;
 80024b6:	4b45      	ldr	r3, [pc, #276]	@ (80025cc <MPU6050_Read_Data+0x45c>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd ffe8 	bl	8000490 <__aeabi_f2d>
 80024c0:	4680      	mov	r8, r0
 80024c2:	4689      	mov	r9, r1
 80024c4:	4b40      	ldr	r3, [pc, #256]	@ (80025c8 <MPU6050_Read_Data+0x458>)
 80024c6:	ed93 7a00 	vldr	s14, [r3]
 80024ca:	4b3f      	ldr	r3, [pc, #252]	@ (80025c8 <MPU6050_Read_Data+0x458>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d4:	4b3e      	ldr	r3, [pc, #248]	@ (80025d0 <MPU6050_Read_Data+0x460>)
 80024d6:	edd3 6a00 	vldr	s13, [r3]
 80024da:	4b3d      	ldr	r3, [pc, #244]	@ (80025d0 <MPU6050_Read_Data+0x460>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e8:	ee17 0a90 	vmov	r0, s15
 80024ec:	f7fd ffd0 	bl	8000490 <__aeabi_f2d>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	ec43 2b10 	vmov	d0, r2, r3
 80024f8:	f007 fc44 	bl	8009d84 <sqrt>
 80024fc:	ec53 2b10 	vmov	r2, r3, d0
 8002500:	4640      	mov	r0, r8
 8002502:	4649      	mov	r1, r9
 8002504:	f7fe f946 	bl	8000794 <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	ec43 2b17 	vmov	d7, r2, r3
 8002510:	eeb0 0a47 	vmov.f32	s0, s14
 8002514:	eef0 0a67 	vmov.f32	s1, s15
 8002518:	f007 fc62 	bl	8009de0 <atan>
 800251c:	ec53 2b10 	vmov	r2, r3, d0
 8002520:	4614      	mov	r4, r2
 8002522:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	4b2a      	ldr	r3, [pc, #168]	@ (80025d4 <MPU6050_Read_Data+0x464>)
 800252c:	4620      	mov	r0, r4
 800252e:	4629      	mov	r1, r5
 8002530:	f7fe f806 	bl	8000540 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4610      	mov	r0, r2
 800253a:	4619      	mov	r1, r3
 800253c:	a316      	add	r3, pc, #88	@ (adr r3, 8002598 <MPU6050_Read_Data+0x428>)
 800253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002542:	f7fe f927 	bl	8000794 <__aeabi_ddiv>
 8002546:	4602      	mov	r2, r0
 8002548:	460b      	mov	r3, r1
 800254a:	4610      	mov	r0, r2
 800254c:	4619      	mov	r1, r3
 800254e:	a316      	add	r3, pc, #88	@ (adr r3, 80025a8 <MPU6050_Read_Data+0x438>)
 8002550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002554:	f7fd fe3e 	bl	80001d4 <__adddf3>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	4610      	mov	r0, r2
 800255e:	4619      	mov	r1, r3
 8002560:	f7fe fac6 	bl	8000af0 <__aeabi_d2f>
 8002564:	4603      	mov	r3, r0
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <MPU6050_Read_Data+0x46c>)
 8002568:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002576:	bf00      	nop
 8002578:	00000000 	.word	0x00000000
 800257c:	40506000 	.word	0x40506000
 8002580:	c00376e9 	.word	0xc00376e9
 8002584:	3ff92909 	.word	0x3ff92909
 8002588:	a017e2f6 	.word	0xa017e2f6
 800258c:	3faf4465 	.word	0x3faf4465
 8002590:	dfef0add 	.word	0xdfef0add
 8002594:	3fe30dad 	.word	0x3fe30dad
 8002598:	f01b866e 	.word	0xf01b866e
 800259c:	400921f9 	.word	0x400921f9
 80025a0:	5fcc2109 	.word	0x5fcc2109
 80025a4:	3fdad6b4 	.word	0x3fdad6b4
 80025a8:	20613843 	.word	0x20613843
 80025ac:	3fdb97da 	.word	0x3fdb97da
 80025b0:	20000426 	.word	0x20000426
 80025b4:	20000428 	.word	0x20000428
 80025b8:	2000042a 	.word	0x2000042a
 80025bc:	20000438 	.word	0x20000438
 80025c0:	2000043c 	.word	0x2000043c
 80025c4:	20000440 	.word	0x20000440
 80025c8:	20000430 	.word	0x20000430
 80025cc:	2000042c 	.word	0x2000042c
 80025d0:	20000434 	.word	0x20000434
 80025d4:	40668000 	.word	0x40668000
 80025d8:	20000414 	.word	0x20000414
 80025dc:	20000418 	.word	0x20000418

080025e0 <pid_equation>:

void Calib_Gyro(void);
void Reset_MPU6050(void);

void pid_equation(float Error, float P , float I, float D, float PrevError, float PrevIterm) {
 80025e0:	b5b0      	push	{r4, r5, r7, lr}
 80025e2:	b08a      	sub	sp, #40	@ 0x28
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	ed87 0a05 	vstr	s0, [r7, #20]
 80025ea:	edc7 0a04 	vstr	s1, [r7, #16]
 80025ee:	ed87 1a03 	vstr	s2, [r7, #12]
 80025f2:	edc7 1a02 	vstr	s3, [r7, #8]
 80025f6:	ed87 2a01 	vstr	s4, [r7, #4]
 80025fa:	edc7 2a00 	vstr	s5, [r7]
  // T = 4ms chu ky lay mau, 250Hz
  // T = 20ms chu ky lay mau, 50Hz
  float Pterm=P*Error;
 80025fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8002602:	edd7 7a05 	vldr	s15, [r7, #20]
 8002606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800260a:	edc7 7a07 	vstr	s15, [r7, #28]
  float Iterm=PrevIterm+I*(Error+PrevError)*0.004/2;
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f7fd ff3e 	bl	8000490 <__aeabi_f2d>
 8002614:	4604      	mov	r4, r0
 8002616:	460d      	mov	r5, r1
 8002618:	ed97 7a05 	vldr	s14, [r7, #20]
 800261c:	edd7 7a01 	vldr	s15, [r7, #4]
 8002620:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002624:	edd7 7a03 	vldr	s15, [r7, #12]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ff2e 	bl	8000490 <__aeabi_f2d>
 8002634:	a340      	add	r3, pc, #256	@ (adr r3, 8002738 <pid_equation+0x158>)
 8002636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263a:	f7fd ff81 	bl	8000540 <__aeabi_dmul>
 800263e:	4602      	mov	r2, r0
 8002640:	460b      	mov	r3, r1
 8002642:	4610      	mov	r0, r2
 8002644:	4619      	mov	r1, r3
 8002646:	f04f 0200 	mov.w	r2, #0
 800264a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800264e:	f7fe f8a1 	bl	8000794 <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4620      	mov	r0, r4
 8002658:	4629      	mov	r1, r5
 800265a:	f7fd fdbb 	bl	80001d4 <__adddf3>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4610      	mov	r0, r2
 8002664:	4619      	mov	r1, r3
 8002666:	f7fe fa43 	bl	8000af0 <__aeabi_d2f>
 800266a:	4603      	mov	r3, r0
 800266c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (Iterm > 400) Iterm=400;
 800266e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002672:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002740 <pid_equation+0x160>
 8002676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267e:	dd02      	ble.n	8002686 <pid_equation+0xa6>
 8002680:	4b30      	ldr	r3, [pc, #192]	@ (8002744 <pid_equation+0x164>)
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
 8002684:	e00a      	b.n	800269c <pid_equation+0xbc>
  else if (Iterm <-400) Iterm=-400;
 8002686:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800268a:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8002748 <pid_equation+0x168>
 800268e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002696:	d501      	bpl.n	800269c <pid_equation+0xbc>
 8002698:	4b2c      	ldr	r3, [pc, #176]	@ (800274c <pid_equation+0x16c>)
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
  float Dterm=D*(Error-PrevError)/0.004;
 800269c:	ed97 7a05 	vldr	s14, [r7, #20]
 80026a0:	edd7 7a01 	vldr	s15, [r7, #4]
 80026a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80026ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b0:	ee17 0a90 	vmov	r0, s15
 80026b4:	f7fd feec 	bl	8000490 <__aeabi_f2d>
 80026b8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002738 <pid_equation+0x158>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	f7fe f869 	bl	8000794 <__aeabi_ddiv>
 80026c2:	4602      	mov	r2, r0
 80026c4:	460b      	mov	r3, r1
 80026c6:	4610      	mov	r0, r2
 80026c8:	4619      	mov	r1, r3
 80026ca:	f7fe fa11 	bl	8000af0 <__aeabi_d2f>
 80026ce:	4603      	mov	r3, r0
 80026d0:	61bb      	str	r3, [r7, #24]
  float PIDOutput= Pterm+Iterm+Dterm;
 80026d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80026d6:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80026da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026de:	ed97 7a06 	vldr	s14, [r7, #24]
 80026e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026e6:	edc7 7a08 	vstr	s15, [r7, #32]
  if (PIDOutput>400) PIDOutput=400;
 80026ea:	edd7 7a08 	vldr	s15, [r7, #32]
 80026ee:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002740 <pid_equation+0x160>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd02      	ble.n	8002702 <pid_equation+0x122>
 80026fc:	4b11      	ldr	r3, [pc, #68]	@ (8002744 <pid_equation+0x164>)
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	e00a      	b.n	8002718 <pid_equation+0x138>
  else if (PIDOutput <-400) PIDOutput=-400;
 8002702:	edd7 7a08 	vldr	s15, [r7, #32]
 8002706:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002748 <pid_equation+0x168>
 800270a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	d501      	bpl.n	8002718 <pid_equation+0x138>
 8002714:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <pid_equation+0x16c>)
 8002716:	623b      	str	r3, [r7, #32]
  PIDReturn[0]=PIDOutput;
 8002718:	4a0d      	ldr	r2, [pc, #52]	@ (8002750 <pid_equation+0x170>)
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	6013      	str	r3, [r2, #0]
  PIDReturn[1]=Error;
 800271e:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <pid_equation+0x170>)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	6053      	str	r3, [r2, #4]
  PIDReturn[2]=Iterm;
 8002724:	4a0a      	ldr	r2, [pc, #40]	@ (8002750 <pid_equation+0x170>)
 8002726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002728:	6093      	str	r3, [r2, #8]
}
 800272a:	bf00      	nop
 800272c:	3728      	adds	r7, #40	@ 0x28
 800272e:	46bd      	mov	sp, r7
 8002730:	bdb0      	pop	{r4, r5, r7, pc}
 8002732:	bf00      	nop
 8002734:	f3af 8000 	nop.w
 8002738:	d2f1a9fc 	.word	0xd2f1a9fc
 800273c:	3f70624d 	.word	0x3f70624d
 8002740:	43c80000 	.word	0x43c80000
 8002744:	43c80000 	.word	0x43c80000
 8002748:	c3c80000 	.word	0xc3c80000
 800274c:	c3c80000 	.word	0xc3c80000
 8002750:	200004e4 	.word	0x200004e4

08002754 <reset_pid>:

void reset_pid(void) {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  PrevErrorRateRoll=0; PrevErrorRatePitch=0; PrevErrorRateYaw=0;
 8002758:	4b16      	ldr	r3, [pc, #88]	@ (80027b4 <reset_pid+0x60>)
 800275a:	f04f 0200 	mov.w	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	4b15      	ldr	r3, [pc, #84]	@ (80027b8 <reset_pid+0x64>)
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <reset_pid+0x68>)
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
  PrevItermRateRoll=0; PrevItermRatePitch=0; PrevItermRateYaw=0;
 8002770:	4b13      	ldr	r3, [pc, #76]	@ (80027c0 <reset_pid+0x6c>)
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b12      	ldr	r3, [pc, #72]	@ (80027c4 <reset_pid+0x70>)
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	4b11      	ldr	r3, [pc, #68]	@ (80027c8 <reset_pid+0x74>)
 8002782:	f04f 0200 	mov.w	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
  PrevErrorAngleRoll=0; PrevErrorAnglePitch=0;    
 8002788:	4b10      	ldr	r3, [pc, #64]	@ (80027cc <reset_pid+0x78>)
 800278a:	f04f 0200 	mov.w	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4b0f      	ldr	r3, [pc, #60]	@ (80027d0 <reset_pid+0x7c>)
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
  PrevItermAngleRoll=0; PrevItermAnglePitch=0;
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <reset_pid+0x80>)
 800279a:	f04f 0200 	mov.w	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	4b0d      	ldr	r3, [pc, #52]	@ (80027d8 <reset_pid+0x84>)
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	200004cc 	.word	0x200004cc
 80027b8:	200004d0 	.word	0x200004d0
 80027bc:	200004d4 	.word	0x200004d4
 80027c0:	200004d8 	.word	0x200004d8
 80027c4:	200004dc 	.word	0x200004dc
 80027c8:	200004e0 	.word	0x200004e0
 80027cc:	20000510 	.word	0x20000510
 80027d0:	20000514 	.word	0x20000514
 80027d4:	20000518 	.word	0x20000518
 80027d8:	2000051c 	.word	0x2000051c

080027dc <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM4)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_TIM_PeriodElapsedCallback+0x16>
	{	
		Send_Data_To_Gui();
 80027ee:	f7ff fa5b 	bl	8001ca8 <Send_Data_To_Gui>
	}
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40000800 	.word	0x40000800

08002800 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{   
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	807b      	strh	r3, [r7, #2]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 800280c:	224b      	movs	r2, #75	@ 0x4b
 800280e:	4975      	ldr	r1, [pc, #468]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002810:	4875      	ldr	r0, [pc, #468]	@ (80029e8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 8002812:	f006 f8c3 	bl	800899c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002816:	4b75      	ldr	r3, [pc, #468]	@ (80029ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b73      	ldr	r3, [pc, #460]	@ (80029ec <HAL_UARTEx_RxEventCallback+0x1ec>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0208 	bic.w	r2, r2, #8
 8002824:	601a      	str	r2, [r3, #0]
	size_RxData = Size;
 8002826:	4a72      	ldr	r2, [pc, #456]	@ (80029f0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	8013      	strh	r3, [r2, #0]
	if ((Rx_buff[0] == 0xAA) && (Rx_buff[1] == 0xFF) && (Rx_buff[2] == size_RxData))
 800282c:	4b6d      	ldr	r3, [pc, #436]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2baa      	cmp	r3, #170	@ 0xaa
 8002832:	f040 809e 	bne.w	8002972 <HAL_UARTEx_RxEventCallback+0x172>
 8002836:	4b6b      	ldr	r3, [pc, #428]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002838:	785b      	ldrb	r3, [r3, #1]
 800283a:	2bff      	cmp	r3, #255	@ 0xff
 800283c:	f040 8099 	bne.w	8002972 <HAL_UARTEx_RxEventCallback+0x172>
 8002840:	4b68      	ldr	r3, [pc, #416]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002842:	789b      	ldrb	r3, [r3, #2]
 8002844:	461a      	mov	r2, r3
 8002846:	4b6a      	ldr	r3, [pc, #424]	@ (80029f0 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8002848:	881b      	ldrh	r3, [r3, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	f040 8091 	bne.w	8002972 <HAL_UARTEx_RxEventCallback+0x172>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002850:	2246      	movs	r2, #70	@ 0x46
 8002852:	2100      	movs	r1, #0
 8002854:	4867      	ldr	r0, [pc, #412]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002856:	f007 f9e5 	bl	8009c24 <memset>
		memcpy(Rx_Data, Rx_buff, sizeof(Rx_buff));
 800285a:	4a67      	ldr	r2, [pc, #412]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800285c:	4b61      	ldr	r3, [pc, #388]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800285e:	4610      	mov	r0, r2
 8002860:	4619      	mov	r1, r3
 8002862:	234b      	movs	r3, #75	@ 0x4b
 8002864:	461a      	mov	r2, r3
 8002866:	f007 fa0f 	bl	8009c88 <memcpy>
		memset(Rx_buff, 0, sizeof(Rx_buff));
 800286a:	224b      	movs	r2, #75	@ 0x4b
 800286c:	2100      	movs	r1, #0
 800286e:	485d      	ldr	r0, [pc, #372]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002870:	f007 f9d8 	bl	8009c24 <memset>

		// gan gia tri pid vao
		memcpy(&PAngleRoll, &Rx_Data[3], sizeof(float));
 8002874:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002876:	f8d3 3003 	ldr.w	r3, [r3, #3]
 800287a:	461a      	mov	r2, r3
 800287c:	4b5f      	ldr	r3, [pc, #380]	@ (80029fc <HAL_UARTEx_RxEventCallback+0x1fc>)
 800287e:	601a      	str	r2, [r3, #0]
		memcpy(&IAngleRoll, &Rx_Data[7], sizeof(float));
 8002880:	4b5d      	ldr	r3, [pc, #372]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002882:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8002886:	461a      	mov	r2, r3
 8002888:	4b5d      	ldr	r3, [pc, #372]	@ (8002a00 <HAL_UARTEx_RxEventCallback+0x200>)
 800288a:	601a      	str	r2, [r3, #0]
		memcpy(&DAngleRoll, &Rx_Data[11], sizeof(float));
 800288c:	4b5a      	ldr	r3, [pc, #360]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800288e:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8002892:	461a      	mov	r2, r3
 8002894:	4b5b      	ldr	r3, [pc, #364]	@ (8002a04 <HAL_UARTEx_RxEventCallback+0x204>)
 8002896:	601a      	str	r2, [r3, #0]

		memcpy(&PAnglePitch, &Rx_Data[15], sizeof(float));
 8002898:	4b57      	ldr	r3, [pc, #348]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800289a:	f8d3 300f 	ldr.w	r3, [r3, #15]
 800289e:	461a      	mov	r2, r3
 80028a0:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_UARTEx_RxEventCallback+0x208>)
 80028a2:	601a      	str	r2, [r3, #0]
		memcpy(&IAnglePitch, &Rx_Data[19], sizeof(float));
 80028a4:	4b54      	ldr	r3, [pc, #336]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028a6:	f8d3 3013 	ldr.w	r3, [r3, #19]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b57      	ldr	r3, [pc, #348]	@ (8002a0c <HAL_UARTEx_RxEventCallback+0x20c>)
 80028ae:	601a      	str	r2, [r3, #0]
		memcpy(&DAnglePitch, &Rx_Data[23], sizeof(float));
 80028b0:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028b2:	f8d3 3017 	ldr.w	r3, [r3, #23]
 80028b6:	461a      	mov	r2, r3
 80028b8:	4b55      	ldr	r3, [pc, #340]	@ (8002a10 <HAL_UARTEx_RxEventCallback+0x210>)
 80028ba:	601a      	str	r2, [r3, #0]

		memcpy(&PRateRoll, &Rx_Data[27], sizeof(float));
 80028bc:	4b4e      	ldr	r3, [pc, #312]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028be:	f8d3 301b 	ldr.w	r3, [r3, #27]
 80028c2:	461a      	mov	r2, r3
 80028c4:	4b53      	ldr	r3, [pc, #332]	@ (8002a14 <HAL_UARTEx_RxEventCallback+0x214>)
 80028c6:	601a      	str	r2, [r3, #0]
		memcpy(&IRateRoll, &Rx_Data[31], sizeof(float));
 80028c8:	4b4b      	ldr	r3, [pc, #300]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028ca:	f8d3 301f 	ldr.w	r3, [r3, #31]
 80028ce:	461a      	mov	r2, r3
 80028d0:	4b51      	ldr	r3, [pc, #324]	@ (8002a18 <HAL_UARTEx_RxEventCallback+0x218>)
 80028d2:	601a      	str	r2, [r3, #0]
		memcpy(&DRateRoll, &Rx_Data[35], sizeof(float));
 80028d4:	4b48      	ldr	r3, [pc, #288]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028d6:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 80028da:	461a      	mov	r2, r3
 80028dc:	4b4f      	ldr	r3, [pc, #316]	@ (8002a1c <HAL_UARTEx_RxEventCallback+0x21c>)
 80028de:	601a      	str	r2, [r3, #0]

		memcpy(&PRatePitch, &Rx_Data[39], sizeof(float));
 80028e0:	4b45      	ldr	r3, [pc, #276]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028e2:	f8d3 3027 	ldr.w	r3, [r3, #39]	@ 0x27
 80028e6:	461a      	mov	r2, r3
 80028e8:	4b4d      	ldr	r3, [pc, #308]	@ (8002a20 <HAL_UARTEx_RxEventCallback+0x220>)
 80028ea:	601a      	str	r2, [r3, #0]
		memcpy(&IRatePitch, &Rx_Data[43], sizeof(float));
 80028ec:	4b42      	ldr	r3, [pc, #264]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028ee:	f8d3 302b 	ldr.w	r3, [r3, #43]	@ 0x2b
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a24 <HAL_UARTEx_RxEventCallback+0x224>)
 80028f6:	601a      	str	r2, [r3, #0]
		memcpy(&DRatePitch, &Rx_Data[47], sizeof(float));
 80028f8:	4b3f      	ldr	r3, [pc, #252]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 80028fa:	f8d3 302f 	ldr.w	r3, [r3, #47]	@ 0x2f
 80028fe:	461a      	mov	r2, r3
 8002900:	4b49      	ldr	r3, [pc, #292]	@ (8002a28 <HAL_UARTEx_RxEventCallback+0x228>)
 8002902:	601a      	str	r2, [r3, #0]

		memcpy(&PRateYaw, &Rx_Data[51], sizeof(float));
 8002904:	4b3c      	ldr	r3, [pc, #240]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002906:	f8d3 3033 	ldr.w	r3, [r3, #51]	@ 0x33
 800290a:	461a      	mov	r2, r3
 800290c:	4b47      	ldr	r3, [pc, #284]	@ (8002a2c <HAL_UARTEx_RxEventCallback+0x22c>)
 800290e:	601a      	str	r2, [r3, #0]
		memcpy(&IRateYaw, &Rx_Data[55], sizeof(float));
 8002910:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002912:	f8d3 3037 	ldr.w	r3, [r3, #55]	@ 0x37
 8002916:	461a      	mov	r2, r3
 8002918:	4b45      	ldr	r3, [pc, #276]	@ (8002a30 <HAL_UARTEx_RxEventCallback+0x230>)
 800291a:	601a      	str	r2, [r3, #0]
		memcpy(&DRateYaw, &Rx_Data[59], sizeof(float));
 800291c:	4b36      	ldr	r3, [pc, #216]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800291e:	f8d3 303b 	ldr.w	r3, [r3, #59]	@ 0x3b
 8002922:	461a      	mov	r2, r3
 8002924:	4b43      	ldr	r3, [pc, #268]	@ (8002a34 <HAL_UARTEx_RxEventCallback+0x234>)
 8002926:	601a      	str	r2, [r3, #0]

		memcpy(&pid_p_gain_altitude, &Rx_Data[63], sizeof(float));
 8002928:	4b33      	ldr	r3, [pc, #204]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 800292a:	f8d3 303f 	ldr.w	r3, [r3, #63]	@ 0x3f
 800292e:	461a      	mov	r2, r3
 8002930:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_UARTEx_RxEventCallback+0x238>)
 8002932:	601a      	str	r2, [r3, #0]
		memcpy(&pid_i_gain_altitude, &Rx_Data[67], sizeof(float));
 8002934:	4b30      	ldr	r3, [pc, #192]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002936:	f8d3 3043 	ldr.w	r3, [r3, #67]	@ 0x43
 800293a:	461a      	mov	r2, r3
 800293c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a3c <HAL_UARTEx_RxEventCallback+0x23c>)
 800293e:	601a      	str	r2, [r3, #0]
		memcpy(&pid_d_gain_altitude, &Rx_Data[71], sizeof(float));
 8002940:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_UARTEx_RxEventCallback+0x1f8>)
 8002942:	f8d3 3047 	ldr.w	r3, [r3, #71]	@ 0x47
 8002946:	461a      	mov	r2, r3
 8002948:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <HAL_UARTEx_RxEventCallback+0x240>)
 800294a:	601a      	str	r2, [r3, #0]

		Tx_buff[0] = 'B'; Tx_buff[1] = 'E';Tx_buff[46] = '\r'; Tx_buff[47] = '\n';
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800294e:	2242      	movs	r2, #66	@ 0x42
 8002950:	701a      	strb	r2, [r3, #0]
 8002952:	4b28      	ldr	r3, [pc, #160]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002954:	2245      	movs	r2, #69	@ 0x45
 8002956:	705a      	strb	r2, [r3, #1]
 8002958:	4b26      	ldr	r3, [pc, #152]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800295a:	220d      	movs	r2, #13
 800295c:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8002960:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002962:	220a      	movs	r2, #10
 8002964:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,48);
 8002968:	2230      	movs	r2, #48	@ 0x30
 800296a:	4922      	ldr	r1, [pc, #136]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 800296c:	481e      	ldr	r0, [pc, #120]	@ (80029e8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 800296e:	f005 ff67 	bl	8008840 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	if ((Rx_buff[0] == 0xCC) && (Rx_buff[1] == 0xDD))
 8002972:	4b1c      	ldr	r3, [pc, #112]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2bcc      	cmp	r3, #204	@ 0xcc
 8002978:	d12f      	bne.n	80029da <HAL_UARTEx_RxEventCallback+0x1da>
 800297a:	4b1a      	ldr	r3, [pc, #104]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800297c:	785b      	ldrb	r3, [r3, #1]
 800297e:	2bdd      	cmp	r3, #221	@ 0xdd
 8002980:	d12b      	bne.n	80029da <HAL_UARTEx_RxEventCallback+0x1da>
	{
		memset(Tx_buff, 0, sizeof(Tx_buff));
 8002982:	2246      	movs	r2, #70	@ 0x46
 8002984:	2100      	movs	r1, #0
 8002986:	481b      	ldr	r0, [pc, #108]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8002988:	f007 f94c 	bl	8009c24 <memset>
		Flag_Plot = Rx_buff[2];
 800298c:	4b15      	ldr	r3, [pc, #84]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800298e:	789a      	ldrb	r2, [r3, #2]
 8002990:	4b2c      	ldr	r3, [pc, #176]	@ (8002a44 <HAL_UARTEx_RxEventCallback+0x244>)
 8002992:	701a      	strb	r2, [r3, #0]
		memset(Rx_buff, 0, sizeof(Rx_buff));		
 8002994:	224b      	movs	r2, #75	@ 0x4b
 8002996:	2100      	movs	r1, #0
 8002998:	4812      	ldr	r0, [pc, #72]	@ (80029e4 <HAL_UARTEx_RxEventCallback+0x1e4>)
 800299a:	f007 f943 	bl	8009c24 <memset>
		if (Flag_Plot){ Tx_buff[0] = 'P'; Tx_buff[1] = 'L';}
 800299e:	4b29      	ldr	r3, [pc, #164]	@ (8002a44 <HAL_UARTEx_RxEventCallback+0x244>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d006      	beq.n	80029b4 <HAL_UARTEx_RxEventCallback+0x1b4>
 80029a6:	4b13      	ldr	r3, [pc, #76]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029a8:	2250      	movs	r2, #80	@ 0x50
 80029aa:	701a      	strb	r2, [r3, #0]
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029ae:	224c      	movs	r2, #76	@ 0x4c
 80029b0:	705a      	strb	r2, [r3, #1]
 80029b2:	e005      	b.n	80029c0 <HAL_UARTEx_RxEventCallback+0x1c0>
		else{Tx_buff[0] = 'S'; Tx_buff[1] = 'T'; }		  
 80029b4:	4b0f      	ldr	r3, [pc, #60]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029b6:	2253      	movs	r2, #83	@ 0x53
 80029b8:	701a      	strb	r2, [r3, #0]
 80029ba:	4b0e      	ldr	r3, [pc, #56]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029bc:	2254      	movs	r2, #84	@ 0x54
 80029be:	705a      	strb	r2, [r3, #1]
		Tx_buff[46] = '\r'; Tx_buff[47] = '\n';
 80029c0:	4b0c      	ldr	r3, [pc, #48]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029c2:	220d      	movs	r2, #13
 80029c4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029ca:	220a      	movs	r2, #10
 80029cc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)Tx_buff,48);
 80029d0:	2230      	movs	r2, #48	@ 0x30
 80029d2:	4908      	ldr	r1, [pc, #32]	@ (80029f4 <HAL_UARTEx_RxEventCallback+0x1f4>)
 80029d4:	4804      	ldr	r0, [pc, #16]	@ (80029e8 <HAL_UARTEx_RxEventCallback+0x1e8>)
 80029d6:	f005 ff33 	bl	8008840 <HAL_UART_Transmit_DMA>
		//memset(Tx_buff, 0, sizeof(Tx_buff));	
	}
	
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	20000358 	.word	0x20000358
 80029e8:	20000808 	.word	0x20000808
 80029ec:	20000890 	.word	0x20000890
 80029f0:	200003ea 	.word	0x200003ea
 80029f4:	200003a4 	.word	0x200003a4
 80029f8:	2000030c 	.word	0x2000030c
 80029fc:	20000034 	.word	0x20000034
 8002a00:	2000003c 	.word	0x2000003c
 8002a04:	20000044 	.word	0x20000044
 8002a08:	20000038 	.word	0x20000038
 8002a0c:	20000040 	.word	0x20000040
 8002a10:	20000048 	.word	0x20000048
 8002a14:	20000010 	.word	0x20000010
 8002a18:	2000001c 	.word	0x2000001c
 8002a1c:	20000028 	.word	0x20000028
 8002a20:	20000014 	.word	0x20000014
 8002a24:	20000020 	.word	0x20000020
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	20000018 	.word	0x20000018
 8002a30:	20000024 	.word	0x20000024
 8002a34:	20000030 	.word	0x20000030
 8002a38:	2000004c 	.word	0x2000004c
 8002a3c:	20000050 	.word	0x20000050
 8002a40:	20000054 	.word	0x20000054
 8002a44:	20000308 	.word	0x20000308

08002a48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8002a48:	b4f0      	push	{r4, r5, r6, r7}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	//HAL_UART_Receive_DMA(&huart2, rx_data, sizeof(rx_data));
	if(rx_data_gps[0] == 0xb5 && rx_data_gps[1] == 0x62)
 8002a50:	4b13      	ldr	r3, [pc, #76]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x58>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2bb5      	cmp	r3, #181	@ 0xb5
 8002a56:	d118      	bne.n	8002a8a <HAL_UART_RxCpltCallback+0x42>
 8002a58:	4b11      	ldr	r3, [pc, #68]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x58>)
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b62      	cmp	r3, #98	@ 0x62
 8002a5e:	d114      	bne.n	8002a8a <HAL_UART_RxCpltCallback+0x42>
	{
		memcpy(m8n_rx_buf, rx_data_gps, sizeof(rx_data_gps));
 8002a60:	4b10      	ldr	r3, [pc, #64]	@ (8002aa4 <HAL_UART_RxCpltCallback+0x5c>)
 8002a62:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa0 <HAL_UART_RxCpltCallback+0x58>)
 8002a64:	4614      	mov	r4, r2
 8002a66:	461e      	mov	r6, r3
 8002a68:	f104 0c20 	add.w	ip, r4, #32
 8002a6c:	4635      	mov	r5, r6
 8002a6e:	4623      	mov	r3, r4
 8002a70:	6818      	ldr	r0, [r3, #0]
 8002a72:	6859      	ldr	r1, [r3, #4]
 8002a74:	689a      	ldr	r2, [r3, #8]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a7a:	3410      	adds	r4, #16
 8002a7c:	3610      	adds	r6, #16
 8002a7e:	4564      	cmp	r4, ip
 8002a80:	d1f4      	bne.n	8002a6c <HAL_UART_RxCpltCallback+0x24>
 8002a82:	4633      	mov	r3, r6
 8002a84:	4622      	mov	r2, r4
 8002a86:	6810      	ldr	r0, [r2, #0]
 8002a88:	6018      	str	r0, [r3, #0]
     //m8n_rx_cplt_flag = 1;
     //HAL_UART_Transmit_DMA(&huart2, (uint8_t*)rx_data_gps,sizeof(rx_data_gps));
	}
	cnt ++;
 8002a8a:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <HAL_UART_RxCpltCallback+0x60>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3301      	adds	r3, #1
 8002a90:	4a05      	ldr	r2, [pc, #20]	@ (8002aa8 <HAL_UART_RxCpltCallback+0x60>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	3708      	adds	r7, #8
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bcf0      	pop	{r4, r5, r6, r7}
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000a10 	.word	0x20000a10
 8002aa4:	2000046c 	.word	0x2000046c
 8002aa8:	20000490 	.word	0x20000490
 8002aac:	00000000 	.word	0x00000000

08002ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8002ab6:	f002 f839 	bl	8004b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002aba:	f000 fda7 	bl	800360c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002abe:	f001 f8a1 	bl	8003c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8002ac2:	f001 f857 	bl	8003b74 <MX_DMA_Init>
  MX_I2C1_Init();
 8002ac6:	f000 fe0b 	bl	80036e0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8002aca:	f000 fe9b 	bl	8003804 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002ace:	f000 fee9 	bl	80038a4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8002ad2:	f000 ff33 	bl	800393c <MX_TIM3_Init>
  MX_TIM4_Init();
 8002ad6:	f000 ffab 	bl	8003a30 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002ada:	f000 fff7 	bl	8003acc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8002ade:	f000 fe2d 	bl	800373c <MX_I2C2_Init>
  MX_USART3_UART_Init();
 8002ae2:	f001 f81d 	bl	8003b20 <MX_USART3_UART_Init>
  MX_SPI3_Init();
 8002ae6:	f000 fe57 	bl	8003798 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  setupSensor();
 8002aea:	f7fe fb01 	bl	80010f0 <setupSensor>
  HAL_Delay(10);
 8002aee:	200a      	movs	r0, #10
 8002af0:	f002 f88e 	bl	8004c10 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	e00e      	b.n	8002b18 <main+0x68>
  {
	  pid_output_altitude1 = getPressure();
 8002afa:	f7fe fb39 	bl	8001170 <getPressure>
 8002afe:	ee07 0a90 	vmov	s15, r0
 8002b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b06:	4b8b      	ldr	r3, [pc, #556]	@ (8002d34 <main+0x284>)
 8002b08:	edc3 7a00 	vstr	s15, [r3]
	  HAL_Delay(5);
 8002b0c:	2005      	movs	r0, #5
 8002b0e:	f002 f87f 	bl	8004c10 <HAL_Delay>
  for(int i = 0;i<100; i++)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	3301      	adds	r3, #1
 8002b16:	60fb      	str	r3, [r7, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2b63      	cmp	r3, #99	@ 0x63
 8002b1c:	dded      	ble.n	8002afa <main+0x4a>
  }
  actual_pressure = 0;
 8002b1e:	4b86      	ldr	r3, [pc, #536]	@ (8002d38 <main+0x288>)
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim4);
 8002b26:	4885      	ldr	r0, [pc, #532]	@ (8002d3c <main+0x28c>)
 8002b28:	f004 fe5a 	bl	80077e0 <HAL_TIM_Base_Start_IT>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart2, Rx_buff, sizeof(Rx_buff));
 8002b2c:	224b      	movs	r2, #75	@ 0x4b
 8002b2e:	4984      	ldr	r1, [pc, #528]	@ (8002d40 <main+0x290>)
 8002b30:	4884      	ldr	r0, [pc, #528]	@ (8002d44 <main+0x294>)
 8002b32:	f005 ff33 	bl	800899c <HAL_UARTEx_ReceiveToIdle_DMA>
  __HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8002b36:	4b84      	ldr	r3, [pc, #528]	@ (8002d48 <main+0x298>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <main+0x298>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0208 	bic.w	r2, r2, #8
 8002b44:	601a      	str	r2, [r3, #0]
  HAL_TIM_Base_Start(&htim2);
 8002b46:	4881      	ldr	r0, [pc, #516]	@ (8002d4c <main+0x29c>)
 8002b48:	f004 fde2 	bl	8007710 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim1);
 8002b4c:	4880      	ldr	r0, [pc, #512]	@ (8002d50 <main+0x2a0>)
 8002b4e:	f004 fddf 	bl	8007710 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8002b52:	2100      	movs	r1, #0
 8002b54:	487f      	ldr	r0, [pc, #508]	@ (8002d54 <main+0x2a4>)
 8002b56:	f004 ff03 	bl	8007960 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002b5a:	2104      	movs	r1, #4
 8002b5c:	487d      	ldr	r0, [pc, #500]	@ (8002d54 <main+0x2a4>)
 8002b5e:	f004 feff 	bl	8007960 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8002b62:	2108      	movs	r1, #8
 8002b64:	487b      	ldr	r0, [pc, #492]	@ (8002d54 <main+0x2a4>)
 8002b66:	f004 fefb 	bl	8007960 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8002b6a:	210c      	movs	r1, #12
 8002b6c:	4879      	ldr	r0, [pc, #484]	@ (8002d54 <main+0x2a4>)
 8002b6e:	f004 fef7 	bl	8007960 <HAL_TIM_PWM_Start>
  HAL_Delay(20);
 8002b72:	2014      	movs	r0, #20
 8002b74:	f002 f84c 	bl	8004c10 <HAL_Delay>
  MX_I2C1_Init();
 8002b78:	f000 fdb2 	bl	80036e0 <MX_I2C1_Init>
  HAL_Delay(20);
 8002b7c:	2014      	movs	r0, #20
 8002b7e:	f002 f847 	bl	8004c10 <HAL_Delay>
  MPU6050_Init();
 8002b82:	f7ff fa6f 	bl	8002064 <MPU6050_Init>
  HAL_Delay(1000);
 8002b86:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002b8a:	f002 f841 	bl	8004c10 <HAL_Delay>
  Calib_Gyro();
 8002b8e:	f001 f8cf 	bl	8003d30 <Calib_Gyro>
  HAL_Delay(50);
 8002b92:	2032      	movs	r0, #50	@ 0x32
 8002b94:	f002 f83c 	bl	8004c10 <HAL_Delay>
  M8N_Initialization();
 8002b98:	f7fe fa78 	bl	800108c <M8N_Initialization>
  HAL_Delay(2000);
 8002b9c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002ba0:	f002 f836 	bl	8004c10 <HAL_Delay>
  HAL_UART_Receive_DMA(&huart3, rx_data_gps, sizeof(rx_data_gps));
 8002ba4:	2224      	movs	r2, #36	@ 0x24
 8002ba6:	496c      	ldr	r1, [pc, #432]	@ (8002d58 <main+0x2a8>)
 8002ba8:	486c      	ldr	r0, [pc, #432]	@ (8002d5c <main+0x2ac>)
 8002baa:	f005 fec7 	bl	800893c <HAL_UART_Receive_DMA>
  HAL_Delay(1000);
 8002bae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bb2:	f002 f82d 	bl	8004c10 <HAL_Delay>
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,1000);
 8002bb6:	4b67      	ldr	r3, [pc, #412]	@ (8002d54 <main+0x2a4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bbe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,1000);
 8002bc0:	4b64      	ldr	r3, [pc, #400]	@ (8002d54 <main+0x2a4>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,1000);
 8002bca:	4b62      	ldr	r3, [pc, #392]	@ (8002d54 <main+0x2a4>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bd2:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,1000);
 8002bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8002d54 <main+0x2a4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bdc:	641a      	str	r2, [r3, #64]	@ 0x40
  ch[0]=1500;      //Roll
 8002bde:	4b60      	ldr	r3, [pc, #384]	@ (8002d60 <main+0x2b0>)
 8002be0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002be4:	601a      	str	r2, [r3, #0]
  ch[1]=1500;      //Pitch
 8002be6:	4b5e      	ldr	r3, [pc, #376]	@ (8002d60 <main+0x2b0>)
 8002be8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002bec:	605a      	str	r2, [r3, #4]
  ch[2]=1000;      //Throttle
 8002bee:	4b5c      	ldr	r3, [pc, #368]	@ (8002d60 <main+0x2b0>)
 8002bf0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bf4:	609a      	str	r2, [r3, #8]
  ch[3]=1500;      //Yaw
 8002bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8002d60 <main+0x2b0>)
 8002bf8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8002bfc:	60da      	str	r2, [r3, #12]
  while(Receive_Throttle_Min() == 0);
 8002bfe:	bf00      	nop
 8002c00:	f001 f884 	bl	8003d0c <Receive_Throttle_Min>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0fa      	beq.n	8002c00 <main+0x150>
  HAL_Delay(20);
 8002c0a:	2014      	movs	r0, #20
 8002c0c:	f002 f800 	bl	8004c10 <HAL_Delay>
  loop_timer = TIM1->CNT;
 8002c10:	4b54      	ldr	r3, [pc, #336]	@ (8002d64 <main+0x2b4>)
 8002c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b54      	ldr	r3, [pc, #336]	@ (8002d68 <main+0x2b8>)
 8002c18:	601a      	str	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  check_time1 = TIM1->CNT;
 8002c1a:	4b52      	ldr	r3, [pc, #328]	@ (8002d64 <main+0x2b4>)
 8002c1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	4b51      	ldr	r3, [pc, #324]	@ (8002d6c <main+0x2bc>)
 8002c28:	edc3 7a00 	vstr	s15, [r3]
	  if(MPU6050_Read_Data() != HAL_OK)
 8002c2c:	f7ff faa0 	bl	8002170 <MPU6050_Read_Data>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <main+0x18a>
	  {
	  	Reset_MPU6050();
 8002c36:	f001 f8f5 	bl	8003e24 <Reset_MPU6050>
	  }

	  if(cnt_pressure<3000) cnt_pressure++;
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8002d70 <main+0x2c0>)
 8002c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c40:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8002c44:	4293      	cmp	r3, r2
 8002c46:	dc09      	bgt.n	8002c5c <main+0x1ac>
 8002c48:	4b49      	ldr	r3, [pc, #292]	@ (8002d70 <main+0x2c0>)
 8002c4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	3301      	adds	r3, #1
 8002c52:	b29b      	uxth	r3, r3
 8002c54:	b21a      	sxth	r2, r3
 8002c56:	4b46      	ldr	r3, [pc, #280]	@ (8002d70 <main+0x2c0>)
 8002c58:	801a      	strh	r2, [r3, #0]
 8002c5a:	e003      	b.n	8002c64 <main+0x1b4>
	  else cnt_pressure = 3000;
 8002c5c:	4b44      	ldr	r3, [pc, #272]	@ (8002d70 <main+0x2c0>)
 8002c5e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002c62:	801a      	strh	r2, [r3, #0]
	  //Altitude = 44330.0f*(1-powf((pressure/101325.0f),(1.0f/5.257f)));
	  check_time2 = TIM1->CNT;
 8002c64:	4b3f      	ldr	r3, [pc, #252]	@ (8002d64 <main+0x2b4>)
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	ee07 3a90 	vmov	s15, r3
 8002c6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c70:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <main+0x2c4>)
 8002c72:	edc3 7a00 	vstr	s15, [r3]
	  receiver_input_channel_1 = ch[0];
 8002c76:	4b3a      	ldr	r3, [pc, #232]	@ (8002d60 <main+0x2b0>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8002d78 <main+0x2c8>)
 8002c7c:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_2 = ch[1];
 8002c7e:	4b38      	ldr	r3, [pc, #224]	@ (8002d60 <main+0x2b0>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a3e      	ldr	r2, [pc, #248]	@ (8002d7c <main+0x2cc>)
 8002c84:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_3 = ch[2]; // chan ga(Throttle)
 8002c86:	4b36      	ldr	r3, [pc, #216]	@ (8002d60 <main+0x2b0>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8002d80 <main+0x2d0>)
 8002c8c:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_4 = ch[3];
 8002c8e:	4b34      	ldr	r3, [pc, #208]	@ (8002d60 <main+0x2b0>)
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	4a3c      	ldr	r2, [pc, #240]	@ (8002d84 <main+0x2d4>)
 8002c94:	6013      	str	r3, [r2, #0]
	  receiver_input_channel_5 = ch[4];
 8002c96:	4b32      	ldr	r3, [pc, #200]	@ (8002d60 <main+0x2b0>)
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4a3b      	ldr	r2, [pc, #236]	@ (8002d88 <main+0x2d8>)
 8002c9c:	6013      	str	r3, [r2, #0]

	  if (receiver_input_channel_5 < 1500 )
 8002c9e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d88 <main+0x2d8>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f240 52db 	movw	r2, #1499	@ 0x5db
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	dc07      	bgt.n	8002cba <main+0x20a>
		  {
		  	  flight_mode = 1;
 8002caa:	4b38      	ldr	r3, [pc, #224]	@ (8002d8c <main+0x2dc>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]
		  	Altitude_gui = 0;
 8002cb0:	4b37      	ldr	r3, [pc, #220]	@ (8002d90 <main+0x2e0>)
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e006      	b.n	8002cc8 <main+0x218>

		  }    // Mode bay binh thuong
	  else
		  {
		  	  flight_mode = 2;  //Mode altitude hold
 8002cba:	4b34      	ldr	r3, [pc, #208]	@ (8002d8c <main+0x2dc>)
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	601a      	str	r2, [r3, #0]
		  	Altitude_gui = Altitude;
 8002cc0:	4b34      	ldr	r3, [pc, #208]	@ (8002d94 <main+0x2e4>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a32      	ldr	r2, [pc, #200]	@ (8002d90 <main+0x2e0>)
 8002cc6:	6013      	str	r3, [r2, #0]
		  }
	  pid_output_altitude1 = getPressure();
 8002cc8:	f7fe fa52 	bl	8001170 <getPressure>
 8002ccc:	ee07 0a90 	vmov	s15, r0
 8002cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002cd4:	4b17      	ldr	r3, [pc, #92]	@ (8002d34 <main+0x284>)
 8002cd6:	edc3 7a00 	vstr	s15, [r3]

	  if(cnt_pressure==2000)
 8002cda:	4b25      	ldr	r3, [pc, #148]	@ (8002d70 <main+0x2c0>)
 8002cdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ce0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8002ce4:	d119      	bne.n	8002d1a <main+0x26a>
	  {
		  Altitude_init = 44330.0f*(1-powf((actual_pressure/101325.0f),(1.0f/5.257f)));
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <main+0x288>)
 8002ce8:	edd3 7a00 	vldr	s15, [r3]
 8002cec:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8002d98 <main+0x2e8>
 8002cf0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002cf4:	eddf 0a29 	vldr	s1, [pc, #164]	@ 8002d9c <main+0x2ec>
 8002cf8:	eeb0 0a47 	vmov.f32	s0, s14
 8002cfc:	f007 fa10 	bl	800a120 <powf>
 8002d00:	eef0 7a40 	vmov.f32	s15, s0
 8002d04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d0c:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8002da0 <main+0x2f0>
 8002d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d14:	4b23      	ldr	r3, [pc, #140]	@ (8002da4 <main+0x2f4>)
 8002d16:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if(pid_altitude_setpoint == 0) Altitude_setpoint = 0;
 8002d1a:	4b23      	ldr	r3, [pc, #140]	@ (8002da8 <main+0x2f8>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d142      	bne.n	8002db0 <main+0x300>
 8002d2a:	4b20      	ldr	r3, [pc, #128]	@ (8002dac <main+0x2fc>)
 8002d2c:	f04f 0200 	mov.w	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	e05c      	b.n	8002dee <main+0x33e>
 8002d34:	2000041c 	.word	0x2000041c
 8002d38:	2000010c 	.word	0x2000010c
 8002d3c:	200007c0 	.word	0x200007c0
 8002d40:	20000358 	.word	0x20000358
 8002d44:	20000808 	.word	0x20000808
 8002d48:	20000890 	.word	0x20000890
 8002d4c:	20000730 	.word	0x20000730
 8002d50:	200006e8 	.word	0x200006e8
 8002d54:	20000778 	.word	0x20000778
 8002d58:	20000a10 	.word	0x20000a10
 8002d5c:	2000084c 	.word	0x2000084c
 8002d60:	200003ec 	.word	0x200003ec
 8002d64:	40010000 	.word	0x40010000
 8002d68:	20000450 	.word	0x20000450
 8002d6c:	200002ec 	.word	0x200002ec
 8002d70:	20000520 	.word	0x20000520
 8002d74:	200002f0 	.word	0x200002f0
 8002d78:	20000454 	.word	0x20000454
 8002d7c:	20000458 	.word	0x20000458
 8002d80:	2000045c 	.word	0x2000045c
 8002d84:	20000460 	.word	0x20000460
 8002d88:	20000464 	.word	0x20000464
 8002d8c:	20000468 	.word	0x20000468
 8002d90:	20000304 	.word	0x20000304
 8002d94:	200002f8 	.word	0x200002f8
 8002d98:	47c5e680 	.word	0x47c5e680
 8002d9c:	3e42c9b4 	.word	0x3e42c9b4
 8002da0:	472d2a00 	.word	0x472d2a00
 8002da4:	200002fc 	.word	0x200002fc
 8002da8:	2000023c 	.word	0x2000023c
 8002dac:	20000300 	.word	0x20000300
	  else Altitude_setpoint = 44330.0f*(1-powf((pid_altitude_setpoint/101325.0f),(1.0f/5.257f))) - Altitude_init;
 8002db0:	4bc1      	ldr	r3, [pc, #772]	@ (80030b8 <main+0x608>)
 8002db2:	edd3 7a00 	vldr	s15, [r3]
 8002db6:	eddf 6ac1 	vldr	s13, [pc, #772]	@ 80030bc <main+0x60c>
 8002dba:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dbe:	eddf 0ac0 	vldr	s1, [pc, #768]	@ 80030c0 <main+0x610>
 8002dc2:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc6:	f007 f9ab 	bl	800a120 <powf>
 8002dca:	eef0 7a40 	vmov.f32	s15, s0
 8002dce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dd6:	ed9f 7abb 	vldr	s14, [pc, #748]	@ 80030c4 <main+0x614>
 8002dda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dde:	4bba      	ldr	r3, [pc, #744]	@ (80030c8 <main+0x618>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de8:	4bb8      	ldr	r3, [pc, #736]	@ (80030cc <main+0x61c>)
 8002dea:	edc3 7a00 	vstr	s15, [r3]
	  Altitude = 44330.0f*(1-powf((actual_pressure/101325.0f),(1.0f/5.257f))) - Altitude_init;
 8002dee:	4bb8      	ldr	r3, [pc, #736]	@ (80030d0 <main+0x620>)
 8002df0:	edd3 7a00 	vldr	s15, [r3]
 8002df4:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 80030bc <main+0x60c>
 8002df8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002dfc:	eddf 0ab0 	vldr	s1, [pc, #704]	@ 80030c0 <main+0x610>
 8002e00:	eeb0 0a47 	vmov.f32	s0, s14
 8002e04:	f007 f98c 	bl	800a120 <powf>
 8002e08:	eef0 7a40 	vmov.f32	s15, s0
 8002e0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e14:	ed9f 7aab 	vldr	s14, [pc, #684]	@ 80030c4 <main+0x614>
 8002e18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e1c:	4baa      	ldr	r3, [pc, #680]	@ (80030c8 <main+0x618>)
 8002e1e:	edd3 7a00 	vldr	s15, [r3]
 8002e22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e26:	4bab      	ldr	r3, [pc, #684]	@ (80030d4 <main+0x624>)
 8002e28:	edc3 7a00 	vstr	s15, [r3]

	  pressure_ss = actual_pressure;
 8002e2c:	4ba8      	ldr	r3, [pc, #672]	@ (80030d0 <main+0x620>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4aa9      	ldr	r2, [pc, #676]	@ (80030d8 <main+0x628>)
 8002e32:	6013      	str	r3, [r2, #0]
	  Gx -= Gyro_X_Calib;
 8002e34:	4ba9      	ldr	r3, [pc, #676]	@ (80030dc <main+0x62c>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4ba9      	ldr	r3, [pc, #676]	@ (80030e0 <main+0x630>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4a:	4ba4      	ldr	r3, [pc, #656]	@ (80030dc <main+0x62c>)
 8002e4c:	edc3 7a00 	vstr	s15, [r3]
	  Gy -= Gyro_Y_Calib;
 8002e50:	4ba4      	ldr	r3, [pc, #656]	@ (80030e4 <main+0x634>)
 8002e52:	ed93 7a00 	vldr	s14, [r3]
 8002e56:	4ba4      	ldr	r3, [pc, #656]	@ (80030e8 <main+0x638>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e66:	4b9f      	ldr	r3, [pc, #636]	@ (80030e4 <main+0x634>)
 8002e68:	edc3 7a00 	vstr	s15, [r3]
	  Gz -= Gyro_Z_Calib;
 8002e6c:	4b9f      	ldr	r3, [pc, #636]	@ (80030ec <main+0x63c>)
 8002e6e:	ed93 7a00 	vldr	s14, [r3]
 8002e72:	4b9f      	ldr	r3, [pc, #636]	@ (80030f0 <main+0x640>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e82:	4b9a      	ldr	r3, [pc, #616]	@ (80030ec <main+0x63c>)
 8002e84:	edc3 7a00 	vstr	s15, [r3]

	  kalman_1d(KalmanAngleRoll, KalmanUncertaintyAngleRoll, Gx, AngleRoll);
 8002e88:	4b9a      	ldr	r3, [pc, #616]	@ (80030f4 <main+0x644>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	4b9a      	ldr	r3, [pc, #616]	@ (80030f8 <main+0x648>)
 8002e90:	ed93 7a00 	vldr	s14, [r3]
 8002e94:	4b91      	ldr	r3, [pc, #580]	@ (80030dc <main+0x62c>)
 8002e96:	edd3 6a00 	vldr	s13, [r3]
 8002e9a:	4b98      	ldr	r3, [pc, #608]	@ (80030fc <main+0x64c>)
 8002e9c:	ed93 6a00 	vldr	s12, [r3]
 8002ea0:	eef0 1a46 	vmov.f32	s3, s12
 8002ea4:	eeb0 1a66 	vmov.f32	s2, s13
 8002ea8:	eef0 0a47 	vmov.f32	s1, s14
 8002eac:	eeb0 0a67 	vmov.f32	s0, s15
 8002eb0:	f7ff f802 	bl	8001eb8 <kalman_1d>
      	  KalmanAngleRoll = Kalman1DOutput[0];
 8002eb4:	4b92      	ldr	r3, [pc, #584]	@ (8003100 <main+0x650>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a8e      	ldr	r2, [pc, #568]	@ (80030f4 <main+0x644>)
 8002eba:	6013      	str	r3, [r2, #0]
      	  KalmanUncertaintyAngleRoll = Kalman1DOutput[1];
 8002ebc:	4b90      	ldr	r3, [pc, #576]	@ (8003100 <main+0x650>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a8d      	ldr	r2, [pc, #564]	@ (80030f8 <main+0x648>)
 8002ec2:	6013      	str	r3, [r2, #0]

	  kalman_1d(KalmanAnglePitch, KalmanUncertaintyAnglePitch, Gy, AnglePitch);
 8002ec4:	4b8f      	ldr	r3, [pc, #572]	@ (8003104 <main+0x654>)
 8002ec6:	edd3 7a00 	vldr	s15, [r3]
 8002eca:	4b8f      	ldr	r3, [pc, #572]	@ (8003108 <main+0x658>)
 8002ecc:	ed93 7a00 	vldr	s14, [r3]
 8002ed0:	4b84      	ldr	r3, [pc, #528]	@ (80030e4 <main+0x634>)
 8002ed2:	edd3 6a00 	vldr	s13, [r3]
 8002ed6:	4b8d      	ldr	r3, [pc, #564]	@ (800310c <main+0x65c>)
 8002ed8:	ed93 6a00 	vldr	s12, [r3]
 8002edc:	eef0 1a46 	vmov.f32	s3, s12
 8002ee0:	eeb0 1a66 	vmov.f32	s2, s13
 8002ee4:	eef0 0a47 	vmov.f32	s1, s14
 8002ee8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eec:	f7fe ffe4 	bl	8001eb8 <kalman_1d>
	  	  KalmanAnglePitch = Kalman1DOutput[0];
 8002ef0:	4b83      	ldr	r3, [pc, #524]	@ (8003100 <main+0x650>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	@ (8003104 <main+0x654>)
 8002ef6:	6013      	str	r3, [r2, #0]
	  	  KalmanUncertaintyAnglePitch = Kalman1DOutput[1];
 8002ef8:	4b81      	ldr	r3, [pc, #516]	@ (8003100 <main+0x650>)
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4a82      	ldr	r2, [pc, #520]	@ (8003108 <main+0x658>)
 8002efe:	6013      	str	r3, [r2, #0]

	DesiredAngleRoll = 0.10*(receiver_input_channel_1-1500);  // -50do den 50do
 8002f00:	4b83      	ldr	r3, [pc, #524]	@ (8003110 <main+0x660>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fd faaf 	bl	800046c <__aeabi_i2d>
 8002f0e:	a368      	add	r3, pc, #416	@ (adr r3, 80030b0 <main+0x600>)
 8002f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f14:	f7fd fb14 	bl	8000540 <__aeabi_dmul>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fde6 	bl	8000af0 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a7b      	ldr	r2, [pc, #492]	@ (8003114 <main+0x664>)
 8002f28:	6013      	str	r3, [r2, #0]
    DesiredAnglePitch = 0.10*(receiver_input_channel_2-1500); // -50do den 50do
 8002f2a:	4b7b      	ldr	r3, [pc, #492]	@ (8003118 <main+0x668>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fa9a 	bl	800046c <__aeabi_i2d>
 8002f38:	a35d      	add	r3, pc, #372	@ (adr r3, 80030b0 <main+0x600>)
 8002f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3e:	f7fd faff 	bl	8000540 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	4610      	mov	r0, r2
 8002f48:	4619      	mov	r1, r3
 8002f4a:	f7fd fdd1 	bl	8000af0 <__aeabi_d2f>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4a72      	ldr	r2, [pc, #456]	@ (800311c <main+0x66c>)
 8002f52:	6013      	str	r3, [r2, #0]
    InputThrottle = receiver_input_channel_3 + pid_output_altitude1;
 8002f54:	4b72      	ldr	r3, [pc, #456]	@ (8003120 <main+0x670>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f60:	4b70      	ldr	r3, [pc, #448]	@ (8003124 <main+0x674>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	4b6f      	ldr	r3, [pc, #444]	@ (8003128 <main+0x678>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
    DesiredRateYaw = 0.1*(receiver_input_channel_4-1500);
 8002f70:	4b6e      	ldr	r3, [pc, #440]	@ (800312c <main+0x67c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f2a3 53dc 	subw	r3, r3, #1500	@ 0x5dc
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7fd fa77 	bl	800046c <__aeabi_i2d>
 8002f7e:	a34c      	add	r3, pc, #304	@ (adr r3, 80030b0 <main+0x600>)
 8002f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f84:	f7fd fadc 	bl	8000540 <__aeabi_dmul>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4610      	mov	r0, r2
 8002f8e:	4619      	mov	r1, r3
 8002f90:	f7fd fdae 	bl	8000af0 <__aeabi_d2f>
 8002f94:	4603      	mov	r3, r0
 8002f96:	4a66      	ldr	r2, [pc, #408]	@ (8003130 <main+0x680>)
 8002f98:	6013      	str	r3, [r2, #0]
	
	ErrorAngleRoll = DesiredAngleRoll - KalmanAngleRoll;
 8002f9a:	4b5e      	ldr	r3, [pc, #376]	@ (8003114 <main+0x664>)
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	4b54      	ldr	r3, [pc, #336]	@ (80030f4 <main+0x644>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002faa:	4b62      	ldr	r3, [pc, #392]	@ (8003134 <main+0x684>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
	ErrorAnglePitch = DesiredAnglePitch - KalmanAnglePitch;
 8002fb0:	4b5a      	ldr	r3, [pc, #360]	@ (800311c <main+0x66c>)
 8002fb2:	ed93 7a00 	vldr	s14, [r3]
 8002fb6:	4b53      	ldr	r3, [pc, #332]	@ (8003104 <main+0x654>)
 8002fb8:	edd3 7a00 	vldr	s15, [r3]
 8002fbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc0:	4b5d      	ldr	r3, [pc, #372]	@ (8003138 <main+0x688>)
 8002fc2:	edc3 7a00 	vstr	s15, [r3]
	
	pid_equation(ErrorAngleRoll,PAngleRoll,IAngleRoll,DAngleRoll,PrevErrorAngleRoll,PrevItermAngleRoll);
 8002fc6:	4b5b      	ldr	r3, [pc, #364]	@ (8003134 <main+0x684>)
 8002fc8:	edd3 7a00 	vldr	s15, [r3]
 8002fcc:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <main+0x68c>)
 8002fce:	ed93 7a00 	vldr	s14, [r3]
 8002fd2:	4b5b      	ldr	r3, [pc, #364]	@ (8003140 <main+0x690>)
 8002fd4:	edd3 6a00 	vldr	s13, [r3]
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	@ (8003144 <main+0x694>)
 8002fda:	ed93 6a00 	vldr	s12, [r3]
 8002fde:	4b5a      	ldr	r3, [pc, #360]	@ (8003148 <main+0x698>)
 8002fe0:	edd3 5a00 	vldr	s11, [r3]
 8002fe4:	4b59      	ldr	r3, [pc, #356]	@ (800314c <main+0x69c>)
 8002fe6:	ed93 5a00 	vldr	s10, [r3]
 8002fea:	eef0 2a45 	vmov.f32	s5, s10
 8002fee:	eeb0 2a65 	vmov.f32	s4, s11
 8002ff2:	eef0 1a46 	vmov.f32	s3, s12
 8002ff6:	eeb0 1a66 	vmov.f32	s2, s13
 8002ffa:	eef0 0a47 	vmov.f32	s1, s14
 8002ffe:	eeb0 0a67 	vmov.f32	s0, s15
 8003002:	f7ff faed 	bl	80025e0 <pid_equation>
	DesiredRateRoll = PIDReturn[0];
 8003006:	4b52      	ldr	r3, [pc, #328]	@ (8003150 <main+0x6a0>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a52      	ldr	r2, [pc, #328]	@ (8003154 <main+0x6a4>)
 800300c:	6013      	str	r3, [r2, #0]
	PrevErrorAngleRoll = PIDReturn[1];
 800300e:	4b50      	ldr	r3, [pc, #320]	@ (8003150 <main+0x6a0>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4a4d      	ldr	r2, [pc, #308]	@ (8003148 <main+0x698>)
 8003014:	6013      	str	r3, [r2, #0]
	PrevItermAngleRoll = PIDReturn[2];
 8003016:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <main+0x6a0>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	4a4c      	ldr	r2, [pc, #304]	@ (800314c <main+0x69c>)
 800301c:	6013      	str	r3, [r2, #0]
	
	pid_equation(ErrorAnglePitch,PAnglePitch,IAnglePitch,DAnglePitch,PrevErrorAnglePitch,PrevItermAnglePitch);
 800301e:	4b46      	ldr	r3, [pc, #280]	@ (8003138 <main+0x688>)
 8003020:	edd3 7a00 	vldr	s15, [r3]
 8003024:	4b4c      	ldr	r3, [pc, #304]	@ (8003158 <main+0x6a8>)
 8003026:	ed93 7a00 	vldr	s14, [r3]
 800302a:	4b4c      	ldr	r3, [pc, #304]	@ (800315c <main+0x6ac>)
 800302c:	edd3 6a00 	vldr	s13, [r3]
 8003030:	4b4b      	ldr	r3, [pc, #300]	@ (8003160 <main+0x6b0>)
 8003032:	ed93 6a00 	vldr	s12, [r3]
 8003036:	4b4b      	ldr	r3, [pc, #300]	@ (8003164 <main+0x6b4>)
 8003038:	edd3 5a00 	vldr	s11, [r3]
 800303c:	4b4a      	ldr	r3, [pc, #296]	@ (8003168 <main+0x6b8>)
 800303e:	ed93 5a00 	vldr	s10, [r3]
 8003042:	eef0 2a45 	vmov.f32	s5, s10
 8003046:	eeb0 2a65 	vmov.f32	s4, s11
 800304a:	eef0 1a46 	vmov.f32	s3, s12
 800304e:	eeb0 1a66 	vmov.f32	s2, s13
 8003052:	eef0 0a47 	vmov.f32	s1, s14
 8003056:	eeb0 0a67 	vmov.f32	s0, s15
 800305a:	f7ff fac1 	bl	80025e0 <pid_equation>
	DesiredRatePitch = PIDReturn[0];
 800305e:	4b3c      	ldr	r3, [pc, #240]	@ (8003150 <main+0x6a0>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a42      	ldr	r2, [pc, #264]	@ (800316c <main+0x6bc>)
 8003064:	6013      	str	r3, [r2, #0]
	PrevErrorAnglePitch = PIDReturn[1];
 8003066:	4b3a      	ldr	r3, [pc, #232]	@ (8003150 <main+0x6a0>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	4a3e      	ldr	r2, [pc, #248]	@ (8003164 <main+0x6b4>)
 800306c:	6013      	str	r3, [r2, #0]
	PrevItermAnglePitch = PIDReturn[2];
 800306e:	4b38      	ldr	r3, [pc, #224]	@ (8003150 <main+0x6a0>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	4a3d      	ldr	r2, [pc, #244]	@ (8003168 <main+0x6b8>)
 8003074:	6013      	str	r3, [r2, #0]
	
	ErrorRateRoll = DesiredRateRoll - Gx;
 8003076:	4b37      	ldr	r3, [pc, #220]	@ (8003154 <main+0x6a4>)
 8003078:	ed93 7a00 	vldr	s14, [r3]
 800307c:	4b17      	ldr	r3, [pc, #92]	@ (80030dc <main+0x62c>)
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003086:	4b3a      	ldr	r3, [pc, #232]	@ (8003170 <main+0x6c0>)
 8003088:	edc3 7a00 	vstr	s15, [r3]
	ErrorRatePitch = DesiredRatePitch - Gy;
 800308c:	4b37      	ldr	r3, [pc, #220]	@ (800316c <main+0x6bc>)
 800308e:	ed93 7a00 	vldr	s14, [r3]
 8003092:	4b14      	ldr	r3, [pc, #80]	@ (80030e4 <main+0x634>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	ee77 7a67 	vsub.f32	s15, s14, s15
 800309c:	4b35      	ldr	r3, [pc, #212]	@ (8003174 <main+0x6c4>)
 800309e:	edc3 7a00 	vstr	s15, [r3]
	ErrorRateYaw = DesiredRateYaw - Gz;
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <main+0x680>)
 80030a4:	ed93 7a00 	vldr	s14, [r3]
 80030a8:	4b10      	ldr	r3, [pc, #64]	@ (80030ec <main+0x63c>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	e063      	b.n	8003178 <main+0x6c8>
 80030b0:	9999999a 	.word	0x9999999a
 80030b4:	3fb99999 	.word	0x3fb99999
 80030b8:	2000023c 	.word	0x2000023c
 80030bc:	47c5e680 	.word	0x47c5e680
 80030c0:	3e42c9b4 	.word	0x3e42c9b4
 80030c4:	472d2a00 	.word	0x472d2a00
 80030c8:	200002fc 	.word	0x200002fc
 80030cc:	20000300 	.word	0x20000300
 80030d0:	2000010c 	.word	0x2000010c
 80030d4:	200002f8 	.word	0x200002f8
 80030d8:	20000524 	.word	0x20000524
 80030dc:	20000438 	.word	0x20000438
 80030e0:	20000444 	.word	0x20000444
 80030e4:	2000043c 	.word	0x2000043c
 80030e8:	20000448 	.word	0x20000448
 80030ec:	20000440 	.word	0x20000440
 80030f0:	2000044c 	.word	0x2000044c
 80030f4:	20000494 	.word	0x20000494
 80030f8:	20000008 	.word	0x20000008
 80030fc:	20000414 	.word	0x20000414
 8003100:	2000049c 	.word	0x2000049c
 8003104:	20000498 	.word	0x20000498
 8003108:	2000000c 	.word	0x2000000c
 800310c:	20000418 	.word	0x20000418
 8003110:	20000454 	.word	0x20000454
 8003114:	20000500 	.word	0x20000500
 8003118:	20000458 	.word	0x20000458
 800311c:	20000504 	.word	0x20000504
 8003120:	2000045c 	.word	0x2000045c
 8003124:	2000041c 	.word	0x2000041c
 8003128:	200004c0 	.word	0x200004c0
 800312c:	20000460 	.word	0x20000460
 8003130:	200004ac 	.word	0x200004ac
 8003134:	20000508 	.word	0x20000508
 8003138:	2000050c 	.word	0x2000050c
 800313c:	20000034 	.word	0x20000034
 8003140:	2000003c 	.word	0x2000003c
 8003144:	20000044 	.word	0x20000044
 8003148:	20000510 	.word	0x20000510
 800314c:	20000518 	.word	0x20000518
 8003150:	200004e4 	.word	0x200004e4
 8003154:	200004a4 	.word	0x200004a4
 8003158:	20000038 	.word	0x20000038
 800315c:	20000040 	.word	0x20000040
 8003160:	20000048 	.word	0x20000048
 8003164:	20000514 	.word	0x20000514
 8003168:	2000051c 	.word	0x2000051c
 800316c:	200004a8 	.word	0x200004a8
 8003170:	200004b0 	.word	0x200004b0
 8003174:	200004b4 	.word	0x200004b4
 8003178:	ee77 7a67 	vsub.f32	s15, s14, s15
 800317c:	4bb9      	ldr	r3, [pc, #740]	@ (8003464 <main+0x9b4>)
 800317e:	edc3 7a00 	vstr	s15, [r3]
	
  pid_equation(ErrorRateRoll, PRateRoll, IRateRoll, DRateRoll, PrevErrorRateRoll, PrevItermRateRoll);
 8003182:	4bb9      	ldr	r3, [pc, #740]	@ (8003468 <main+0x9b8>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	4bb8      	ldr	r3, [pc, #736]	@ (800346c <main+0x9bc>)
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	4bb8      	ldr	r3, [pc, #736]	@ (8003470 <main+0x9c0>)
 8003190:	edd3 6a00 	vldr	s13, [r3]
 8003194:	4bb7      	ldr	r3, [pc, #732]	@ (8003474 <main+0x9c4>)
 8003196:	ed93 6a00 	vldr	s12, [r3]
 800319a:	4bb7      	ldr	r3, [pc, #732]	@ (8003478 <main+0x9c8>)
 800319c:	edd3 5a00 	vldr	s11, [r3]
 80031a0:	4bb6      	ldr	r3, [pc, #728]	@ (800347c <main+0x9cc>)
 80031a2:	ed93 5a00 	vldr	s10, [r3]
 80031a6:	eef0 2a45 	vmov.f32	s5, s10
 80031aa:	eeb0 2a65 	vmov.f32	s4, s11
 80031ae:	eef0 1a46 	vmov.f32	s3, s12
 80031b2:	eeb0 1a66 	vmov.f32	s2, s13
 80031b6:	eef0 0a47 	vmov.f32	s1, s14
 80031ba:	eeb0 0a67 	vmov.f32	s0, s15
 80031be:	f7ff fa0f 	bl	80025e0 <pid_equation>
       InputRoll=PIDReturn[0];
 80031c2:	4baf      	ldr	r3, [pc, #700]	@ (8003480 <main+0x9d0>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4aaf      	ldr	r2, [pc, #700]	@ (8003484 <main+0x9d4>)
 80031c8:	6013      	str	r3, [r2, #0]
       PrevErrorRateRoll=PIDReturn[1]; 
 80031ca:	4bad      	ldr	r3, [pc, #692]	@ (8003480 <main+0x9d0>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	4aaa      	ldr	r2, [pc, #680]	@ (8003478 <main+0x9c8>)
 80031d0:	6013      	str	r3, [r2, #0]
       PrevItermRateRoll=PIDReturn[2];
 80031d2:	4bab      	ldr	r3, [pc, #684]	@ (8003480 <main+0x9d0>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	4aa9      	ldr	r2, [pc, #676]	@ (800347c <main+0x9cc>)
 80031d8:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRatePitch, PRatePitch,IRatePitch, DRatePitch, PrevErrorRatePitch, PrevItermRatePitch);
 80031da:	4bab      	ldr	r3, [pc, #684]	@ (8003488 <main+0x9d8>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	4baa      	ldr	r3, [pc, #680]	@ (800348c <main+0x9dc>)
 80031e2:	ed93 7a00 	vldr	s14, [r3]
 80031e6:	4baa      	ldr	r3, [pc, #680]	@ (8003490 <main+0x9e0>)
 80031e8:	edd3 6a00 	vldr	s13, [r3]
 80031ec:	4ba9      	ldr	r3, [pc, #676]	@ (8003494 <main+0x9e4>)
 80031ee:	ed93 6a00 	vldr	s12, [r3]
 80031f2:	4ba9      	ldr	r3, [pc, #676]	@ (8003498 <main+0x9e8>)
 80031f4:	edd3 5a00 	vldr	s11, [r3]
 80031f8:	4ba8      	ldr	r3, [pc, #672]	@ (800349c <main+0x9ec>)
 80031fa:	ed93 5a00 	vldr	s10, [r3]
 80031fe:	eef0 2a45 	vmov.f32	s5, s10
 8003202:	eeb0 2a65 	vmov.f32	s4, s11
 8003206:	eef0 1a46 	vmov.f32	s3, s12
 800320a:	eeb0 1a66 	vmov.f32	s2, s13
 800320e:	eef0 0a47 	vmov.f32	s1, s14
 8003212:	eeb0 0a67 	vmov.f32	s0, s15
 8003216:	f7ff f9e3 	bl	80025e0 <pid_equation>
       InputPitch=PIDReturn[0]; 
 800321a:	4b99      	ldr	r3, [pc, #612]	@ (8003480 <main+0x9d0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4aa0      	ldr	r2, [pc, #640]	@ (80034a0 <main+0x9f0>)
 8003220:	6013      	str	r3, [r2, #0]
       PrevErrorRatePitch=PIDReturn[1]; 
 8003222:	4b97      	ldr	r3, [pc, #604]	@ (8003480 <main+0x9d0>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	4a9c      	ldr	r2, [pc, #624]	@ (8003498 <main+0x9e8>)
 8003228:	6013      	str	r3, [r2, #0]
       PrevItermRatePitch=PIDReturn[2];
 800322a:	4b95      	ldr	r3, [pc, #596]	@ (8003480 <main+0x9d0>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	4a9b      	ldr	r2, [pc, #620]	@ (800349c <main+0x9ec>)
 8003230:	6013      	str	r3, [r2, #0]
			 
  pid_equation(ErrorRateYaw, PRateYaw,IRateYaw, DRateYaw, PrevErrorRateYaw, PrevItermRateYaw);
 8003232:	4b8c      	ldr	r3, [pc, #560]	@ (8003464 <main+0x9b4>)
 8003234:	edd3 7a00 	vldr	s15, [r3]
 8003238:	4b9a      	ldr	r3, [pc, #616]	@ (80034a4 <main+0x9f4>)
 800323a:	ed93 7a00 	vldr	s14, [r3]
 800323e:	4b9a      	ldr	r3, [pc, #616]	@ (80034a8 <main+0x9f8>)
 8003240:	edd3 6a00 	vldr	s13, [r3]
 8003244:	4b99      	ldr	r3, [pc, #612]	@ (80034ac <main+0x9fc>)
 8003246:	ed93 6a00 	vldr	s12, [r3]
 800324a:	4b99      	ldr	r3, [pc, #612]	@ (80034b0 <main+0xa00>)
 800324c:	edd3 5a00 	vldr	s11, [r3]
 8003250:	4b98      	ldr	r3, [pc, #608]	@ (80034b4 <main+0xa04>)
 8003252:	ed93 5a00 	vldr	s10, [r3]
 8003256:	eef0 2a45 	vmov.f32	s5, s10
 800325a:	eeb0 2a65 	vmov.f32	s4, s11
 800325e:	eef0 1a46 	vmov.f32	s3, s12
 8003262:	eeb0 1a66 	vmov.f32	s2, s13
 8003266:	eef0 0a47 	vmov.f32	s1, s14
 800326a:	eeb0 0a67 	vmov.f32	s0, s15
 800326e:	f7ff f9b7 	bl	80025e0 <pid_equation>
       InputYaw=PIDReturn[0]; 
 8003272:	4b83      	ldr	r3, [pc, #524]	@ (8003480 <main+0x9d0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a90      	ldr	r2, [pc, #576]	@ (80034b8 <main+0xa08>)
 8003278:	6013      	str	r3, [r2, #0]
       PrevErrorRateYaw=PIDReturn[1]; 
 800327a:	4b81      	ldr	r3, [pc, #516]	@ (8003480 <main+0x9d0>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a8c      	ldr	r2, [pc, #560]	@ (80034b0 <main+0xa00>)
 8003280:	6013      	str	r3, [r2, #0]
       PrevItermRateYaw=PIDReturn[2];
 8003282:	4b7f      	ldr	r3, [pc, #508]	@ (8003480 <main+0x9d0>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	4a8b      	ldr	r2, [pc, #556]	@ (80034b4 <main+0xa04>)
 8003288:	6013      	str	r3, [r2, #0]

  if (InputThrottle > 1800) InputThrottle = 1800;	
 800328a:	4b8c      	ldr	r3, [pc, #560]	@ (80034bc <main+0xa0c>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ed9f 7a8b 	vldr	s14, [pc, #556]	@ 80034c0 <main+0xa10>
 8003294:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	dd02      	ble.n	80032a4 <main+0x7f4>
 800329e:	4b87      	ldr	r3, [pc, #540]	@ (80034bc <main+0xa0c>)
 80032a0:	4a88      	ldr	r2, [pc, #544]	@ (80034c4 <main+0xa14>)
 80032a2:	601a      	str	r2, [r3, #0]
  MotorInput1= (InputThrottle-InputRoll-InputPitch-InputYaw);
 80032a4:	4b85      	ldr	r3, [pc, #532]	@ (80034bc <main+0xa0c>)
 80032a6:	ed93 7a00 	vldr	s14, [r3]
 80032aa:	4b76      	ldr	r3, [pc, #472]	@ (8003484 <main+0x9d4>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032b4:	4b7a      	ldr	r3, [pc, #488]	@ (80034a0 <main+0x9f0>)
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032be:	4b7e      	ldr	r3, [pc, #504]	@ (80034b8 <main+0xa08>)
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	4b7f      	ldr	r3, [pc, #508]	@ (80034c8 <main+0xa18>)
 80032ca:	edc3 7a00 	vstr	s15, [r3]
  MotorInput2= (InputThrottle-InputRoll+InputPitch+InputYaw);
 80032ce:	4b7b      	ldr	r3, [pc, #492]	@ (80034bc <main+0xa0c>)
 80032d0:	ed93 7a00 	vldr	s14, [r3]
 80032d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003484 <main+0x9d4>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ee37 7a67 	vsub.f32	s14, s14, s15
 80032de:	4b70      	ldr	r3, [pc, #448]	@ (80034a0 <main+0x9f0>)
 80032e0:	edd3 7a00 	vldr	s15, [r3]
 80032e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032e8:	4b73      	ldr	r3, [pc, #460]	@ (80034b8 <main+0xa08>)
 80032ea:	edd3 7a00 	vldr	s15, [r3]
 80032ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032f2:	4b76      	ldr	r3, [pc, #472]	@ (80034cc <main+0xa1c>)
 80032f4:	edc3 7a00 	vstr	s15, [r3]
  MotorInput3= (InputThrottle+InputRoll+InputPitch-InputYaw);
 80032f8:	4b70      	ldr	r3, [pc, #448]	@ (80034bc <main+0xa0c>)
 80032fa:	ed93 7a00 	vldr	s14, [r3]
 80032fe:	4b61      	ldr	r3, [pc, #388]	@ (8003484 <main+0x9d4>)
 8003300:	edd3 7a00 	vldr	s15, [r3]
 8003304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003308:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <main+0x9f0>)
 800330a:	edd3 7a00 	vldr	s15, [r3]
 800330e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003312:	4b69      	ldr	r3, [pc, #420]	@ (80034b8 <main+0xa08>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800331c:	4b6c      	ldr	r3, [pc, #432]	@ (80034d0 <main+0xa20>)
 800331e:	edc3 7a00 	vstr	s15, [r3]
  MotorInput4= (InputThrottle+InputRoll-InputPitch+InputYaw);
 8003322:	4b66      	ldr	r3, [pc, #408]	@ (80034bc <main+0xa0c>)
 8003324:	ed93 7a00 	vldr	s14, [r3]
 8003328:	4b56      	ldr	r3, [pc, #344]	@ (8003484 <main+0x9d4>)
 800332a:	edd3 7a00 	vldr	s15, [r3]
 800332e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003332:	4b5b      	ldr	r3, [pc, #364]	@ (80034a0 <main+0x9f0>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800333c:	4b5e      	ldr	r3, [pc, #376]	@ (80034b8 <main+0xa08>)
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	4b63      	ldr	r3, [pc, #396]	@ (80034d4 <main+0xa24>)
 8003348:	edc3 7a00 	vstr	s15, [r3]
	
  if (MotorInput1 > 1999)MotorInput1 = 1999;
 800334c:	4b5e      	ldr	r3, [pc, #376]	@ (80034c8 <main+0xa18>)
 800334e:	edd3 7a00 	vldr	s15, [r3]
 8003352:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80034d8 <main+0xa28>
 8003356:	eef4 7ac7 	vcmpe.f32	s15, s14
 800335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335e:	dd02      	ble.n	8003366 <main+0x8b6>
 8003360:	4b59      	ldr	r3, [pc, #356]	@ (80034c8 <main+0xa18>)
 8003362:	4a5e      	ldr	r2, [pc, #376]	@ (80034dc <main+0xa2c>)
 8003364:	601a      	str	r2, [r3, #0]
  if (MotorInput2 > 1999)MotorInput2 = 1999; 
 8003366:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <main+0xa1c>)
 8003368:	edd3 7a00 	vldr	s15, [r3]
 800336c:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80034d8 <main+0xa28>
 8003370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003378:	dd02      	ble.n	8003380 <main+0x8d0>
 800337a:	4b54      	ldr	r3, [pc, #336]	@ (80034cc <main+0xa1c>)
 800337c:	4a57      	ldr	r2, [pc, #348]	@ (80034dc <main+0xa2c>)
 800337e:	601a      	str	r2, [r3, #0]
  if (MotorInput3 > 1999)MotorInput3 = 1999; 
 8003380:	4b53      	ldr	r3, [pc, #332]	@ (80034d0 <main+0xa20>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 80034d8 <main+0xa28>
 800338a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	dd02      	ble.n	800339a <main+0x8ea>
 8003394:	4b4e      	ldr	r3, [pc, #312]	@ (80034d0 <main+0xa20>)
 8003396:	4a51      	ldr	r2, [pc, #324]	@ (80034dc <main+0xa2c>)
 8003398:	601a      	str	r2, [r3, #0]
  if (MotorInput4 > 1999)MotorInput4 = 1999;
 800339a:	4b4e      	ldr	r3, [pc, #312]	@ (80034d4 <main+0xa24>)
 800339c:	edd3 7a00 	vldr	s15, [r3]
 80033a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80034d8 <main+0xa28>
 80033a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ac:	dd02      	ble.n	80033b4 <main+0x904>
 80033ae:	4b49      	ldr	r3, [pc, #292]	@ (80034d4 <main+0xa24>)
 80033b0:	4a4a      	ldr	r2, [pc, #296]	@ (80034dc <main+0xa2c>)
 80033b2:	601a      	str	r2, [r3, #0]
  
  int ThrottleIdle = 1180;
 80033b4:	f240 439c 	movw	r3, #1180	@ 0x49c
 80033b8:	60bb      	str	r3, [r7, #8]
  if (MotorInput1 < ThrottleIdle) MotorInput1 = ThrottleIdle;
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	ee07 3a90 	vmov	s15, r3
 80033c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033c4:	4b40      	ldr	r3, [pc, #256]	@ (80034c8 <main+0xa18>)
 80033c6:	edd3 7a00 	vldr	s15, [r3]
 80033ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d2:	dd07      	ble.n	80033e4 <main+0x934>
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80033de:	4b3a      	ldr	r3, [pc, #232]	@ (80034c8 <main+0xa18>)
 80033e0:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput2 < ThrottleIdle) MotorInput2 = ThrottleIdle;
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	ee07 3a90 	vmov	s15, r3
 80033ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033ee:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <main+0xa1c>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fc:	dd07      	ble.n	800340e <main+0x95e>
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003408:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <main+0xa1c>)
 800340a:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput3 < ThrottleIdle) MotorInput3 = ThrottleIdle;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	ee07 3a90 	vmov	s15, r3
 8003414:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003418:	4b2d      	ldr	r3, [pc, #180]	@ (80034d0 <main+0xa20>)
 800341a:	edd3 7a00 	vldr	s15, [r3]
 800341e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003426:	dd07      	ble.n	8003438 <main+0x988>
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	ee07 3a90 	vmov	s15, r3
 800342e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003432:	4b27      	ldr	r3, [pc, #156]	@ (80034d0 <main+0xa20>)
 8003434:	edc3 7a00 	vstr	s15, [r3]
  if (MotorInput4 < ThrottleIdle) MotorInput4 = ThrottleIdle;
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003442:	4b24      	ldr	r3, [pc, #144]	@ (80034d4 <main+0xa24>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	dd46      	ble.n	80034e0 <main+0xa30>
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	ee07 3a90 	vmov	s15, r3
 8003458:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800345c:	4b1d      	ldr	r3, [pc, #116]	@ (80034d4 <main+0xa24>)
 800345e:	edc3 7a00 	vstr	s15, [r3]
 8003462:	e03d      	b.n	80034e0 <main+0xa30>
 8003464:	200004b8 	.word	0x200004b8
 8003468:	200004b0 	.word	0x200004b0
 800346c:	20000010 	.word	0x20000010
 8003470:	2000001c 	.word	0x2000001c
 8003474:	20000028 	.word	0x20000028
 8003478:	200004cc 	.word	0x200004cc
 800347c:	200004d8 	.word	0x200004d8
 8003480:	200004e4 	.word	0x200004e4
 8003484:	200004bc 	.word	0x200004bc
 8003488:	200004b4 	.word	0x200004b4
 800348c:	20000014 	.word	0x20000014
 8003490:	20000020 	.word	0x20000020
 8003494:	2000002c 	.word	0x2000002c
 8003498:	200004d0 	.word	0x200004d0
 800349c:	200004dc 	.word	0x200004dc
 80034a0:	200004c4 	.word	0x200004c4
 80034a4:	20000018 	.word	0x20000018
 80034a8:	20000024 	.word	0x20000024
 80034ac:	20000030 	.word	0x20000030
 80034b0:	200004d4 	.word	0x200004d4
 80034b4:	200004e0 	.word	0x200004e0
 80034b8:	200004c8 	.word	0x200004c8
 80034bc:	200004c0 	.word	0x200004c0
 80034c0:	44e10000 	.word	0x44e10000
 80034c4:	44e10000 	.word	0x44e10000
 80034c8:	200004f0 	.word	0x200004f0
 80034cc:	200004f4 	.word	0x200004f4
 80034d0:	200004f8 	.word	0x200004f8
 80034d4:	200004fc 	.word	0x200004fc
 80034d8:	44f9e000 	.word	0x44f9e000
 80034dc:	44f9e000 	.word	0x44f9e000
  
  int ThrottleCutOff = 1000;
 80034e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80034e4:	607b      	str	r3, [r7, #4]
  if (receiver_input_channel_3 < 1050) 
 80034e6:	4b3d      	ldr	r3, [pc, #244]	@ (80035dc <main+0xb2c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f240 4219 	movw	r2, #1049	@ 0x419
 80034ee:	4293      	cmp	r3, r2
 80034f0:	dc21      	bgt.n	8003536 <main+0xa86>
  {  
	MotorInput1=ThrottleCutOff;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	ee07 3a90 	vmov	s15, r3
 80034f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80034fc:	4b38      	ldr	r3, [pc, #224]	@ (80035e0 <main+0xb30>)
 80034fe:	edc3 7a00 	vstr	s15, [r3]
    MotorInput2=ThrottleCutOff;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	ee07 3a90 	vmov	s15, r3
 8003508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800350c:	4b35      	ldr	r3, [pc, #212]	@ (80035e4 <main+0xb34>)
 800350e:	edc3 7a00 	vstr	s15, [r3]
    MotorInput3=ThrottleCutOff; 
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	ee07 3a90 	vmov	s15, r3
 8003518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800351c:	4b32      	ldr	r3, [pc, #200]	@ (80035e8 <main+0xb38>)
 800351e:	edc3 7a00 	vstr	s15, [r3]
    MotorInput4=ThrottleCutOff;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ee07 3a90 	vmov	s15, r3
 8003528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800352c:	4b2f      	ldr	r3, [pc, #188]	@ (80035ec <main+0xb3c>)
 800352e:	edc3 7a00 	vstr	s15, [r3]
    reset_pid();
 8003532:	f7ff f90f 	bl	8002754 <reset_pid>
  }
	
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,MotorInput1);
 8003536:	4b2a      	ldr	r3, [pc, #168]	@ (80035e0 <main+0xb30>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	4b2c      	ldr	r3, [pc, #176]	@ (80035f0 <main+0xb40>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003544:	ee17 2a90 	vmov	r2, s15
 8003548:	635a      	str	r2, [r3, #52]	@ 0x34
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,MotorInput2);
 800354a:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <main+0xb34>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	4b27      	ldr	r3, [pc, #156]	@ (80035f0 <main+0xb40>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003558:	ee17 2a90 	vmov	r2, s15
 800355c:	639a      	str	r2, [r3, #56]	@ 0x38
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,MotorInput3);
 800355e:	4b22      	ldr	r3, [pc, #136]	@ (80035e8 <main+0xb38>)
 8003560:	edd3 7a00 	vldr	s15, [r3]
 8003564:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <main+0xb40>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 2a90 	vmov	r2, s15
 8003570:	63da      	str	r2, [r3, #60]	@ 0x3c
	 	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,MotorInput4);
 8003572:	4b1e      	ldr	r3, [pc, #120]	@ (80035ec <main+0xb3c>)
 8003574:	edd3 7a00 	vldr	s15, [r3]
 8003578:	4b1d      	ldr	r3, [pc, #116]	@ (80035f0 <main+0xb40>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003580:	ee17 2a90 	vmov	r2, s15
 8003584:	641a      	str	r2, [r3, #64]	@ 0x40
	
	/*---------------------------------------------------------------------*/
	// chu ky lay mau T = 4ms , f = 250Hz
	// chu ky lay mau T = 20ms, f = 50Hz

	 	while ( abs(__HAL_TIM_GET_COUNTER(&htim1) - loop_timer) < 4000 ) ;
 8003586:	bf00      	nop
 8003588:	4b1a      	ldr	r3, [pc, #104]	@ (80035f4 <main+0xb44>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800358e:	4a1a      	ldr	r2, [pc, #104]	@ (80035f8 <main+0xb48>)
 8003590:	6812      	ldr	r2, [r2, #0]
 8003592:	1a9b      	subs	r3, r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	bfb8      	it	lt
 8003598:	425b      	neglt	r3, r3
 800359a:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800359e:	dbf3      	blt.n	8003588 <main+0xad8>
	 		 __HAL_TIM_SET_COUNTER(&htim1,0);
 80035a0:	4b14      	ldr	r3, [pc, #80]	@ (80035f4 <main+0xb44>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2200      	movs	r2, #0
 80035a6:	625a      	str	r2, [r3, #36]	@ 0x24
	 		 loop_timer = TIM1->CNT;
 80035a8:	4b14      	ldr	r3, [pc, #80]	@ (80035fc <main+0xb4c>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b12      	ldr	r3, [pc, #72]	@ (80035f8 <main+0xb48>)
 80035b0:	601a      	str	r2, [r3, #0]
	 		check_time3 = check_time2 - check_time1;
 80035b2:	4b13      	ldr	r3, [pc, #76]	@ (8003600 <main+0xb50>)
 80035b4:	ed93 7a00 	vldr	s14, [r3]
 80035b8:	4b12      	ldr	r3, [pc, #72]	@ (8003604 <main+0xb54>)
 80035ba:	edd3 7a00 	vldr	s15, [r3]
 80035be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <main+0xb58>)
 80035c4:	edc3 7a00 	vstr	s15, [r3]
	 		 check_time1 = 0; check_time2 = 0;
 80035c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003604 <main+0xb54>)
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <main+0xb50>)
 80035d2:	f04f 0200 	mov.w	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
  {
 80035d8:	f7ff bb1f 	b.w	8002c1a <main+0x16a>
 80035dc:	2000045c 	.word	0x2000045c
 80035e0:	200004f0 	.word	0x200004f0
 80035e4:	200004f4 	.word	0x200004f4
 80035e8:	200004f8 	.word	0x200004f8
 80035ec:	200004fc 	.word	0x200004fc
 80035f0:	20000778 	.word	0x20000778
 80035f4:	200006e8 	.word	0x200006e8
 80035f8:	20000450 	.word	0x20000450
 80035fc:	40010000 	.word	0x40010000
 8003600:	200002f0 	.word	0x200002f0
 8003604:	200002ec 	.word	0x200002ec
 8003608:	200002f4 	.word	0x200002f4

0800360c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b094      	sub	sp, #80	@ 0x50
 8003610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003612:	f107 0320 	add.w	r3, r7, #32
 8003616:	2230      	movs	r2, #48	@ 0x30
 8003618:	2100      	movs	r1, #0
 800361a:	4618      	mov	r0, r3
 800361c:	f006 fb02 	bl	8009c24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003620:	f107 030c 	add.w	r3, r7, #12
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	609a      	str	r2, [r3, #8]
 800362c:	60da      	str	r2, [r3, #12]
 800362e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	4b28      	ldr	r3, [pc, #160]	@ (80036d8 <SystemClock_Config+0xcc>)
 8003636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003638:	4a27      	ldr	r2, [pc, #156]	@ (80036d8 <SystemClock_Config+0xcc>)
 800363a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800363e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003640:	4b25      	ldr	r3, [pc, #148]	@ (80036d8 <SystemClock_Config+0xcc>)
 8003642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003644:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800364c:	2300      	movs	r3, #0
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	4b22      	ldr	r3, [pc, #136]	@ (80036dc <SystemClock_Config+0xd0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a21      	ldr	r2, [pc, #132]	@ (80036dc <SystemClock_Config+0xd0>)
 8003656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	4b1f      	ldr	r3, [pc, #124]	@ (80036dc <SystemClock_Config+0xd0>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003664:	607b      	str	r3, [r7, #4]
 8003666:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003668:	2302      	movs	r3, #2
 800366a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800366c:	2301      	movs	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003670:	2310      	movs	r3, #16
 8003672:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003674:	2302      	movs	r3, #2
 8003676:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003678:	2300      	movs	r3, #0
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800367c:	2308      	movs	r3, #8
 800367e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003680:	23a8      	movs	r3, #168	@ 0xa8
 8003682:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003684:	2302      	movs	r3, #2
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003688:	2304      	movs	r3, #4
 800368a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800368c:	f107 0320 	add.w	r3, r7, #32
 8003690:	4618      	mov	r0, r3
 8003692:	f003 fb0d 	bl	8006cb0 <HAL_RCC_OscConfig>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800369c:	f000 fbd4 	bl	8003e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036a0:	230f      	movs	r3, #15
 80036a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80036a4:	2302      	movs	r3, #2
 80036a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80036ac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80036b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80036b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80036b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80036b8:	f107 030c 	add.w	r3, r7, #12
 80036bc:	2105      	movs	r1, #5
 80036be:	4618      	mov	r0, r3
 80036c0:	f003 fd6e 	bl	80071a0 <HAL_RCC_ClockConfig>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80036ca:	f000 fbbd 	bl	8003e48 <Error_Handler>
  }
}
 80036ce:	bf00      	nop
 80036d0:	3750      	adds	r7, #80	@ 0x50
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40007000 	.word	0x40007000

080036e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80036e4:	4b12      	ldr	r3, [pc, #72]	@ (8003730 <MX_I2C1_Init+0x50>)
 80036e6:	4a13      	ldr	r2, [pc, #76]	@ (8003734 <MX_I2C1_Init+0x54>)
 80036e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80036ea:	4b11      	ldr	r3, [pc, #68]	@ (8003730 <MX_I2C1_Init+0x50>)
 80036ec:	4a12      	ldr	r2, [pc, #72]	@ (8003738 <MX_I2C1_Init+0x58>)
 80036ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036f0:	4b0f      	ldr	r3, [pc, #60]	@ (8003730 <MX_I2C1_Init+0x50>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	@ (8003730 <MX_I2C1_Init+0x50>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <MX_I2C1_Init+0x50>)
 80036fe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003702:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	@ (8003730 <MX_I2C1_Init+0x50>)
 8003706:	2200      	movs	r2, #0
 8003708:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800370a:	4b09      	ldr	r3, [pc, #36]	@ (8003730 <MX_I2C1_Init+0x50>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003710:	4b07      	ldr	r3, [pc, #28]	@ (8003730 <MX_I2C1_Init+0x50>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003716:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <MX_I2C1_Init+0x50>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	@ (8003730 <MX_I2C1_Init+0x50>)
 800371e:	f002 fad7 	bl	8005cd0 <HAL_I2C_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003728:	f000 fb8e 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000528 	.word	0x20000528
 8003734:	40005400 	.word	0x40005400
 8003738:	00061a80 	.word	0x00061a80

0800373c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003740:	4b12      	ldr	r3, [pc, #72]	@ (800378c <MX_I2C2_Init+0x50>)
 8003742:	4a13      	ldr	r2, [pc, #76]	@ (8003790 <MX_I2C2_Init+0x54>)
 8003744:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8003746:	4b11      	ldr	r3, [pc, #68]	@ (800378c <MX_I2C2_Init+0x50>)
 8003748:	4a12      	ldr	r2, [pc, #72]	@ (8003794 <MX_I2C2_Init+0x58>)
 800374a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800374c:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <MX_I2C2_Init+0x50>)
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8003752:	4b0e      	ldr	r3, [pc, #56]	@ (800378c <MX_I2C2_Init+0x50>)
 8003754:	2200      	movs	r2, #0
 8003756:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003758:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <MX_I2C2_Init+0x50>)
 800375a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800375e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003760:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <MX_I2C2_Init+0x50>)
 8003762:	2200      	movs	r2, #0
 8003764:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8003766:	4b09      	ldr	r3, [pc, #36]	@ (800378c <MX_I2C2_Init+0x50>)
 8003768:	2200      	movs	r2, #0
 800376a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800376c:	4b07      	ldr	r3, [pc, #28]	@ (800378c <MX_I2C2_Init+0x50>)
 800376e:	2200      	movs	r2, #0
 8003770:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <MX_I2C2_Init+0x50>)
 8003774:	2200      	movs	r2, #0
 8003776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003778:	4804      	ldr	r0, [pc, #16]	@ (800378c <MX_I2C2_Init+0x50>)
 800377a:	f002 faa9 	bl	8005cd0 <HAL_I2C_Init>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003784:	f000 fb60 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003788:	bf00      	nop
 800378a:	bd80      	pop	{r7, pc}
 800378c:	2000057c 	.word	0x2000057c
 8003790:	40005800 	.word	0x40005800
 8003794:	00061a80 	.word	0x00061a80

08003798 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800379c:	4b17      	ldr	r3, [pc, #92]	@ (80037fc <MX_SPI3_Init+0x64>)
 800379e:	4a18      	ldr	r2, [pc, #96]	@ (8003800 <MX_SPI3_Init+0x68>)
 80037a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80037a2:	4b16      	ldr	r3, [pc, #88]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80037aa:	4b14      	ldr	r3, [pc, #80]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80037b0:	4b12      	ldr	r3, [pc, #72]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80037b6:	4b11      	ldr	r3, [pc, #68]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80037bc:	4b0f      	ldr	r3, [pc, #60]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037be:	2200      	movs	r2, #0
 80037c0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80037c2:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80037c8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037ca:	4b0c      	ldr	r3, [pc, #48]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80037d0:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80037d6:	4b09      	ldr	r3, [pc, #36]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037d8:	2200      	movs	r2, #0
 80037da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037dc:	4b07      	ldr	r3, [pc, #28]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037de:	2200      	movs	r2, #0
 80037e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80037e2:	4b06      	ldr	r3, [pc, #24]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037e4:	220a      	movs	r2, #10
 80037e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80037e8:	4804      	ldr	r0, [pc, #16]	@ (80037fc <MX_SPI3_Init+0x64>)
 80037ea:	f003 feb9 	bl	8007560 <HAL_SPI_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80037f4:	f000 fb28 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80037f8:	bf00      	nop
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	20000690 	.word	0x20000690
 8003800:	40003c00 	.word	0x40003c00

08003804 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b086      	sub	sp, #24
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	609a      	str	r2, [r3, #8]
 8003816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003818:	463b      	mov	r3, r7
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003820:	4b1e      	ldr	r3, [pc, #120]	@ (800389c <MX_TIM1_Init+0x98>)
 8003822:	4a1f      	ldr	r2, [pc, #124]	@ (80038a0 <MX_TIM1_Init+0x9c>)
 8003824:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8003826:	4b1d      	ldr	r3, [pc, #116]	@ (800389c <MX_TIM1_Init+0x98>)
 8003828:	22a7      	movs	r2, #167	@ 0xa7
 800382a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <MX_TIM1_Init+0x98>)
 800382e:	2200      	movs	r2, #0
 8003830:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003832:	4b1a      	ldr	r3, [pc, #104]	@ (800389c <MX_TIM1_Init+0x98>)
 8003834:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003838:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800383a:	4b18      	ldr	r3, [pc, #96]	@ (800389c <MX_TIM1_Init+0x98>)
 800383c:	2200      	movs	r2, #0
 800383e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003840:	4b16      	ldr	r3, [pc, #88]	@ (800389c <MX_TIM1_Init+0x98>)
 8003842:	2200      	movs	r2, #0
 8003844:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003846:	4b15      	ldr	r3, [pc, #84]	@ (800389c <MX_TIM1_Init+0x98>)
 8003848:	2200      	movs	r2, #0
 800384a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800384c:	4813      	ldr	r0, [pc, #76]	@ (800389c <MX_TIM1_Init+0x98>)
 800384e:	f003 ff10 	bl	8007672 <HAL_TIM_Base_Init>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003858:	f000 faf6 	bl	8003e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800385c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003860:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003862:	f107 0308 	add.w	r3, r7, #8
 8003866:	4619      	mov	r1, r3
 8003868:	480c      	ldr	r0, [pc, #48]	@ (800389c <MX_TIM1_Init+0x98>)
 800386a:	f004 fb0b 	bl	8007e84 <HAL_TIM_ConfigClockSource>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003874:	f000 fae8 	bl	8003e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003878:	2300      	movs	r3, #0
 800387a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800387c:	2300      	movs	r3, #0
 800387e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003880:	463b      	mov	r3, r7
 8003882:	4619      	mov	r1, r3
 8003884:	4805      	ldr	r0, [pc, #20]	@ (800389c <MX_TIM1_Init+0x98>)
 8003886:	f004 fefd 	bl	8008684 <HAL_TIMEx_MasterConfigSynchronization>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8003890:	f000 fada 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	3718      	adds	r7, #24
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	200006e8 	.word	0x200006e8
 80038a0:	40010000 	.word	0x40010000

080038a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038aa:	f107 0308 	add.w	r3, r7, #8
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	605a      	str	r2, [r3, #4]
 80038b4:	609a      	str	r2, [r3, #8]
 80038b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b8:	463b      	mov	r3, r7
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80038c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038ca:	2253      	movs	r2, #83	@ 0x53
 80038cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295-1;
 80038d4:	4b18      	ldr	r3, [pc, #96]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038d6:	f06f 0201 	mvn.w	r2, #1
 80038da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038dc:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038e2:	4b15      	ldr	r3, [pc, #84]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038e8:	4813      	ldr	r0, [pc, #76]	@ (8003938 <MX_TIM2_Init+0x94>)
 80038ea:	f003 fec2 	bl	8007672 <HAL_TIM_Base_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80038f4:	f000 faa8 	bl	8003e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80038fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038fe:	f107 0308 	add.w	r3, r7, #8
 8003902:	4619      	mov	r1, r3
 8003904:	480c      	ldr	r0, [pc, #48]	@ (8003938 <MX_TIM2_Init+0x94>)
 8003906:	f004 fabd 	bl	8007e84 <HAL_TIM_ConfigClockSource>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003910:	f000 fa9a 	bl	8003e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003914:	2300      	movs	r3, #0
 8003916:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003918:	2300      	movs	r3, #0
 800391a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800391c:	463b      	mov	r3, r7
 800391e:	4619      	mov	r1, r3
 8003920:	4805      	ldr	r0, [pc, #20]	@ (8003938 <MX_TIM2_Init+0x94>)
 8003922:	f004 feaf 	bl	8008684 <HAL_TIMEx_MasterConfigSynchronization>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d001      	beq.n	8003930 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800392c:	f000 fa8c 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003930:	bf00      	nop
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000730 	.word	0x20000730

0800393c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	@ 0x28
 8003940:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003942:	f107 0320 	add.w	r3, r7, #32
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800394c:	1d3b      	adds	r3, r7, #4
 800394e:	2200      	movs	r2, #0
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	605a      	str	r2, [r3, #4]
 8003954:	609a      	str	r2, [r3, #8]
 8003956:	60da      	str	r2, [r3, #12]
 8003958:	611a      	str	r2, [r3, #16]
 800395a:	615a      	str	r2, [r3, #20]
 800395c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800395e:	4b32      	ldr	r3, [pc, #200]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003960:	4a32      	ldr	r2, [pc, #200]	@ (8003a2c <MX_TIM3_Init+0xf0>)
 8003962:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8003964:	4b30      	ldr	r3, [pc, #192]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003966:	2253      	movs	r2, #83	@ 0x53
 8003968:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800396a:	4b2f      	ldr	r3, [pc, #188]	@ (8003a28 <MX_TIM3_Init+0xec>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8003970:	4b2d      	ldr	r3, [pc, #180]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003972:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003976:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003978:	4b2b      	ldr	r3, [pc, #172]	@ (8003a28 <MX_TIM3_Init+0xec>)
 800397a:	2200      	movs	r2, #0
 800397c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800397e:	4b2a      	ldr	r3, [pc, #168]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003980:	2200      	movs	r2, #0
 8003982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003984:	4828      	ldr	r0, [pc, #160]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003986:	f003 ff9b 	bl	80078c0 <HAL_TIM_PWM_Init>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8003990:	f000 fa5a 	bl	8003e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003994:	2300      	movs	r3, #0
 8003996:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003998:	2300      	movs	r3, #0
 800399a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800399c:	f107 0320 	add.w	r3, r7, #32
 80039a0:	4619      	mov	r1, r3
 80039a2:	4821      	ldr	r0, [pc, #132]	@ (8003a28 <MX_TIM3_Init+0xec>)
 80039a4:	f004 fe6e 	bl	8008684 <HAL_TIMEx_MasterConfigSynchronization>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80039ae:	f000 fa4b 	bl	8003e48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039b2:	2360      	movs	r3, #96	@ 0x60
 80039b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80039b6:	2300      	movs	r3, #0
 80039b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80039be:	2304      	movs	r3, #4
 80039c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2200      	movs	r2, #0
 80039c6:	4619      	mov	r1, r3
 80039c8:	4817      	ldr	r0, [pc, #92]	@ (8003a28 <MX_TIM3_Init+0xec>)
 80039ca:	f004 f999 	bl	8007d00 <HAL_TIM_PWM_ConfigChannel>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 80039d4:	f000 fa38 	bl	8003e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	2204      	movs	r2, #4
 80039dc:	4619      	mov	r1, r3
 80039de:	4812      	ldr	r0, [pc, #72]	@ (8003a28 <MX_TIM3_Init+0xec>)
 80039e0:	f004 f98e 	bl	8007d00 <HAL_TIM_PWM_ConfigChannel>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80039ea:	f000 fa2d 	bl	8003e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	2208      	movs	r2, #8
 80039f2:	4619      	mov	r1, r3
 80039f4:	480c      	ldr	r0, [pc, #48]	@ (8003a28 <MX_TIM3_Init+0xec>)
 80039f6:	f004 f983 	bl	8007d00 <HAL_TIM_PWM_ConfigChannel>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM3_Init+0xc8>
  {
    Error_Handler();
 8003a00:	f000 fa22 	bl	8003e48 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a04:	1d3b      	adds	r3, r7, #4
 8003a06:	220c      	movs	r2, #12
 8003a08:	4619      	mov	r1, r3
 8003a0a:	4807      	ldr	r0, [pc, #28]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003a0c:	f004 f978 	bl	8007d00 <HAL_TIM_PWM_ConfigChannel>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8003a16:	f000 fa17 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a1a:	4803      	ldr	r0, [pc, #12]	@ (8003a28 <MX_TIM3_Init+0xec>)
 8003a1c:	f000 fc26 	bl	800426c <HAL_TIM_MspPostInit>

}
 8003a20:	bf00      	nop
 8003a22:	3728      	adds	r7, #40	@ 0x28
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000778 	.word	0x20000778
 8003a2c:	40000400 	.word	0x40000400

08003a30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a36:	f107 0308 	add.w	r3, r7, #8
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	605a      	str	r2, [r3, #4]
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a44:	463b      	mov	r3, r7
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
 8003a4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ac8 <MX_TIM4_Init+0x98>)
 8003a50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8399;
 8003a52:	4b1c      	ldr	r3, [pc, #112]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a54:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8003a58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1249;
 8003a60:	4b18      	ldr	r3, [pc, #96]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a62:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8003a66:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a68:	4b16      	ldr	r3, [pc, #88]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003a74:	4813      	ldr	r0, [pc, #76]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a76:	f003 fdfc 	bl	8007672 <HAL_TIM_Base_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8003a80:	f000 f9e2 	bl	8003e48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003a8a:	f107 0308 	add.w	r3, r7, #8
 8003a8e:	4619      	mov	r1, r3
 8003a90:	480c      	ldr	r0, [pc, #48]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003a92:	f004 f9f7 	bl	8007e84 <HAL_TIM_ConfigClockSource>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8003a9c:	f000 f9d4 	bl	8003e48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4805      	ldr	r0, [pc, #20]	@ (8003ac4 <MX_TIM4_Init+0x94>)
 8003aae:	f004 fde9 	bl	8008684 <HAL_TIMEx_MasterConfigSynchronization>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d001      	beq.n	8003abc <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8003ab8:	f000 f9c6 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003abc:	bf00      	nop
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	200007c0 	.word	0x200007c0
 8003ac8:	40000800 	.word	0x40000800

08003acc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ad0:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <MX_USART2_UART_Init+0x50>)
 8003ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003ad6:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ad8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ade:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003aea:	4b0b      	ldr	r3, [pc, #44]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003af0:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003af2:	220c      	movs	r2, #12
 8003af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003af6:	4b08      	ldr	r3, [pc, #32]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003afc:	4b06      	ldr	r3, [pc, #24]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b02:	4805      	ldr	r0, [pc, #20]	@ (8003b18 <MX_USART2_UART_Init+0x4c>)
 8003b04:	f004 fe4e 	bl	80087a4 <HAL_UART_Init>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003b0e:	f000 f99b 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b12:	bf00      	nop
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	bf00      	nop
 8003b18:	20000808 	.word	0x20000808
 8003b1c:	40004400 	.word	0x40004400

08003b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003b24:	4b11      	ldr	r3, [pc, #68]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b26:	4a12      	ldr	r2, [pc, #72]	@ (8003b70 <MX_USART3_UART_Init+0x50>)
 8003b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003b2a:	4b10      	ldr	r3, [pc, #64]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b2c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003b44:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b46:	220c      	movs	r2, #12
 8003b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003b56:	4805      	ldr	r0, [pc, #20]	@ (8003b6c <MX_USART3_UART_Init+0x4c>)
 8003b58:	f004 fe24 	bl	80087a4 <HAL_UART_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8003b62:	f000 f971 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	2000084c 	.word	0x2000084c
 8003b70:	40004800 	.word	0x40004800

08003b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	607b      	str	r3, [r7, #4]
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <MX_DMA_Init+0x8c>)
 8003b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b82:	4a1f      	ldr	r2, [pc, #124]	@ (8003c00 <MX_DMA_Init+0x8c>)
 8003b84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c00 <MX_DMA_Init+0x8c>)
 8003b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8003b96:	2200      	movs	r2, #0
 8003b98:	2100      	movs	r1, #0
 8003b9a:	200b      	movs	r0, #11
 8003b9c:	f001 f937 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003ba0:	200b      	movs	r0, #11
 8003ba2:	f001 f950 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	2100      	movs	r1, #0
 8003baa:	200c      	movs	r0, #12
 8003bac:	f001 f92f 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003bb0:	200c      	movs	r0, #12
 8003bb2:	f001 f948 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	2100      	movs	r1, #0
 8003bba:	200e      	movs	r0, #14
 8003bbc:	f001 f927 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8003bc0:	200e      	movs	r0, #14
 8003bc2:	f001 f940 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2010      	movs	r0, #16
 8003bcc:	f001 f91f 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003bd0:	2010      	movs	r0, #16
 8003bd2:	f001 f938 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	2011      	movs	r0, #17
 8003bdc:	f001 f917 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003be0:	2011      	movs	r0, #17
 8003be2:	f001 f930 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8003be6:	2200      	movs	r2, #0
 8003be8:	2100      	movs	r1, #0
 8003bea:	202f      	movs	r0, #47	@ 0x2f
 8003bec:	f001 f90f 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003bf0:	202f      	movs	r0, #47	@ 0x2f
 8003bf2:	f001 f928 	bl	8004e46 <HAL_NVIC_EnableIRQ>

}
 8003bf6:	bf00      	nop
 8003bf8:	3708      	adds	r7, #8
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023800 	.word	0x40023800

08003c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08a      	sub	sp, #40	@ 0x28
 8003c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c0a:	f107 0314 	add.w	r3, r7, #20
 8003c0e:	2200      	movs	r2, #0
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	605a      	str	r2, [r3, #4]
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	60da      	str	r2, [r3, #12]
 8003c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	4b38      	ldr	r3, [pc, #224]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c22:	4a37      	ldr	r2, [pc, #220]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2a:	4b35      	ldr	r3, [pc, #212]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c32:	613b      	str	r3, [r7, #16]
 8003c34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c36:	2300      	movs	r3, #0
 8003c38:	60fb      	str	r3, [r7, #12]
 8003c3a:	4b31      	ldr	r3, [pc, #196]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c3e:	4a30      	ldr	r2, [pc, #192]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c46:	4b2e      	ldr	r3, [pc, #184]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]
 8003c56:	4b2a      	ldr	r3, [pc, #168]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c5a:	4a29      	ldr	r2, [pc, #164]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c5c:	f043 0302 	orr.w	r3, r3, #2
 8003c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c62:	4b27      	ldr	r3, [pc, #156]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6e:	2300      	movs	r3, #0
 8003c70:	607b      	str	r3, [r7, #4]
 8003c72:	4b23      	ldr	r3, [pc, #140]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	4a22      	ldr	r2, [pc, #136]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c78:	f043 0308 	orr.w	r3, r3, #8
 8003c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c7e:	4b20      	ldr	r3, [pc, #128]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c82:	f003 0308 	and.w	r3, r3, #8
 8003c86:	607b      	str	r3, [r7, #4]
 8003c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	603b      	str	r3, [r7, #0]
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	4a1b      	ldr	r2, [pc, #108]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c94:	f043 0304 	orr.w	r3, r3, #4
 8003c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c9a:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <MX_GPIO_Init+0xfc>)
 8003c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c9e:	f003 0304 	and.w	r3, r3, #4
 8003ca2:	603b      	str	r3, [r7, #0]
 8003ca4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	2103      	movs	r1, #3
 8003caa:	4816      	ldr	r0, [pc, #88]	@ (8003d04 <MX_GPIO_Init+0x100>)
 8003cac:	f001 ffde 	bl	8005c6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003cb0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003cb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003cb6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc0:	f107 0314 	add.w	r3, r7, #20
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4810      	ldr	r0, [pc, #64]	@ (8003d08 <MX_GPIO_Init+0x104>)
 8003cc8:	f001 fd38 	bl	800573c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cdc:	f107 0314 	add.w	r3, r7, #20
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4808      	ldr	r0, [pc, #32]	@ (8003d04 <MX_GPIO_Init+0x100>)
 8003ce4:	f001 fd2a 	bl	800573c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2100      	movs	r1, #0
 8003cec:	2028      	movs	r0, #40	@ 0x28
 8003cee:	f001 f88e 	bl	8004e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003cf2:	2028      	movs	r0, #40	@ 0x28
 8003cf4:	f001 f8a7 	bl	8004e46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cf8:	bf00      	nop
 8003cfa:	3728      	adds	r7, #40	@ 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020c00 	.word	0x40020c00
 8003d08:	40020400 	.word	0x40020400

08003d0c <Receive_Throttle_Min>:

/* USER CODE BEGIN 4 */
int Receive_Throttle_Min(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
	if(ch[2]<1020) return 1;
 8003d10:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <Receive_Throttle_Min+0x20>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f5b3 7f7f 	cmp.w	r3, #1020	@ 0x3fc
 8003d18:	da01      	bge.n	8003d1e <Receive_Throttle_Min+0x12>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <Receive_Throttle_Min+0x14>
	else return 0;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	200003ec 	.word	0x200003ec

08003d30 <Calib_Gyro>:

void Calib_Gyro(void){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
	for( int i = 0; i < 2000; i++){
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	e03f      	b.n	8003dbc <Calib_Gyro+0x8c>
		if(MPU6050_Read_Data() != HAL_OK)
 8003d3c:	f7fe fa18 	bl	8002170 <MPU6050_Read_Data>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d001      	beq.n	8003d4a <Calib_Gyro+0x1a>
		{
			Reset_MPU6050();
 8003d46:	f000 f86d 	bl	8003e24 <Reset_MPU6050>
		}
		Gyro_X_Calib += Gx;
 8003d4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003e08 <Calib_Gyro+0xd8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	ee07 3a90 	vmov	s15, r3
 8003d52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d56:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <Calib_Gyro+0xdc>)
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d64:	ee17 2a90 	vmov	r2, s15
 8003d68:	4b27      	ldr	r3, [pc, #156]	@ (8003e08 <Calib_Gyro+0xd8>)
 8003d6a:	601a      	str	r2, [r3, #0]
		Gyro_Y_Calib += Gy;
 8003d6c:	4b28      	ldr	r3, [pc, #160]	@ (8003e10 <Calib_Gyro+0xe0>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	ee07 3a90 	vmov	s15, r3
 8003d74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d78:	4b26      	ldr	r3, [pc, #152]	@ (8003e14 <Calib_Gyro+0xe4>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d86:	ee17 2a90 	vmov	r2, s15
 8003d8a:	4b21      	ldr	r3, [pc, #132]	@ (8003e10 <Calib_Gyro+0xe0>)
 8003d8c:	601a      	str	r2, [r3, #0]
		Gyro_Z_Calib += Gz;
 8003d8e:	4b22      	ldr	r3, [pc, #136]	@ (8003e18 <Calib_Gyro+0xe8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	ee07 3a90 	vmov	s15, r3
 8003d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d9a:	4b20      	ldr	r3, [pc, #128]	@ (8003e1c <Calib_Gyro+0xec>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003da4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003da8:	ee17 2a90 	vmov	r2, s15
 8003dac:	4b1a      	ldr	r3, [pc, #104]	@ (8003e18 <Calib_Gyro+0xe8>)
 8003dae:	601a      	str	r2, [r3, #0]
		HAL_Delay(6);
 8003db0:	2006      	movs	r0, #6
 8003db2:	f000 ff2d 	bl	8004c10 <HAL_Delay>
	for( int i = 0; i < 2000; i++){
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	3301      	adds	r3, #1
 8003dba:	607b      	str	r3, [r7, #4]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003dc2:	dbbb      	blt.n	8003d3c <Calib_Gyro+0xc>
	}
	Gyro_X_Calib /= 2000;
 8003dc4:	4b10      	ldr	r3, [pc, #64]	@ (8003e08 <Calib_Gyro+0xd8>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a15      	ldr	r2, [pc, #84]	@ (8003e20 <Calib_Gyro+0xf0>)
 8003dca:	fb82 1203 	smull	r1, r2, r2, r3
 8003dce:	11d2      	asrs	r2, r2, #7
 8003dd0:	17db      	asrs	r3, r3, #31
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	4a0c      	ldr	r2, [pc, #48]	@ (8003e08 <Calib_Gyro+0xd8>)
 8003dd6:	6013      	str	r3, [r2, #0]
	Gyro_Y_Calib /= 2000;
 8003dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8003e10 <Calib_Gyro+0xe0>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a10      	ldr	r2, [pc, #64]	@ (8003e20 <Calib_Gyro+0xf0>)
 8003dde:	fb82 1203 	smull	r1, r2, r2, r3
 8003de2:	11d2      	asrs	r2, r2, #7
 8003de4:	17db      	asrs	r3, r3, #31
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	4a09      	ldr	r2, [pc, #36]	@ (8003e10 <Calib_Gyro+0xe0>)
 8003dea:	6013      	str	r3, [r2, #0]
	Gyro_Z_Calib /= 2000;
 8003dec:	4b0a      	ldr	r3, [pc, #40]	@ (8003e18 <Calib_Gyro+0xe8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a0b      	ldr	r2, [pc, #44]	@ (8003e20 <Calib_Gyro+0xf0>)
 8003df2:	fb82 1203 	smull	r1, r2, r2, r3
 8003df6:	11d2      	asrs	r2, r2, #7
 8003df8:	17db      	asrs	r3, r3, #31
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	4a06      	ldr	r2, [pc, #24]	@ (8003e18 <Calib_Gyro+0xe8>)
 8003dfe:	6013      	str	r3, [r2, #0]
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20000444 	.word	0x20000444
 8003e0c:	20000438 	.word	0x20000438
 8003e10:	20000448 	.word	0x20000448
 8003e14:	2000043c 	.word	0x2000043c
 8003e18:	2000044c 	.word	0x2000044c
 8003e1c:	20000440 	.word	0x20000440
 8003e20:	10624dd3 	.word	0x10624dd3

08003e24 <Reset_MPU6050>:

void Reset_MPU6050(void)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	af00      	add	r7, sp, #0
	HAL_I2C_DeInit(&hi2c1);
 8003e28:	4806      	ldr	r0, [pc, #24]	@ (8003e44 <Reset_MPU6050+0x20>)
 8003e2a:	f002 f895 	bl	8005f58 <HAL_I2C_DeInit>
	HAL_I2C_Init(&hi2c1);
 8003e2e:	4805      	ldr	r0, [pc, #20]	@ (8003e44 <Reset_MPU6050+0x20>)
 8003e30:	f001 ff4e 	bl	8005cd0 <HAL_I2C_Init>
	MX_I2C1_Init();
 8003e34:	f7ff fc54 	bl	80036e0 <MX_I2C1_Init>
	MPU6050_Init();
 8003e38:	f7fe f914 	bl	8002064 <MPU6050_Init>
	MPU6050_Read_Data();
 8003e3c:	f7fe f998 	bl	8002170 <MPU6050_Read_Data>
}
 8003e40:	bf00      	nop
 8003e42:	bd80      	pop	{r7, pc}
 8003e44:	20000528 	.word	0x20000528

08003e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4c:	b672      	cpsid	i
}
 8003e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <Error_Handler+0x8>

08003e54 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
 8003e5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e76:	2300      	movs	r3, #0
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_MspInit+0x4c>)
 8003e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e92:	bf00      	nop
 8003e94:	370c      	adds	r7, #12
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr
 8003e9e:	bf00      	nop
 8003ea0:	40023800 	.word	0x40023800

08003ea4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08c      	sub	sp, #48	@ 0x30
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003eac:	f107 031c 	add.w	r3, r7, #28
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]
 8003eb4:	605a      	str	r2, [r3, #4]
 8003eb6:	609a      	str	r2, [r3, #8]
 8003eb8:	60da      	str	r2, [r3, #12]
 8003eba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a62      	ldr	r2, [pc, #392]	@ (800404c <HAL_I2C_MspInit+0x1a8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	f040 808b 	bne.w	8003fde <HAL_I2C_MspInit+0x13a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
 8003ecc:	4b60      	ldr	r3, [pc, #384]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed0:	4a5f      	ldr	r2, [pc, #380]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003ed2:	f043 0302 	orr.w	r3, r3, #2
 8003ed6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed8:	4b5d      	ldr	r3, [pc, #372]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]
 8003ee2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003ee4:	23c0      	movs	r3, #192	@ 0xc0
 8003ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003ee8:	2312      	movs	r3, #18
 8003eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eec:	2300      	movs	r3, #0
 8003eee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ef4:	2304      	movs	r3, #4
 8003ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef8:	f107 031c 	add.w	r3, r7, #28
 8003efc:	4619      	mov	r1, r3
 8003efe:	4855      	ldr	r0, [pc, #340]	@ (8004054 <HAL_I2C_MspInit+0x1b0>)
 8003f00:	f001 fc1c 	bl	800573c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	4b51      	ldr	r3, [pc, #324]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0c:	4a50      	ldr	r2, [pc, #320]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003f0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f12:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f14:	4b4e      	ldr	r3, [pc, #312]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	697b      	ldr	r3, [r7, #20]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003f20:	4b4d      	ldr	r3, [pc, #308]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f22:	4a4e      	ldr	r2, [pc, #312]	@ (800405c <HAL_I2C_MspInit+0x1b8>)
 8003f24:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8003f26:	4b4c      	ldr	r3, [pc, #304]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f28:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f2c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003f2e:	4b4a      	ldr	r3, [pc, #296]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f30:	2200      	movs	r2, #0
 8003f32:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f34:	4b48      	ldr	r3, [pc, #288]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f36:	2200      	movs	r2, #0
 8003f38:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003f3a:	4b47      	ldr	r3, [pc, #284]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f40:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003f42:	4b45      	ldr	r3, [pc, #276]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003f48:	4b43      	ldr	r3, [pc, #268]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003f4e:	4b42      	ldr	r3, [pc, #264]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003f54:	4b40      	ldr	r3, [pc, #256]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f56:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003f5a:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003f5c:	4b3e      	ldr	r3, [pc, #248]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003f62:	483d      	ldr	r0, [pc, #244]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f64:	f000 ff8a 	bl	8004e7c <HAL_DMA_Init>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003f6e:	f7ff ff6b 	bl	8003e48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	4a38      	ldr	r2, [pc, #224]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f78:	4a37      	ldr	r2, [pc, #220]	@ (8004058 <HAL_I2C_MspInit+0x1b4>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream7;
 8003f7e:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003f80:	4a38      	ldr	r2, [pc, #224]	@ (8004064 <HAL_I2C_MspInit+0x1c0>)
 8003f82:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8003f84:	4b36      	ldr	r3, [pc, #216]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003f86:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f8a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f8c:	4b34      	ldr	r3, [pc, #208]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003f8e:	2240      	movs	r2, #64	@ 0x40
 8003f90:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f92:	4b33      	ldr	r3, [pc, #204]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003f98:	4b31      	ldr	r3, [pc, #196]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003f9a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003f9e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fa8:	2200      	movs	r2, #0
 8003faa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003fac:	4b2c      	ldr	r3, [pc, #176]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fae:	2200      	movs	r2, #0
 8003fb0:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003fb2:	4b2b      	ldr	r3, [pc, #172]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fb4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8003fb8:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003fba:	4b29      	ldr	r3, [pc, #164]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003fc0:	4827      	ldr	r0, [pc, #156]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fc2:	f000 ff5b 	bl	8004e7c <HAL_DMA_Init>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_I2C_MspInit+0x12c>
    {
      Error_Handler();
 8003fcc:	f7ff ff3c 	bl	8003e48 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a23      	ldr	r2, [pc, #140]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8003fd6:	4a22      	ldr	r2, [pc, #136]	@ (8004060 <HAL_I2C_MspInit+0x1bc>)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003fdc:	e031      	b.n	8004042 <HAL_I2C_MspInit+0x19e>
  else if(hi2c->Instance==I2C2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a21      	ldr	r2, [pc, #132]	@ (8004068 <HAL_I2C_MspInit+0x1c4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d12c      	bne.n	8004042 <HAL_I2C_MspInit+0x19e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fe8:	2300      	movs	r3, #0
 8003fea:	613b      	str	r3, [r7, #16]
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	4a17      	ldr	r2, [pc, #92]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003ff2:	f043 0302 	orr.w	r3, r3, #2
 8003ff6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ff8:	4b15      	ldr	r3, [pc, #84]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	613b      	str	r3, [r7, #16]
 8004002:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004004:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800400a:	2312      	movs	r3, #18
 800400c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800400e:	2300      	movs	r3, #0
 8004010:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004012:	2303      	movs	r3, #3
 8004014:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8004016:	2304      	movs	r3, #4
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800401a:	f107 031c 	add.w	r3, r7, #28
 800401e:	4619      	mov	r1, r3
 8004020:	480c      	ldr	r0, [pc, #48]	@ (8004054 <HAL_I2C_MspInit+0x1b0>)
 8004022:	f001 fb8b 	bl	800573c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004026:	2300      	movs	r3, #0
 8004028:	60fb      	str	r3, [r7, #12]
 800402a:	4b09      	ldr	r3, [pc, #36]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	4a08      	ldr	r2, [pc, #32]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8004030:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004034:	6413      	str	r3, [r2, #64]	@ 0x40
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_I2C_MspInit+0x1ac>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800403a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	3730      	adds	r7, #48	@ 0x30
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40005400 	.word	0x40005400
 8004050:	40023800 	.word	0x40023800
 8004054:	40020400 	.word	0x40020400
 8004058:	200005d0 	.word	0x200005d0
 800405c:	40026010 	.word	0x40026010
 8004060:	20000630 	.word	0x20000630
 8004064:	400260b8 	.word	0x400260b8
 8004068:	40005800 	.word	0x40005800

0800406c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1a      	ldr	r2, [pc, #104]	@ (80040e4 <HAL_I2C_MspDeInit+0x78>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d118      	bne.n	80040b0 <HAL_I2C_MspDeInit+0x44>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800407e:	4b1a      	ldr	r3, [pc, #104]	@ (80040e8 <HAL_I2C_MspDeInit+0x7c>)
 8004080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004082:	4a19      	ldr	r2, [pc, #100]	@ (80040e8 <HAL_I2C_MspDeInit+0x7c>)
 8004084:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004088:	6413      	str	r3, [r2, #64]	@ 0x40

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 800408a:	2140      	movs	r1, #64	@ 0x40
 800408c:	4817      	ldr	r0, [pc, #92]	@ (80040ec <HAL_I2C_MspDeInit+0x80>)
 800408e:	f001 fcf1 	bl	8005a74 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8004092:	2180      	movs	r1, #128	@ 0x80
 8004094:	4815      	ldr	r0, [pc, #84]	@ (80040ec <HAL_I2C_MspDeInit+0x80>)
 8004096:	f001 fced 	bl	8005a74 <HAL_GPIO_DeInit>

    /* I2C1 DMA DeInit */
    HAL_DMA_DeInit(hi2c->hdmarx);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 ff9a 	bl	8004fd8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hi2c->hdmatx);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff95 	bl	8004fd8 <HAL_DMA_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80040ae:	e014      	b.n	80040da <HAL_I2C_MspDeInit+0x6e>
  else if(hi2c->Instance==I2C2)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a0e      	ldr	r2, [pc, #56]	@ (80040f0 <HAL_I2C_MspDeInit+0x84>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10f      	bne.n	80040da <HAL_I2C_MspDeInit+0x6e>
    __HAL_RCC_I2C2_CLK_DISABLE();
 80040ba:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <HAL_I2C_MspDeInit+0x7c>)
 80040bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040be:	4a0a      	ldr	r2, [pc, #40]	@ (80040e8 <HAL_I2C_MspDeInit+0x7c>)
 80040c0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80040c4:	6413      	str	r3, [r2, #64]	@ 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80040c6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80040ca:	4808      	ldr	r0, [pc, #32]	@ (80040ec <HAL_I2C_MspDeInit+0x80>)
 80040cc:	f001 fcd2 	bl	8005a74 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80040d0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040d4:	4805      	ldr	r0, [pc, #20]	@ (80040ec <HAL_I2C_MspDeInit+0x80>)
 80040d6:	f001 fccd 	bl	8005a74 <HAL_GPIO_DeInit>
}
 80040da:	bf00      	nop
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40005400 	.word	0x40005400
 80040e8:	40023800 	.word	0x40023800
 80040ec:	40020400 	.word	0x40020400
 80040f0:	40005800 	.word	0x40005800

080040f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b08a      	sub	sp, #40	@ 0x28
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040fc:	f107 0314 	add.w	r3, r7, #20
 8004100:	2200      	movs	r2, #0
 8004102:	601a      	str	r2, [r3, #0]
 8004104:	605a      	str	r2, [r3, #4]
 8004106:	609a      	str	r2, [r3, #8]
 8004108:	60da      	str	r2, [r3, #12]
 800410a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a19      	ldr	r2, [pc, #100]	@ (8004178 <HAL_SPI_MspInit+0x84>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12c      	bne.n	8004170 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004116:	2300      	movs	r3, #0
 8004118:	613b      	str	r3, [r7, #16]
 800411a:	4b18      	ldr	r3, [pc, #96]	@ (800417c <HAL_SPI_MspInit+0x88>)
 800411c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800411e:	4a17      	ldr	r2, [pc, #92]	@ (800417c <HAL_SPI_MspInit+0x88>)
 8004120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004124:	6413      	str	r3, [r2, #64]	@ 0x40
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_SPI_MspInit+0x88>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800412e:	613b      	str	r3, [r7, #16]
 8004130:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004132:	2300      	movs	r3, #0
 8004134:	60fb      	str	r3, [r7, #12]
 8004136:	4b11      	ldr	r3, [pc, #68]	@ (800417c <HAL_SPI_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800413a:	4a10      	ldr	r2, [pc, #64]	@ (800417c <HAL_SPI_MspInit+0x88>)
 800413c:	f043 0304 	orr.w	r3, r3, #4
 8004140:	6313      	str	r3, [r2, #48]	@ 0x30
 8004142:	4b0e      	ldr	r3, [pc, #56]	@ (800417c <HAL_SPI_MspInit+0x88>)
 8004144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800414e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8004152:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004154:	2302      	movs	r3, #2
 8004156:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800415c:	2303      	movs	r3, #3
 800415e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004160:	2306      	movs	r3, #6
 8004162:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004164:	f107 0314 	add.w	r3, r7, #20
 8004168:	4619      	mov	r1, r3
 800416a:	4805      	ldr	r0, [pc, #20]	@ (8004180 <HAL_SPI_MspInit+0x8c>)
 800416c:	f001 fae6 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	@ 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40003c00 	.word	0x40003c00
 800417c:	40023800 	.word	0x40023800
 8004180:	40020800 	.word	0x40020800

08004184 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a22      	ldr	r2, [pc, #136]	@ (800421c <HAL_TIM_Base_MspInit+0x98>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d10e      	bne.n	80041b4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004196:	2300      	movs	r3, #0
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	4b21      	ldr	r3, [pc, #132]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 800419c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419e:	4a20      	ldr	r2, [pc, #128]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80041a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	617b      	str	r3, [r7, #20]
 80041b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80041b2:	e02e      	b.n	8004212 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041bc:	d10e      	bne.n	80041dc <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	613b      	str	r3, [r7, #16]
 80041c2:	4b17      	ldr	r3, [pc, #92]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ce:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	693b      	ldr	r3, [r7, #16]
}
 80041da:	e01a      	b.n	8004212 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM4)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a10      	ldr	r2, [pc, #64]	@ (8004224 <HAL_TIM_Base_MspInit+0xa0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d115      	bne.n	8004212 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041e6:	2300      	movs	r3, #0
 80041e8:	60fb      	str	r3, [r7, #12]
 80041ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041f0:	f043 0304 	orr.w	r3, r3, #4
 80041f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80041f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004220 <HAL_TIM_Base_MspInit+0x9c>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004202:	2200      	movs	r2, #0
 8004204:	2100      	movs	r1, #0
 8004206:	201e      	movs	r0, #30
 8004208:	f000 fe01 	bl	8004e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800420c:	201e      	movs	r0, #30
 800420e:	f000 fe1a 	bl	8004e46 <HAL_NVIC_EnableIRQ>
}
 8004212:	bf00      	nop
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40023800 	.word	0x40023800
 8004224:	40000800 	.word	0x40000800

08004228 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a0b      	ldr	r2, [pc, #44]	@ (8004264 <HAL_TIM_PWM_MspInit+0x3c>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d10d      	bne.n	8004256 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	4b0a      	ldr	r3, [pc, #40]	@ (8004268 <HAL_TIM_PWM_MspInit+0x40>)
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	4a09      	ldr	r2, [pc, #36]	@ (8004268 <HAL_TIM_PWM_MspInit+0x40>)
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	6413      	str	r3, [r2, #64]	@ 0x40
 800424a:	4b07      	ldr	r3, [pc, #28]	@ (8004268 <HAL_TIM_PWM_MspInit+0x40>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004256:	bf00      	nop
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	40000400 	.word	0x40000400
 8004268:	40023800 	.word	0x40023800

0800426c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	@ 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004274:	f107 0314 	add.w	r3, r7, #20
 8004278:	2200      	movs	r2, #0
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	605a      	str	r2, [r3, #4]
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	60da      	str	r2, [r3, #12]
 8004282:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a21      	ldr	r2, [pc, #132]	@ (8004310 <HAL_TIM_MspPostInit+0xa4>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d13b      	bne.n	8004306 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800428e:	2300      	movs	r3, #0
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	4b20      	ldr	r3, [pc, #128]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 8004294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004296:	4a1f      	ldr	r2, [pc, #124]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 8004298:	f043 0301 	orr.w	r3, r3, #1
 800429c:	6313      	str	r3, [r2, #48]	@ 0x30
 800429e:	4b1d      	ldr	r3, [pc, #116]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 80042a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	613b      	str	r3, [r7, #16]
 80042a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042aa:	2300      	movs	r3, #0
 80042ac:	60fb      	str	r3, [r7, #12]
 80042ae:	4b19      	ldr	r3, [pc, #100]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	4a18      	ldr	r2, [pc, #96]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 80042b4:	f043 0302 	orr.w	r3, r3, #2
 80042b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ba:	4b16      	ldr	r3, [pc, #88]	@ (8004314 <HAL_TIM_MspPostInit+0xa8>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	60fb      	str	r3, [r7, #12]
 80042c4:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042c6:	23c0      	movs	r3, #192	@ 0xc0
 80042c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ca:	2302      	movs	r3, #2
 80042cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ce:	2300      	movs	r3, #0
 80042d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042d2:	2300      	movs	r3, #0
 80042d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042d6:	2302      	movs	r3, #2
 80042d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042da:	f107 0314 	add.w	r3, r7, #20
 80042de:	4619      	mov	r1, r3
 80042e0:	480d      	ldr	r0, [pc, #52]	@ (8004318 <HAL_TIM_MspPostInit+0xac>)
 80042e2:	f001 fa2b 	bl	800573c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80042e6:	2303      	movs	r3, #3
 80042e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ea:	2302      	movs	r3, #2
 80042ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f2:	2300      	movs	r3, #0
 80042f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042f6:	2302      	movs	r3, #2
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042fa:	f107 0314 	add.w	r3, r7, #20
 80042fe:	4619      	mov	r1, r3
 8004300:	4806      	ldr	r0, [pc, #24]	@ (800431c <HAL_TIM_MspPostInit+0xb0>)
 8004302:	f001 fa1b 	bl	800573c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8004306:	bf00      	nop
 8004308:	3728      	adds	r7, #40	@ 0x28
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	40000400 	.word	0x40000400
 8004314:	40023800 	.word	0x40023800
 8004318:	40020000 	.word	0x40020000
 800431c:	40020400 	.word	0x40020400

08004320 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08c      	sub	sp, #48	@ 0x30
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004328:	f107 031c 	add.w	r3, r7, #28
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
 8004330:	605a      	str	r2, [r3, #4]
 8004332:	609a      	str	r2, [r3, #8]
 8004334:	60da      	str	r2, [r3, #12]
 8004336:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a99      	ldr	r2, [pc, #612]	@ (80045a4 <HAL_UART_MspInit+0x284>)
 800433e:	4293      	cmp	r3, r2
 8004340:	f040 8093 	bne.w	800446a <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	4b97      	ldr	r3, [pc, #604]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 800434a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434c:	4a96      	ldr	r2, [pc, #600]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004352:	6413      	str	r3, [r2, #64]	@ 0x40
 8004354:	4b94      	ldr	r3, [pc, #592]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435c:	61bb      	str	r3, [r7, #24]
 800435e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]
 8004364:	4b90      	ldr	r3, [pc, #576]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004368:	4a8f      	ldr	r2, [pc, #572]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004370:	4b8d      	ldr	r3, [pc, #564]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800437c:	230c      	movs	r3, #12
 800437e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004380:	2302      	movs	r3, #2
 8004382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004384:	2300      	movs	r3, #0
 8004386:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004388:	2303      	movs	r3, #3
 800438a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800438c:	2307      	movs	r3, #7
 800438e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004390:	f107 031c 	add.w	r3, r7, #28
 8004394:	4619      	mov	r1, r3
 8004396:	4885      	ldr	r0, [pc, #532]	@ (80045ac <HAL_UART_MspInit+0x28c>)
 8004398:	f001 f9d0 	bl	800573c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800439c:	4b84      	ldr	r3, [pc, #528]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 800439e:	4a85      	ldr	r2, [pc, #532]	@ (80045b4 <HAL_UART_MspInit+0x294>)
 80043a0:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80043a2:	4b83      	ldr	r3, [pc, #524]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80043a8:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80043aa:	4b81      	ldr	r3, [pc, #516]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b0:	4b7f      	ldr	r3, [pc, #508]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80043b6:	4b7e      	ldr	r3, [pc, #504]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043bc:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043be:	4b7c      	ldr	r3, [pc, #496]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043c0:	2200      	movs	r2, #0
 80043c2:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043c4:	4b7a      	ldr	r3, [pc, #488]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80043ca:	4b79      	ldr	r3, [pc, #484]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043cc:	2200      	movs	r2, #0
 80043ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80043d0:	4b77      	ldr	r3, [pc, #476]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043d2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043d6:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043d8:	4b75      	ldr	r3, [pc, #468]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043da:	2200      	movs	r2, #0
 80043dc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80043de:	4874      	ldr	r0, [pc, #464]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043e0:	f000 fd4c 	bl	8004e7c <HAL_DMA_Init>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80043ea:	f7ff fd2d 	bl	8003e48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a6f      	ldr	r2, [pc, #444]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80043f4:	4a6e      	ldr	r2, [pc, #440]	@ (80045b0 <HAL_UART_MspInit+0x290>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80043fa:	4b6f      	ldr	r3, [pc, #444]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 80043fc:	4a6f      	ldr	r2, [pc, #444]	@ (80045bc <HAL_UART_MspInit+0x29c>)
 80043fe:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004400:	4b6d      	ldr	r3, [pc, #436]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004402:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004406:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004408:	4b6b      	ldr	r3, [pc, #428]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 800440a:	2240      	movs	r2, #64	@ 0x40
 800440c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800440e:	4b6a      	ldr	r3, [pc, #424]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004410:	2200      	movs	r2, #0
 8004412:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004414:	4b68      	ldr	r3, [pc, #416]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004416:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800441a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800441c:	4b66      	ldr	r3, [pc, #408]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 800441e:	2200      	movs	r2, #0
 8004420:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004422:	4b65      	ldr	r3, [pc, #404]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004424:	2200      	movs	r2, #0
 8004426:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004428:	4b63      	ldr	r3, [pc, #396]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 800442a:	2200      	movs	r2, #0
 800442c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800442e:	4b62      	ldr	r3, [pc, #392]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004430:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004434:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004436:	4b60      	ldr	r3, [pc, #384]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004438:	2200      	movs	r2, #0
 800443a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800443c:	485e      	ldr	r0, [pc, #376]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 800443e:	f000 fd1d 	bl	8004e7c <HAL_DMA_Init>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8004448:	f7ff fcfe 	bl	8003e48 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a5a      	ldr	r2, [pc, #360]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004450:	635a      	str	r2, [r3, #52]	@ 0x34
 8004452:	4a59      	ldr	r2, [pc, #356]	@ (80045b8 <HAL_UART_MspInit+0x298>)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2100      	movs	r1, #0
 800445c:	2026      	movs	r0, #38	@ 0x26
 800445e:	f000 fcd6 	bl	8004e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004462:	2026      	movs	r0, #38	@ 0x26
 8004464:	f000 fcef 	bl	8004e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004468:	e097      	b.n	800459a <HAL_UART_MspInit+0x27a>
  else if(huart->Instance==USART3)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a54      	ldr	r2, [pc, #336]	@ (80045c0 <HAL_UART_MspInit+0x2a0>)
 8004470:	4293      	cmp	r3, r2
 8004472:	f040 8092 	bne.w	800459a <HAL_UART_MspInit+0x27a>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004476:	2300      	movs	r3, #0
 8004478:	613b      	str	r3, [r7, #16]
 800447a:	4b4b      	ldr	r3, [pc, #300]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	4a4a      	ldr	r2, [pc, #296]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004480:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004484:	6413      	str	r3, [r2, #64]	@ 0x40
 8004486:	4b48      	ldr	r3, [pc, #288]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	4b44      	ldr	r3, [pc, #272]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800449a:	4a43      	ldr	r2, [pc, #268]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 800449c:	f043 0308 	orr.w	r3, r3, #8
 80044a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80044a2:	4b41      	ldr	r3, [pc, #260]	@ (80045a8 <HAL_UART_MspInit+0x288>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80044ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80044b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b4:	2302      	movs	r3, #2
 80044b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044bc:	2303      	movs	r3, #3
 80044be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044c0:	2307      	movs	r3, #7
 80044c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80044c4:	f107 031c 	add.w	r3, r7, #28
 80044c8:	4619      	mov	r1, r3
 80044ca:	483e      	ldr	r0, [pc, #248]	@ (80045c4 <HAL_UART_MspInit+0x2a4>)
 80044cc:	f001 f936 	bl	800573c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80044d0:	4b3d      	ldr	r3, [pc, #244]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044d2:	4a3e      	ldr	r2, [pc, #248]	@ (80045cc <HAL_UART_MspInit+0x2ac>)
 80044d4:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80044d6:	4b3c      	ldr	r3, [pc, #240]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044d8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80044dc:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044de:	4b3a      	ldr	r3, [pc, #232]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044e0:	2200      	movs	r2, #0
 80044e2:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044e4:	4b38      	ldr	r3, [pc, #224]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044ea:	4b37      	ldr	r3, [pc, #220]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80044f0:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044f2:	4b35      	ldr	r3, [pc, #212]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044f8:	4b33      	ldr	r3, [pc, #204]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80044fe:	4b32      	ldr	r3, [pc, #200]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 8004500:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004504:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004506:	4b30      	ldr	r3, [pc, #192]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 8004508:	2200      	movs	r2, #0
 800450a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800450c:	4b2e      	ldr	r3, [pc, #184]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 800450e:	2200      	movs	r2, #0
 8004510:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004512:	482d      	ldr	r0, [pc, #180]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 8004514:	f000 fcb2 	bl	8004e7c <HAL_DMA_Init>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <HAL_UART_MspInit+0x202>
      Error_Handler();
 800451e:	f7ff fc93 	bl	8003e48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a28      	ldr	r2, [pc, #160]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 8004526:	639a      	str	r2, [r3, #56]	@ 0x38
 8004528:	4a27      	ldr	r2, [pc, #156]	@ (80045c8 <HAL_UART_MspInit+0x2a8>)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800452e:	4b28      	ldr	r3, [pc, #160]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004530:	4a28      	ldr	r2, [pc, #160]	@ (80045d4 <HAL_UART_MspInit+0x2b4>)
 8004532:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8004534:	4b26      	ldr	r3, [pc, #152]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004536:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800453a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800453c:	4b24      	ldr	r3, [pc, #144]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 800453e:	2240      	movs	r2, #64	@ 0x40
 8004540:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004542:	4b23      	ldr	r3, [pc, #140]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004544:	2200      	movs	r2, #0
 8004546:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004548:	4b21      	ldr	r3, [pc, #132]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 800454a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800454e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004550:	4b1f      	ldr	r3, [pc, #124]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004552:	2200      	movs	r2, #0
 8004554:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004556:	4b1e      	ldr	r3, [pc, #120]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004558:	2200      	movs	r2, #0
 800455a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800455c:	4b1c      	ldr	r3, [pc, #112]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 800455e:	2200      	movs	r2, #0
 8004560:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004564:	2200      	movs	r2, #0
 8004566:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004568:	4b19      	ldr	r3, [pc, #100]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 800456a:	2200      	movs	r2, #0
 800456c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800456e:	4818      	ldr	r0, [pc, #96]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004570:	f000 fc84 	bl	8004e7c <HAL_DMA_Init>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <HAL_UART_MspInit+0x25e>
      Error_Handler();
 800457a:	f7ff fc65 	bl	8003e48 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4a13      	ldr	r2, [pc, #76]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004582:	635a      	str	r2, [r3, #52]	@ 0x34
 8004584:	4a12      	ldr	r2, [pc, #72]	@ (80045d0 <HAL_UART_MspInit+0x2b0>)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 800458a:	2200      	movs	r2, #0
 800458c:	2101      	movs	r1, #1
 800458e:	2027      	movs	r0, #39	@ 0x27
 8004590:	f000 fc3d 	bl	8004e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004594:	2027      	movs	r0, #39	@ 0x27
 8004596:	f000 fc56 	bl	8004e46 <HAL_NVIC_EnableIRQ>
}
 800459a:	bf00      	nop
 800459c:	3730      	adds	r7, #48	@ 0x30
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40004400 	.word	0x40004400
 80045a8:	40023800 	.word	0x40023800
 80045ac:	40020000 	.word	0x40020000
 80045b0:	20000890 	.word	0x20000890
 80045b4:	40026088 	.word	0x40026088
 80045b8:	200008f0 	.word	0x200008f0
 80045bc:	400260a0 	.word	0x400260a0
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40020c00 	.word	0x40020c00
 80045c8:	20000950 	.word	0x20000950
 80045cc:	40026028 	.word	0x40026028
 80045d0:	200009b0 	.word	0x200009b0
 80045d4:	40026058 	.word	0x40026058

080045d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80045dc:	bf00      	nop
 80045de:	e7fd      	b.n	80045dc <NMI_Handler+0x4>

080045e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045e0:	b480      	push	{r7}
 80045e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045e4:	bf00      	nop
 80045e6:	e7fd      	b.n	80045e4 <HardFault_Handler+0x4>

080045e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045e8:	b480      	push	{r7}
 80045ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <MemManage_Handler+0x4>

080045f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045f4:	bf00      	nop
 80045f6:	e7fd      	b.n	80045f4 <BusFault_Handler+0x4>

080045f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045fc:	bf00      	nop
 80045fe:	e7fd      	b.n	80045fc <UsageFault_Handler+0x4>

08004600 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004604:	bf00      	nop
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004620:	bf00      	nop
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800462a:	b580      	push	{r7, lr}
 800462c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800462e:	f000 facf 	bl	8004bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004632:	bf00      	nop
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800463c:	4802      	ldr	r0, [pc, #8]	@ (8004648 <DMA1_Stream0_IRQHandler+0x10>)
 800463e:	f000 fe13 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	200005d0 	.word	0x200005d0

0800464c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004650:	4802      	ldr	r0, [pc, #8]	@ (800465c <DMA1_Stream1_IRQHandler+0x10>)
 8004652:	f000 fe09 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004656:	bf00      	nop
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000950 	.word	0x20000950

08004660 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8004664:	4802      	ldr	r0, [pc, #8]	@ (8004670 <DMA1_Stream3_IRQHandler+0x10>)
 8004666:	f000 fdff 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800466a:	bf00      	nop
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	200009b0 	.word	0x200009b0

08004674 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004678:	4802      	ldr	r0, [pc, #8]	@ (8004684 <DMA1_Stream5_IRQHandler+0x10>)
 800467a:	f000 fdf5 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800467e:	bf00      	nop
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	20000890 	.word	0x20000890

08004688 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800468c:	4802      	ldr	r0, [pc, #8]	@ (8004698 <DMA1_Stream6_IRQHandler+0x10>)
 800468e:	f000 fdeb 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004692:	bf00      	nop
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200008f0 	.word	0x200008f0

0800469c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80046a0:	4802      	ldr	r0, [pc, #8]	@ (80046ac <TIM4_IRQHandler+0x10>)
 80046a2:	f003 fa25 	bl	8007af0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200007c0 	.word	0x200007c0

080046b0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80046b4:	4802      	ldr	r0, [pc, #8]	@ (80046c0 <USART2_IRQHandler+0x10>)
 80046b6:	f004 f9d7 	bl	8008a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80046ba:	bf00      	nop
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000808 	.word	0x20000808

080046c4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80046c8:	4802      	ldr	r0, [pc, #8]	@ (80046d4 <USART3_IRQHandler+0x10>)
 80046ca:	f004 f9cd 	bl	8008a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80046ce:	bf00      	nop
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	2000084c 	.word	0x2000084c

080046d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80046dc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80046e0:	f001 fade 	bl	8005ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80046e4:	bf00      	nop
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80046ec:	4802      	ldr	r0, [pc, #8]	@ (80046f8 <DMA1_Stream7_IRQHandler+0x10>)
 80046ee:	f000 fdbb 	bl	8005268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80046f2:	bf00      	nop
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000630 	.word	0x20000630

080046fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80046fc:	b480      	push	{r7}
 80046fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004700:	4b06      	ldr	r3, [pc, #24]	@ (800471c <SystemInit+0x20>)
 8004702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004706:	4a05      	ldr	r2, [pc, #20]	@ (800471c <SystemInit+0x20>)
 8004708:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800470c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004710:	bf00      	nop
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	e000ed00 	.word	0xe000ed00

08004720 <twiSend>:

#include "stm32f4xx_hal.h"
#include "wire.h"
#include "DelayUs.h"
void twiSend(uint8_t address, uint8_t command, uint8_t length)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	4603      	mov	r3, r0
 8004728:	71fb      	strb	r3, [r7, #7]
 800472a:	460b      	mov	r3, r1
 800472c:	71bb      	strb	r3, [r7, #6]
 800472e:	4613      	mov	r3, r2
 8004730:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_START; //START condition
 8004732:	4b22      	ldr	r3, [pc, #136]	@ (80047bc <twiSend+0x9c>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a21      	ldr	r2, [pc, #132]	@ (80047bc <twiSend+0x9c>)
 8004738:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800473c:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 800473e:	bf00      	nop
 8004740:	4b1e      	ldr	r3, [pc, #120]	@ (80047bc <twiSend+0x9c>)
 8004742:	695b      	ldr	r3, [r3, #20]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b00      	cmp	r3, #0
 800474a:	d0f9      	beq.n	8004740 <twiSend+0x20>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 800474c:	79fb      	ldrb	r3, [r7, #7]
 800474e:	4a1b      	ldr	r2, [pc, #108]	@ (80047bc <twiSend+0x9c>)
 8004750:	005b      	lsls	r3, r3, #1
 8004752:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 8004754:	bf00      	nop
 8004756:	4b19      	ldr	r3, [pc, #100]	@ (80047bc <twiSend+0x9c>)
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	2b00      	cmp	r3, #0
 8004760:	bf0c      	ite	eq
 8004762:	2301      	moveq	r3, #1
 8004764:	2300      	movne	r3, #0
 8004766:	b2da      	uxtb	r2, r3
 8004768:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <twiSend+0x9c>)
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	2b00      	cmp	r3, #0
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	4313      	orrs	r3, r2
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1eb      	bne.n	8004756 <twiSend+0x36>
    I2C2->DR=command; //filling data register with byte, if single - command, multiple - command(s) and data
 800477e:	4a0f      	ldr	r2, [pc, #60]	@ (80047bc <twiSend+0x9c>)
 8004780:	79bb      	ldrb	r3, [r7, #6]
 8004782:	6113      	str	r3, [r2, #16]
    for (uint8_t i=0;i<length;i++)
 8004784:	2300      	movs	r3, #0
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	e00a      	b.n	80047a0 <twiSend+0x80>
    {
        I2C2->DR=buffer[i]; //filling buffer with command or data
 800478a:	7bfb      	ldrb	r3, [r7, #15]
 800478c:	4a0c      	ldr	r2, [pc, #48]	@ (80047c0 <twiSend+0xa0>)
 800478e:	5cd2      	ldrb	r2, [r2, r3]
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <twiSend+0x9c>)
 8004792:	611a      	str	r2, [r3, #16]
        delay(60);
 8004794:	203c      	movs	r0, #60	@ 0x3c
 8004796:	f7fc fbc9 	bl	8000f2c <delay>
    for (uint8_t i=0;i<length;i++)
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	3301      	adds	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	7bfa      	ldrb	r2, [r7, #15]
 80047a2:	797b      	ldrb	r3, [r7, #5]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3f0      	bcc.n	800478a <twiSend+0x6a>
    }
    I2C2->CR1 |= I2C_CR1_STOP;
 80047a8:	4b04      	ldr	r3, [pc, #16]	@ (80047bc <twiSend+0x9c>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a03      	ldr	r2, [pc, #12]	@ (80047bc <twiSend+0x9c>)
 80047ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047b2:	6013      	str	r3, [r2, #0]
}
 80047b4:	bf00      	nop
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	40005800 	.word	0x40005800
 80047c0:	200001ec 	.word	0x200001ec

080047c4 <twiReceive>:

void twiReceive(uint8_t address, uint8_t command, uint8_t length)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	4603      	mov	r3, r0
 80047cc:	71fb      	strb	r3, [r7, #7]
 80047ce:	460b      	mov	r3, r1
 80047d0:	71bb      	strb	r3, [r7, #6]
 80047d2:	4613      	mov	r3, r2
 80047d4:	717b      	strb	r3, [r7, #5]
    I2C2->CR1 |= I2C_CR1_ACK;
 80047d6:	4b74      	ldr	r3, [pc, #464]	@ (80049a8 <twiReceive+0x1e4>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a73      	ldr	r2, [pc, #460]	@ (80049a8 <twiReceive+0x1e4>)
 80047dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80047e0:	6013      	str	r3, [r2, #0]
  I2C2->CR1 |= I2C_CR1_START; //start pulse
 80047e2:	4b71      	ldr	r3, [pc, #452]	@ (80049a8 <twiReceive+0x1e4>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a70      	ldr	r2, [pc, #448]	@ (80049a8 <twiReceive+0x1e4>)
 80047e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047ec:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 80047ee:	bf00      	nop
 80047f0:	4b6d      	ldr	r3, [pc, #436]	@ (80049a8 <twiReceive+0x1e4>)
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f9      	beq.n	80047f0 <twiReceive+0x2c>
    I2C2->DR=(address<<1|0); //sending address of the device, 0 = sending
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	4a6a      	ldr	r2, [pc, #424]	@ (80049a8 <twiReceive+0x1e4>)
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	6113      	str	r3, [r2, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2 & I2C_SR2_BUSY));
 8004804:	bf00      	nop
 8004806:	4b68      	ldr	r3, [pc, #416]	@ (80049a8 <twiReceive+0x1e4>)
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b63      	ldr	r3, [pc, #396]	@ (80049a8 <twiReceive+0x1e4>)
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	bf0c      	ite	eq
 8004824:	2301      	moveq	r3, #1
 8004826:	2300      	movne	r3, #0
 8004828:	b2db      	uxtb	r3, r3
 800482a:	4313      	orrs	r3, r2
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b00      	cmp	r3, #0
 8004830:	d1e9      	bne.n	8004806 <twiReceive+0x42>
    I2C2->DR=command; //sending command to the device in order to request data
 8004832:	4a5d      	ldr	r2, [pc, #372]	@ (80049a8 <twiReceive+0x1e4>)
 8004834:	79bb      	ldrb	r3, [r7, #6]
 8004836:	6113      	str	r3, [r2, #16]
    I2C2->CR1 |= I2C_CR1_START; //REPEATED START condition to change from sending address + command to receive data
 8004838:	4b5b      	ldr	r3, [pc, #364]	@ (80049a8 <twiReceive+0x1e4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a5a      	ldr	r2, [pc, #360]	@ (80049a8 <twiReceive+0x1e4>)
 800483e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004842:	6013      	str	r3, [r2, #0]
    while(!(I2C2->SR1 & I2C_SR1_SB));
 8004844:	bf00      	nop
 8004846:	4b58      	ldr	r3, [pc, #352]	@ (80049a8 <twiReceive+0x1e4>)
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b00      	cmp	r3, #0
 8004850:	d0f9      	beq.n	8004846 <twiReceive+0x82>
    I2C2->DR=(address<<1|1); //sending address of the device, 1 = reading
 8004852:	79fb      	ldrb	r3, [r7, #7]
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	4b53      	ldr	r3, [pc, #332]	@ (80049a8 <twiReceive+0x1e4>)
 800485c:	611a      	str	r2, [r3, #16]
    while(!(I2C2->SR1 & I2C_SR1_ADDR)|!(I2C2->SR2));
 800485e:	bf00      	nop
 8004860:	4b51      	ldr	r3, [pc, #324]	@ (80049a8 <twiReceive+0x1e4>)
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	bf0c      	ite	eq
 800486c:	2301      	moveq	r3, #1
 800486e:	2300      	movne	r3, #0
 8004870:	b2da      	uxtb	r2, r3
 8004872:	4b4d      	ldr	r3, [pc, #308]	@ (80049a8 <twiReceive+0x1e4>)
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	2b00      	cmp	r3, #0
 8004878:	bf0c      	ite	eq
 800487a:	2301      	moveq	r3, #1
 800487c:	2300      	movne	r3, #0
 800487e:	b2db      	uxtb	r3, r3
 8004880:	4313      	orrs	r3, r2
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1eb      	bne.n	8004860 <twiReceive+0x9c>

if (length==1)  //receiving single byte, N=1
 8004888:	797b      	ldrb	r3, [r7, #5]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d123      	bne.n	80048d6 <twiReceive+0x112>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 800488e:	bf00      	nop
 8004890:	4b45      	ldr	r3, [pc, #276]	@ (80049a8 <twiReceive+0x1e4>)
 8004892:	695b      	ldr	r3, [r3, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	bf0c      	ite	eq
 8004898:	2301      	moveq	r3, #1
 800489a:	2300      	movne	r3, #0
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b42      	ldr	r3, [pc, #264]	@ (80049a8 <twiReceive+0x1e4>)
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	bf0c      	ite	eq
 80048a6:	2301      	moveq	r3, #1
 80048a8:	2300      	movne	r3, #0
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	4313      	orrs	r3, r2
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1ed      	bne.n	8004890 <twiReceive+0xcc>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) to signal it is last byte
 80048b4:	4b3c      	ldr	r3, [pc, #240]	@ (80049a8 <twiReceive+0x1e4>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a3b      	ldr	r2, [pc, #236]	@ (80049a8 <twiReceive+0x1e4>)
 80048ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048be:	6013      	str	r3, [r2, #0]
        I2C2->CR1 |= I2C_CR1_STOP; //issuing STOP condition before (!) reading byte
 80048c0:	4b39      	ldr	r3, [pc, #228]	@ (80049a8 <twiReceive+0x1e4>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a38      	ldr	r2, [pc, #224]	@ (80049a8 <twiReceive+0x1e4>)
 80048c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048ca:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //single byte is read AFTER NAK (!) and STOP condition
 80048cc:	4b36      	ldr	r3, [pc, #216]	@ (80049a8 <twiReceive+0x1e4>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	4b36      	ldr	r3, [pc, #216]	@ (80049ac <twiReceive+0x1e8>)
 80048d4:	701a      	strb	r2, [r3, #0]
    }
    if (length==2) //receiving two bytes, N=2
 80048d6:	797b      	ldrb	r3, [r7, #5]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d13d      	bne.n	8004958 <twiReceive+0x194>
    {
        while(!(I2C2->SR1)|!(I2C2->SR2));
 80048dc:	bf00      	nop
 80048de:	4b32      	ldr	r3, [pc, #200]	@ (80049a8 <twiReceive+0x1e4>)
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	bf0c      	ite	eq
 80048e6:	2301      	moveq	r3, #1
 80048e8:	2300      	movne	r3, #0
 80048ea:	b2da      	uxtb	r2, r3
 80048ec:	4b2e      	ldr	r3, [pc, #184]	@ (80049a8 <twiReceive+0x1e4>)
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bf0c      	ite	eq
 80048f4:	2301      	moveq	r3, #1
 80048f6:	2300      	movne	r3, #0
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	4313      	orrs	r3, r2
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1ed      	bne.n	80048de <twiReceive+0x11a>
        I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004902:	4b29      	ldr	r3, [pc, #164]	@ (80049a8 <twiReceive+0x1e4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a28      	ldr	r2, [pc, #160]	@ (80049a8 <twiReceive+0x1e4>)
 8004908:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800490c:	6013      	str	r3, [r2, #0]
    I2C2->CR1 |= I2C_CR1_STOP;
 800490e:	4b26      	ldr	r3, [pc, #152]	@ (80049a8 <twiReceive+0x1e4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a25      	ldr	r2, [pc, #148]	@ (80049a8 <twiReceive+0x1e4>)
 8004914:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004918:	6013      	str	r3, [r2, #0]
        buffer[0]=I2C2->DR; //reading N-1 byte, next to last byte is in DR, last one still in shift register
 800491a:	4b23      	ldr	r3, [pc, #140]	@ (80049a8 <twiReceive+0x1e4>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	b2da      	uxtb	r2, r3
 8004920:	4b22      	ldr	r3, [pc, #136]	@ (80049ac <twiReceive+0x1e8>)
 8004922:	701a      	strb	r2, [r3, #0]
        while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004924:	bf00      	nop
 8004926:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <twiReceive+0x1e4>)
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf0c      	ite	eq
 8004932:	2301      	moveq	r3, #1
 8004934:	2300      	movne	r3, #0
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b1b      	ldr	r3, [pc, #108]	@ (80049a8 <twiReceive+0x1e4>)
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	4313      	orrs	r3, r2
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1eb      	bne.n	8004926 <twiReceive+0x162>
        buffer[1]=I2C2->DR; //read last N byte now available
 800494e:	4b16      	ldr	r3, [pc, #88]	@ (80049a8 <twiReceive+0x1e4>)
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	b2da      	uxtb	r2, r3
 8004954:	4b15      	ldr	r3, [pc, #84]	@ (80049ac <twiReceive+0x1e8>)
 8004956:	705a      	strb	r2, [r3, #1]
    }
  if (length>2) //receiving more than two bytes, N>2
 8004958:	797b      	ldrb	r3, [r7, #5]
 800495a:	2b02      	cmp	r3, #2
 800495c:	f240 80b1 	bls.w	8004ac2 <twiReceive+0x2fe>
    {

      for (uint8_t i=0;i<length;i++)
 8004960:	2300      	movs	r3, #0
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e0a8      	b.n	8004ab8 <twiReceive+0x2f4>
      {

          if (i<(length-3))      // if it is not N-2, then read all bytes
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	797b      	ldrb	r3, [r7, #5]
 800496a:	3b03      	subs	r3, #3
 800496c:	429a      	cmp	r2, r3
 800496e:	da1f      	bge.n	80049b0 <twiReceive+0x1ec>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004970:	bf00      	nop
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <twiReceive+0x1e4>)
 8004974:	695b      	ldr	r3, [r3, #20]
 8004976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497a:	2b00      	cmp	r3, #0
 800497c:	bf0c      	ite	eq
 800497e:	2301      	moveq	r3, #1
 8004980:	2300      	movne	r3, #0
 8004982:	b2da      	uxtb	r2, r3
 8004984:	4b08      	ldr	r3, [pc, #32]	@ (80049a8 <twiReceive+0x1e4>)
 8004986:	699b      	ldr	r3, [r3, #24]
 8004988:	2b00      	cmp	r3, #0
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	4313      	orrs	r3, r2
 8004994:	b2db      	uxtb	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1eb      	bne.n	8004972 <twiReceive+0x1ae>
                buffer[i]=I2C2->DR;
 800499a:	4b03      	ldr	r3, [pc, #12]	@ (80049a8 <twiReceive+0x1e4>)
 800499c:	691a      	ldr	r2, [r3, #16]
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	b2d1      	uxtb	r1, r2
 80049a2:	4a02      	ldr	r2, [pc, #8]	@ (80049ac <twiReceive+0x1e8>)
 80049a4:	54d1      	strb	r1, [r2, r3]
 80049a6:	e084      	b.n	8004ab2 <twiReceive+0x2ee>
 80049a8:	40005800 	.word	0x40005800
 80049ac:	200001ec 	.word	0x200001ec
            }
          else if (i==length-3) // if it is N-2 then read
 80049b0:	7bfa      	ldrb	r2, [r7, #15]
 80049b2:	797b      	ldrb	r3, [r7, #5]
 80049b4:	3b03      	subs	r3, #3
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d13a      	bne.n	8004a30 <twiReceive+0x26c>
            {
                while(!(I2C2->SR1)|!(I2C2->SR2));
 80049ba:	bf00      	nop
 80049bc:	4b44      	ldr	r3, [pc, #272]	@ (8004ad0 <twiReceive+0x30c>)
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	bf0c      	ite	eq
 80049c4:	2301      	moveq	r3, #1
 80049c6:	2300      	movne	r3, #0
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <twiReceive+0x30c>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	bf0c      	ite	eq
 80049d2:	2301      	moveq	r3, #1
 80049d4:	2300      	movne	r3, #0
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	4313      	orrs	r3, r2
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d1ed      	bne.n	80049bc <twiReceive+0x1f8>
                buffer[i]=I2C2->DR;
 80049e0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ad0 <twiReceive+0x30c>)
 80049e2:	691a      	ldr	r2, [r3, #16]
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
 80049e6:	b2d1      	uxtb	r1, r2
 80049e8:	4a3a      	ldr	r2, [pc, #232]	@ (8004ad4 <twiReceive+0x310>)
 80049ea:	54d1      	strb	r1, [r2, r3]
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 80049ec:	bf00      	nop
 80049ee:	4b38      	ldr	r3, [pc, #224]	@ (8004ad0 <twiReceive+0x30c>)
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	bf0c      	ite	eq
 80049fa:	2301      	moveq	r3, #1
 80049fc:	2300      	movne	r3, #0
 80049fe:	b2da      	uxtb	r2, r3
 8004a00:	4b33      	ldr	r3, [pc, #204]	@ (8004ad0 <twiReceive+0x30c>)
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	bf0c      	ite	eq
 8004a08:	2301      	moveq	r3, #1
 8004a0a:	2300      	movne	r3, #0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1eb      	bne.n	80049ee <twiReceive+0x22a>
                I2C2->CR1 &= ~I2C_CR1_ACK; //this will send later NAK (not acknowledged) before last byte
 8004a16:	4b2e      	ldr	r3, [pc, #184]	@ (8004ad0 <twiReceive+0x30c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <twiReceive+0x30c>)
 8004a1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a20:	6013      	str	r3, [r2, #0]
                I2C2->CR1 |= I2C_CR1_STOP;
 8004a22:	4b2b      	ldr	r3, [pc, #172]	@ (8004ad0 <twiReceive+0x30c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a2a      	ldr	r2, [pc, #168]	@ (8004ad0 <twiReceive+0x30c>)
 8004a28:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004a2c:	6013      	str	r3, [r2, #0]
 8004a2e:	e040      	b.n	8004ab2 <twiReceive+0x2ee>
            }
        else if (i==length-2) // if it is N-1 then read
 8004a30:	7bfa      	ldrb	r2, [r7, #15]
 8004a32:	797b      	ldrb	r3, [r7, #5]
 8004a34:	3b02      	subs	r3, #2
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d11b      	bne.n	8004a72 <twiReceive+0x2ae>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2));
 8004a3a:	bf00      	nop
 8004a3c:	4b24      	ldr	r3, [pc, #144]	@ (8004ad0 <twiReceive+0x30c>)
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	4b20      	ldr	r3, [pc, #128]	@ (8004ad0 <twiReceive+0x30c>)
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf0c      	ite	eq
 8004a56:	2301      	moveq	r3, #1
 8004a58:	2300      	movne	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1eb      	bne.n	8004a3c <twiReceive+0x278>
                buffer[i]=I2C2->DR;
 8004a64:	4b1a      	ldr	r3, [pc, #104]	@ (8004ad0 <twiReceive+0x30c>)
 8004a66:	691a      	ldr	r2, [r3, #16]
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	b2d1      	uxtb	r1, r2
 8004a6c:	4a19      	ldr	r2, [pc, #100]	@ (8004ad4 <twiReceive+0x310>)
 8004a6e:	54d1      	strb	r1, [r2, r3]
 8004a70:	e01f      	b.n	8004ab2 <twiReceive+0x2ee>
            }
            else if (i==length-1) // else it is N byte
 8004a72:	7bfa      	ldrb	r2, [r7, #15]
 8004a74:	797b      	ldrb	r3, [r7, #5]
 8004a76:	3b01      	subs	r3, #1
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d11a      	bne.n	8004ab2 <twiReceive+0x2ee>
            {
                while(!(I2C2->SR1 & I2C_SR1_RXNE)|!(I2C2->SR2)){};
 8004a7c:	bf00      	nop
 8004a7e:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <twiReceive+0x30c>)
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	bf0c      	ite	eq
 8004a8a:	2301      	moveq	r3, #1
 8004a8c:	2300      	movne	r3, #0
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	4b0f      	ldr	r3, [pc, #60]	@ (8004ad0 <twiReceive+0x30c>)
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	b2db      	uxtb	r3, r3
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1eb      	bne.n	8004a7e <twiReceive+0x2ba>
            buffer[i]=I2C2->DR;
 8004aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <twiReceive+0x30c>)
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
 8004aac:	b2d1      	uxtb	r1, r2
 8004aae:	4a09      	ldr	r2, [pc, #36]	@ (8004ad4 <twiReceive+0x310>)
 8004ab0:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i=0;i<length;i++)
 8004ab2:	7bfb      	ldrb	r3, [r7, #15]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	73fb      	strb	r3, [r7, #15]
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	797b      	ldrb	r3, [r7, #5]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	f4ff af52 	bcc.w	8004966 <twiReceive+0x1a2>
            }
    }
 }
}
 8004ac2:	bf00      	nop
 8004ac4:	3714      	adds	r7, #20
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40005800 	.word	0x40005800
 8004ad4:	200001ec 	.word	0x200001ec

08004ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004ad8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004adc:	480d      	ldr	r0, [pc, #52]	@ (8004b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ade:	490e      	ldr	r1, [pc, #56]	@ (8004b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ae0:	4a0e      	ldr	r2, [pc, #56]	@ (8004b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ae4:	e002      	b.n	8004aec <LoopCopyDataInit>

08004ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004aea:	3304      	adds	r3, #4

08004aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004af0:	d3f9      	bcc.n	8004ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004af2:	4a0b      	ldr	r2, [pc, #44]	@ (8004b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004af4:	4c0b      	ldr	r4, [pc, #44]	@ (8004b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004af8:	e001      	b.n	8004afe <LoopFillZerobss>

08004afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004afc:	3204      	adds	r2, #4

08004afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b00:	d3fb      	bcc.n	8004afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b02:	f7ff fdfb 	bl	80046fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b06:	f005 f89b 	bl	8009c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b0a:	f7fd ffd1 	bl	8002ab0 <main>
  bx  lr    
 8004b0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b18:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 8004b1c:	0800b7a8 	.word	0x0800b7a8
  ldr r2, =_sbss
 8004b20:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8004b24:	20000b70 	.word	0x20000b70

08004b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b28:	e7fe      	b.n	8004b28 <ADC_IRQHandler>
	...

08004b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b30:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <HAL_Init+0x40>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a0d      	ldr	r2, [pc, #52]	@ (8004b6c <HAL_Init+0x40>)
 8004b36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_Init+0x40>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a0a      	ldr	r2, [pc, #40]	@ (8004b6c <HAL_Init+0x40>)
 8004b42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b48:	4b08      	ldr	r3, [pc, #32]	@ (8004b6c <HAL_Init+0x40>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4a07      	ldr	r2, [pc, #28]	@ (8004b6c <HAL_Init+0x40>)
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b54:	2003      	movs	r0, #3
 8004b56:	f000 f94f 	bl	8004df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b5a:	200f      	movs	r0, #15
 8004b5c:	f000 f808 	bl	8004b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004b60:	f7ff f978 	bl	8003e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023c00 	.word	0x40023c00

08004b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b78:	4b12      	ldr	r3, [pc, #72]	@ (8004bc4 <HAL_InitTick+0x54>)
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	4b12      	ldr	r3, [pc, #72]	@ (8004bc8 <HAL_InitTick+0x58>)
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	4619      	mov	r1, r3
 8004b82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f000 f967 	bl	8004e62 <HAL_SYSTICK_Config>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e00e      	b.n	8004bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b0f      	cmp	r3, #15
 8004ba2:	d80a      	bhi.n	8004bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8004bac:	f000 f92f 	bl	8004e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bb0:	4a06      	ldr	r2, [pc, #24]	@ (8004bcc <HAL_InitTick+0x5c>)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	e000      	b.n	8004bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3708      	adds	r7, #8
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	20000058 	.word	0x20000058
 8004bc8:	20000060 	.word	0x20000060
 8004bcc:	2000005c 	.word	0x2000005c

08004bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004bd4:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <HAL_IncTick+0x20>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	4b06      	ldr	r3, [pc, #24]	@ (8004bf4 <HAL_IncTick+0x24>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4413      	add	r3, r2
 8004be0:	4a04      	ldr	r2, [pc, #16]	@ (8004bf4 <HAL_IncTick+0x24>)
 8004be2:	6013      	str	r3, [r2, #0]
}
 8004be4:	bf00      	nop
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	20000060 	.word	0x20000060
 8004bf4:	20000a34 	.word	0x20000a34

08004bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8004bfc:	4b03      	ldr	r3, [pc, #12]	@ (8004c0c <HAL_GetTick+0x14>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	20000a34 	.word	0x20000a34

08004c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c18:	f7ff ffee 	bl	8004bf8 <HAL_GetTick>
 8004c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c28:	d005      	beq.n	8004c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c54 <HAL_Delay+0x44>)
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	4413      	add	r3, r2
 8004c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c36:	bf00      	nop
 8004c38:	f7ff ffde 	bl	8004bf8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	429a      	cmp	r2, r3
 8004c46:	d8f7      	bhi.n	8004c38 <HAL_Delay+0x28>
  {
  }
}
 8004c48:	bf00      	nop
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20000060 	.word	0x20000060

08004c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f003 0307 	and.w	r3, r3, #7
 8004c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c68:	4b0c      	ldr	r3, [pc, #48]	@ (8004c9c <__NVIC_SetPriorityGrouping+0x44>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004c74:	4013      	ands	r3, r2
 8004c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004c8a:	4a04      	ldr	r2, [pc, #16]	@ (8004c9c <__NVIC_SetPriorityGrouping+0x44>)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	60d3      	str	r3, [r2, #12]
}
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	e000ed00 	.word	0xe000ed00

08004ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ca4:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ca6:	68db      	ldr	r3, [r3, #12]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	f003 0307 	and.w	r3, r3, #7
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	e000ed00 	.word	0xe000ed00

08004cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b083      	sub	sp, #12
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	db0b      	blt.n	8004ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cce:	79fb      	ldrb	r3, [r7, #7]
 8004cd0:	f003 021f 	and.w	r2, r3, #31
 8004cd4:	4907      	ldr	r1, [pc, #28]	@ (8004cf4 <__NVIC_EnableIRQ+0x38>)
 8004cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004cda:	095b      	lsrs	r3, r3, #5
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fa00 f202 	lsl.w	r2, r0, r2
 8004ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004ce6:	bf00      	nop
 8004ce8:	370c      	adds	r7, #12
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	e000e100 	.word	0xe000e100

08004cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	6039      	str	r1, [r7, #0]
 8004d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	db0a      	blt.n	8004d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	490c      	ldr	r1, [pc, #48]	@ (8004d44 <__NVIC_SetPriority+0x4c>)
 8004d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d16:	0112      	lsls	r2, r2, #4
 8004d18:	b2d2      	uxtb	r2, r2
 8004d1a:	440b      	add	r3, r1
 8004d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d20:	e00a      	b.n	8004d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	b2da      	uxtb	r2, r3
 8004d26:	4908      	ldr	r1, [pc, #32]	@ (8004d48 <__NVIC_SetPriority+0x50>)
 8004d28:	79fb      	ldrb	r3, [r7, #7]
 8004d2a:	f003 030f 	and.w	r3, r3, #15
 8004d2e:	3b04      	subs	r3, #4
 8004d30:	0112      	lsls	r2, r2, #4
 8004d32:	b2d2      	uxtb	r2, r2
 8004d34:	440b      	add	r3, r1
 8004d36:	761a      	strb	r2, [r3, #24]
}
 8004d38:	bf00      	nop
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000e100 	.word	0xe000e100
 8004d48:	e000ed00 	.word	0xe000ed00

08004d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	@ 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 0307 	and.w	r3, r3, #7
 8004d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	f1c3 0307 	rsb	r3, r3, #7
 8004d66:	2b04      	cmp	r3, #4
 8004d68:	bf28      	it	cs
 8004d6a:	2304      	movcs	r3, #4
 8004d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3304      	adds	r3, #4
 8004d72:	2b06      	cmp	r3, #6
 8004d74:	d902      	bls.n	8004d7c <NVIC_EncodePriority+0x30>
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	3b03      	subs	r3, #3
 8004d7a:	e000      	b.n	8004d7e <NVIC_EncodePriority+0x32>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d80:	f04f 32ff 	mov.w	r2, #4294967295
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8a:	43da      	mvns	r2, r3
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	401a      	ands	r2, r3
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d94:	f04f 31ff 	mov.w	r1, #4294967295
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004d9e:	43d9      	mvns	r1, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da4:	4313      	orrs	r3, r2
         );
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3724      	adds	r7, #36	@ 0x24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
	...

08004db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3b01      	subs	r3, #1
 8004dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dc4:	d301      	bcc.n	8004dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e00f      	b.n	8004dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dca:	4a0a      	ldr	r2, [pc, #40]	@ (8004df4 <SysTick_Config+0x40>)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dd2:	210f      	movs	r1, #15
 8004dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd8:	f7ff ff8e 	bl	8004cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <SysTick_Config+0x40>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004de2:	4b04      	ldr	r3, [pc, #16]	@ (8004df4 <SysTick_Config+0x40>)
 8004de4:	2207      	movs	r2, #7
 8004de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3708      	adds	r7, #8
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	e000e010 	.word	0xe000e010

08004df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff ff29 	bl	8004c58 <__NVIC_SetPriorityGrouping>
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b086      	sub	sp, #24
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	4603      	mov	r3, r0
 8004e16:	60b9      	str	r1, [r7, #8]
 8004e18:	607a      	str	r2, [r7, #4]
 8004e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e20:	f7ff ff3e 	bl	8004ca0 <__NVIC_GetPriorityGrouping>
 8004e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	68b9      	ldr	r1, [r7, #8]
 8004e2a:	6978      	ldr	r0, [r7, #20]
 8004e2c:	f7ff ff8e 	bl	8004d4c <NVIC_EncodePriority>
 8004e30:	4602      	mov	r2, r0
 8004e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e36:	4611      	mov	r1, r2
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f7ff ff5d 	bl	8004cf8 <__NVIC_SetPriority>
}
 8004e3e:	bf00      	nop
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}

08004e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e46:	b580      	push	{r7, lr}
 8004e48:	b082      	sub	sp, #8
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff ff31 	bl	8004cbc <__NVIC_EnableIRQ>
}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7ff ffa2 	bl	8004db4 <SysTick_Config>
 8004e70:	4603      	mov	r3, r0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004e84:	2300      	movs	r3, #0
 8004e86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004e88:	f7ff feb6 	bl	8004bf8 <HAL_GetTick>
 8004e8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e099      	b.n	8004fcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2202      	movs	r2, #2
 8004e9c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f022 0201 	bic.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eb8:	e00f      	b.n	8004eda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eba:	f7ff fe9d 	bl	8004bf8 <HAL_GetTick>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	2b05      	cmp	r3, #5
 8004ec6:	d908      	bls.n	8004eda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2203      	movs	r2, #3
 8004ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e078      	b.n	8004fcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1e8      	bne.n	8004eba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ef0:	697a      	ldr	r2, [r7, #20]
 8004ef2:	4b38      	ldr	r3, [pc, #224]	@ (8004fd4 <HAL_DMA_Init+0x158>)
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685a      	ldr	r2, [r3, #4]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d107      	bne.n	8004f44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	697a      	ldr	r2, [r7, #20]
 8004f4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0307 	bic.w	r3, r3, #7
 8004f5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6a:	2b04      	cmp	r3, #4
 8004f6c:	d117      	bne.n	8004f9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb5f 	bl	8005644 <DMA_CheckFifoParam>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d008      	beq.n	8004f9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2240      	movs	r2, #64	@ 0x40
 8004f90:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e016      	b.n	8004fcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fb16 	bl	80055d8 <DMA_CalcBaseAndBitshift>
 8004fac:	4603      	mov	r3, r0
 8004fae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb4:	223f      	movs	r2, #63	@ 0x3f
 8004fb6:	409a      	lsls	r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004fca:	2300      	movs	r3, #0
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3718      	adds	r7, #24
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	f010803f 	.word	0xf010803f

08004fd8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e050      	b.n	800508c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d101      	bne.n	8004ffa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e048      	b.n	800508c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2200      	movs	r2, #0
 8005018:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	2200      	movs	r2, #0
 8005028:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2200      	movs	r2, #0
 8005030:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	2221      	movs	r2, #33	@ 0x21
 8005038:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 facc 	bl	80055d8 <DMA_CalcBaseAndBitshift>
 8005040:	4603      	mov	r3, r0
 8005042:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800506c:	223f      	movs	r2, #63	@ 0x3f
 800506e:	409a      	lsls	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3710      	adds	r7, #16
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}

08005094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_DMA_Start_IT+0x26>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e040      	b.n	800513c <HAL_DMA_Start_IT+0xa8>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80050c8:	b2db      	uxtb	r3, r3
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d12f      	bne.n	800512e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2202      	movs	r2, #2
 80050d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	68b9      	ldr	r1, [r7, #8]
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 fa4a 	bl	800557c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ec:	223f      	movs	r2, #63	@ 0x3f
 80050ee:	409a      	lsls	r2, r3
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0216 	orr.w	r2, r2, #22
 8005102:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f042 0208 	orr.w	r2, r2, #8
 800511a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e005      	b.n	800513a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2200      	movs	r2, #0
 8005132:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005136:	2302      	movs	r3, #2
 8005138:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800513a:	7dfb      	ldrb	r3, [r7, #23]
}
 800513c:	4618      	mov	r0, r3
 800513e:	3718      	adds	r7, #24
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005150:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005152:	f7ff fd51 	bl	8004bf8 <HAL_GetTick>
 8005156:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800515e:	b2db      	uxtb	r3, r3
 8005160:	2b02      	cmp	r3, #2
 8005162:	d008      	beq.n	8005176 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2280      	movs	r2, #128	@ 0x80
 8005168:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e052      	b.n	800521c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0216 	bic.w	r2, r2, #22
 8005184:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005194:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800519a:	2b00      	cmp	r3, #0
 800519c:	d103      	bne.n	80051a6 <HAL_DMA_Abort+0x62>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0208 	bic.w	r2, r2, #8
 80051b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f022 0201 	bic.w	r2, r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051c6:	e013      	b.n	80051f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80051c8:	f7ff fd16 	bl	8004bf8 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b05      	cmp	r3, #5
 80051d4:	d90c      	bls.n	80051f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2220      	movs	r2, #32
 80051da:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2203      	movs	r2, #3
 80051e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e015      	b.n	800521c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1e4      	bne.n	80051c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005202:	223f      	movs	r2, #63	@ 0x3f
 8005204:	409a      	lsls	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800521a:	2300      	movs	r3, #0
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005232:	b2db      	uxtb	r3, r3
 8005234:	2b02      	cmp	r3, #2
 8005236:	d004      	beq.n	8005242 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e00c      	b.n	800525c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2205      	movs	r2, #5
 8005246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0201 	bic.w	r2, r2, #1
 8005258:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005274:	4b8e      	ldr	r3, [pc, #568]	@ (80054b0 <HAL_DMA_IRQHandler+0x248>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a8e      	ldr	r2, [pc, #568]	@ (80054b4 <HAL_DMA_IRQHandler+0x24c>)
 800527a:	fba2 2303 	umull	r2, r3, r2, r3
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005292:	2208      	movs	r2, #8
 8005294:	409a      	lsls	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4013      	ands	r3, r2
 800529a:	2b00      	cmp	r3, #0
 800529c:	d01a      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d013      	beq.n	80052d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f022 0204 	bic.w	r2, r2, #4
 80052ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052c0:	2208      	movs	r2, #8
 80052c2:	409a      	lsls	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052cc:	f043 0201 	orr.w	r2, r3, #1
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052d8:	2201      	movs	r2, #1
 80052da:	409a      	lsls	r2, r3
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	4013      	ands	r3, r2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d012      	beq.n	800530a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052f6:	2201      	movs	r2, #1
 80052f8:	409a      	lsls	r2, r3
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005302:	f043 0202 	orr.w	r2, r3, #2
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530e:	2204      	movs	r2, #4
 8005310:	409a      	lsls	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4013      	ands	r3, r2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d012      	beq.n	8005340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d00b      	beq.n	8005340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532c:	2204      	movs	r2, #4
 800532e:	409a      	lsls	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005338:	f043 0204 	orr.w	r2, r3, #4
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005344:	2210      	movs	r2, #16
 8005346:	409a      	lsls	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4013      	ands	r3, r2
 800534c:	2b00      	cmp	r3, #0
 800534e:	d043      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b00      	cmp	r3, #0
 800535c:	d03c      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005362:	2210      	movs	r2, #16
 8005364:	409a      	lsls	r2, r3
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d018      	beq.n	80053aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d108      	bne.n	8005398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800538a:	2b00      	cmp	r3, #0
 800538c:	d024      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	4798      	blx	r3
 8005396:	e01f      	b.n	80053d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	4798      	blx	r3
 80053a8:	e016      	b.n	80053d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d107      	bne.n	80053c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0208 	bic.w	r2, r2, #8
 80053c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d003      	beq.n	80053d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053dc:	2220      	movs	r2, #32
 80053de:	409a      	lsls	r2, r3
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	4013      	ands	r3, r2
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	f000 808f 	beq.w	8005508 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 0310 	and.w	r3, r3, #16
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 8087 	beq.w	8005508 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053fe:	2220      	movs	r2, #32
 8005400:	409a      	lsls	r2, r3
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b05      	cmp	r3, #5
 8005410:	d136      	bne.n	8005480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0216 	bic.w	r2, r2, #22
 8005420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	2b00      	cmp	r3, #0
 8005438:	d103      	bne.n	8005442 <HAL_DMA_IRQHandler+0x1da>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0208 	bic.w	r2, r2, #8
 8005450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005456:	223f      	movs	r2, #63	@ 0x3f
 8005458:	409a      	lsls	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005472:	2b00      	cmp	r3, #0
 8005474:	d07e      	beq.n	8005574 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	4798      	blx	r3
        }
        return;
 800547e:	e079      	b.n	8005574 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d01d      	beq.n	80054ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10d      	bne.n	80054b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d031      	beq.n	8005508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	4798      	blx	r3
 80054ac:	e02c      	b.n	8005508 <HAL_DMA_IRQHandler+0x2a0>
 80054ae:	bf00      	nop
 80054b0:	20000058 	.word	0x20000058
 80054b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d023      	beq.n	8005508 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	4798      	blx	r3
 80054c8:	e01e      	b.n	8005508 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10f      	bne.n	80054f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	681a      	ldr	r2, [r3, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f022 0210 	bic.w	r2, r2, #16
 80054e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d003      	beq.n	8005508 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800550c:	2b00      	cmp	r3, #0
 800550e:	d032      	beq.n	8005576 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	d022      	beq.n	8005562 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2205      	movs	r2, #5
 8005520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0201 	bic.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	3301      	adds	r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	697a      	ldr	r2, [r7, #20]
 800553c:	429a      	cmp	r2, r3
 800553e:	d307      	bcc.n	8005550 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f2      	bne.n	8005534 <HAL_DMA_IRQHandler+0x2cc>
 800554e:	e000      	b.n	8005552 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005550:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2201      	movs	r2, #1
 8005556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005566:	2b00      	cmp	r3, #0
 8005568:	d005      	beq.n	8005576 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	4798      	blx	r3
 8005572:	e000      	b.n	8005576 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005574:	bf00      	nop
    }
  }
}
 8005576:	3718      	adds	r7, #24
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800557c:	b480      	push	{r7}
 800557e:	b085      	sub	sp, #20
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005598:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	2b40      	cmp	r3, #64	@ 0x40
 80055a8:	d108      	bne.n	80055bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80055ba:	e007      	b.n	80055cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68ba      	ldr	r2, [r7, #8]
 80055c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
}
 80055cc:	bf00      	nop
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3b10      	subs	r3, #16
 80055e8:	4a14      	ldr	r2, [pc, #80]	@ (800563c <DMA_CalcBaseAndBitshift+0x64>)
 80055ea:	fba2 2303 	umull	r2, r3, r2, r3
 80055ee:	091b      	lsrs	r3, r3, #4
 80055f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80055f2:	4a13      	ldr	r2, [pc, #76]	@ (8005640 <DMA_CalcBaseAndBitshift+0x68>)
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	4413      	add	r3, r2
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b03      	cmp	r3, #3
 8005604:	d909      	bls.n	800561a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800560e:	f023 0303 	bic.w	r3, r3, #3
 8005612:	1d1a      	adds	r2, r3, #4
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	659a      	str	r2, [r3, #88]	@ 0x58
 8005618:	e007      	b.n	800562a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	aaaaaaab 	.word	0xaaaaaaab
 8005640:	0800b704 	.word	0x0800b704

08005644 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005644:	b480      	push	{r7}
 8005646:	b085      	sub	sp, #20
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800564c:	2300      	movs	r3, #0
 800564e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d11f      	bne.n	800569e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b03      	cmp	r3, #3
 8005662:	d856      	bhi.n	8005712 <DMA_CheckFifoParam+0xce>
 8005664:	a201      	add	r2, pc, #4	@ (adr r2, 800566c <DMA_CheckFifoParam+0x28>)
 8005666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800566a:	bf00      	nop
 800566c:	0800567d 	.word	0x0800567d
 8005670:	0800568f 	.word	0x0800568f
 8005674:	0800567d 	.word	0x0800567d
 8005678:	08005713 	.word	0x08005713
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005680:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d046      	beq.n	8005716 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800568c:	e043      	b.n	8005716 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005692:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005696:	d140      	bne.n	800571a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800569c:	e03d      	b.n	800571a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80056a6:	d121      	bne.n	80056ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d837      	bhi.n	800571e <DMA_CheckFifoParam+0xda>
 80056ae:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <DMA_CheckFifoParam+0x70>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	080056cb 	.word	0x080056cb
 80056bc:	080056c5 	.word	0x080056c5
 80056c0:	080056dd 	.word	0x080056dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
      break;
 80056c8:	e030      	b.n	800572c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d025      	beq.n	8005722 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056da:	e022      	b.n	8005722 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056e0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80056e4:	d11f      	bne.n	8005726 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80056ea:	e01c      	b.n	8005726 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d903      	bls.n	80056fa <DMA_CheckFifoParam+0xb6>
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2b03      	cmp	r3, #3
 80056f6:	d003      	beq.n	8005700 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80056f8:	e018      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	73fb      	strb	r3, [r7, #15]
      break;
 80056fe:	e015      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005704:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00e      	beq.n	800572a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	73fb      	strb	r3, [r7, #15]
      break;
 8005710:	e00b      	b.n	800572a <DMA_CheckFifoParam+0xe6>
      break;
 8005712:	bf00      	nop
 8005714:	e00a      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 8005716:	bf00      	nop
 8005718:	e008      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800571a:	bf00      	nop
 800571c:	e006      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800571e:	bf00      	nop
 8005720:	e004      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 8005722:	bf00      	nop
 8005724:	e002      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;   
 8005726:	bf00      	nop
 8005728:	e000      	b.n	800572c <DMA_CheckFifoParam+0xe8>
      break;
 800572a:	bf00      	nop
    }
  } 
  
  return status; 
 800572c:	7bfb      	ldrb	r3, [r7, #15]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3714      	adds	r7, #20
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop

0800573c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800573c:	b480      	push	{r7}
 800573e:	b089      	sub	sp, #36	@ 0x24
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800574a:	2300      	movs	r3, #0
 800574c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800574e:	2300      	movs	r3, #0
 8005750:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	e16b      	b.n	8005a30 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005758:	2201      	movs	r2, #1
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	fa02 f303 	lsl.w	r3, r2, r3
 8005760:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	697a      	ldr	r2, [r7, #20]
 8005768:	4013      	ands	r3, r2
 800576a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	429a      	cmp	r2, r3
 8005772:	f040 815a 	bne.w	8005a2a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	f003 0303 	and.w	r3, r3, #3
 800577e:	2b01      	cmp	r3, #1
 8005780:	d005      	beq.n	800578e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800578a:	2b02      	cmp	r3, #2
 800578c:	d130      	bne.n	80057f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	005b      	lsls	r3, r3, #1
 8005798:	2203      	movs	r2, #3
 800579a:	fa02 f303 	lsl.w	r3, r2, r3
 800579e:	43db      	mvns	r3, r3
 80057a0:	69ba      	ldr	r2, [r7, #24]
 80057a2:	4013      	ands	r3, r2
 80057a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	005b      	lsls	r3, r3, #1
 80057ae:	fa02 f303 	lsl.w	r3, r2, r3
 80057b2:	69ba      	ldr	r2, [r7, #24]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80057c4:	2201      	movs	r2, #1
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	fa02 f303 	lsl.w	r3, r2, r3
 80057cc:	43db      	mvns	r3, r3
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	4013      	ands	r3, r2
 80057d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	091b      	lsrs	r3, r3, #4
 80057da:	f003 0201 	and.w	r2, r3, #1
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	fa02 f303 	lsl.w	r3, r2, r3
 80057e4:	69ba      	ldr	r2, [r7, #24]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 0303 	and.w	r3, r3, #3
 80057f8:	2b03      	cmp	r3, #3
 80057fa:	d017      	beq.n	800582c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	005b      	lsls	r3, r3, #1
 8005806:	2203      	movs	r2, #3
 8005808:	fa02 f303 	lsl.w	r3, r2, r3
 800580c:	43db      	mvns	r3, r3
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	4013      	ands	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	005b      	lsls	r3, r3, #1
 800581c:	fa02 f303 	lsl.w	r3, r2, r3
 8005820:	69ba      	ldr	r2, [r7, #24]
 8005822:	4313      	orrs	r3, r2
 8005824:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	69ba      	ldr	r2, [r7, #24]
 800582a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d123      	bne.n	8005880 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	08da      	lsrs	r2, r3, #3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3208      	adds	r2, #8
 8005840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005844:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	220f      	movs	r2, #15
 8005850:	fa02 f303 	lsl.w	r3, r2, r3
 8005854:	43db      	mvns	r3, r3
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4013      	ands	r3, r2
 800585a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	fa02 f303 	lsl.w	r3, r2, r3
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4313      	orrs	r3, r2
 8005870:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	08da      	lsrs	r2, r3, #3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	3208      	adds	r2, #8
 800587a:	69b9      	ldr	r1, [r7, #24]
 800587c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	2203      	movs	r2, #3
 800588c:	fa02 f303 	lsl.w	r3, r2, r3
 8005890:	43db      	mvns	r3, r3
 8005892:	69ba      	ldr	r2, [r7, #24]
 8005894:	4013      	ands	r3, r2
 8005896:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	f003 0203 	and.w	r2, r3, #3
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69ba      	ldr	r2, [r7, #24]
 80058b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 80b4 	beq.w	8005a2a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b60      	ldr	r3, [pc, #384]	@ (8005a48 <HAL_GPIO_Init+0x30c>)
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	4a5f      	ldr	r2, [pc, #380]	@ (8005a48 <HAL_GPIO_Init+0x30c>)
 80058cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80058d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80058d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005a48 <HAL_GPIO_Init+0x30c>)
 80058d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80058de:	4a5b      	ldr	r2, [pc, #364]	@ (8005a4c <HAL_GPIO_Init+0x310>)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	089b      	lsrs	r3, r3, #2
 80058e4:	3302      	adds	r3, #2
 80058e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	220f      	movs	r2, #15
 80058f6:	fa02 f303 	lsl.w	r3, r2, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	4013      	ands	r3, r2
 8005900:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a52      	ldr	r2, [pc, #328]	@ (8005a50 <HAL_GPIO_Init+0x314>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d02b      	beq.n	8005962 <HAL_GPIO_Init+0x226>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a51      	ldr	r2, [pc, #324]	@ (8005a54 <HAL_GPIO_Init+0x318>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d025      	beq.n	800595e <HAL_GPIO_Init+0x222>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a50      	ldr	r2, [pc, #320]	@ (8005a58 <HAL_GPIO_Init+0x31c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d01f      	beq.n	800595a <HAL_GPIO_Init+0x21e>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a5c <HAL_GPIO_Init+0x320>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d019      	beq.n	8005956 <HAL_GPIO_Init+0x21a>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a4e      	ldr	r2, [pc, #312]	@ (8005a60 <HAL_GPIO_Init+0x324>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d013      	beq.n	8005952 <HAL_GPIO_Init+0x216>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a4d      	ldr	r2, [pc, #308]	@ (8005a64 <HAL_GPIO_Init+0x328>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00d      	beq.n	800594e <HAL_GPIO_Init+0x212>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a4c      	ldr	r2, [pc, #304]	@ (8005a68 <HAL_GPIO_Init+0x32c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <HAL_GPIO_Init+0x20e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a4b      	ldr	r2, [pc, #300]	@ (8005a6c <HAL_GPIO_Init+0x330>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d101      	bne.n	8005946 <HAL_GPIO_Init+0x20a>
 8005942:	2307      	movs	r3, #7
 8005944:	e00e      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005946:	2308      	movs	r3, #8
 8005948:	e00c      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800594a:	2306      	movs	r3, #6
 800594c:	e00a      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800594e:	2305      	movs	r3, #5
 8005950:	e008      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005952:	2304      	movs	r3, #4
 8005954:	e006      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005956:	2303      	movs	r3, #3
 8005958:	e004      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800595a:	2302      	movs	r3, #2
 800595c:	e002      	b.n	8005964 <HAL_GPIO_Init+0x228>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <HAL_GPIO_Init+0x228>
 8005962:	2300      	movs	r3, #0
 8005964:	69fa      	ldr	r2, [r7, #28]
 8005966:	f002 0203 	and.w	r2, r2, #3
 800596a:	0092      	lsls	r2, r2, #2
 800596c:	4093      	lsls	r3, r2
 800596e:	69ba      	ldr	r2, [r7, #24]
 8005970:	4313      	orrs	r3, r2
 8005972:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005974:	4935      	ldr	r1, [pc, #212]	@ (8005a4c <HAL_GPIO_Init+0x310>)
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	089b      	lsrs	r3, r3, #2
 800597a:	3302      	adds	r3, #2
 800597c:	69ba      	ldr	r2, [r7, #24]
 800597e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005982:	4b3b      	ldr	r3, [pc, #236]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	43db      	mvns	r3, r3
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	4013      	ands	r3, r2
 8005990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d003      	beq.n	80059a6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80059a6:	4a32      	ldr	r2, [pc, #200]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80059ac:	4b30      	ldr	r3, [pc, #192]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 80059ae:	68db      	ldr	r3, [r3, #12]
 80059b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	43db      	mvns	r3, r3
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	4013      	ands	r3, r2
 80059ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d003      	beq.n	80059d0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80059d0:	4a27      	ldr	r2, [pc, #156]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80059d6:	4b26      	ldr	r3, [pc, #152]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	43db      	mvns	r3, r3
 80059e0:	69ba      	ldr	r2, [r7, #24]
 80059e2:	4013      	ands	r3, r2
 80059e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80059f2:	69ba      	ldr	r2, [r7, #24]
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80059fa:	4a1d      	ldr	r2, [pc, #116]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005a00:	4b1b      	ldr	r3, [pc, #108]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	43db      	mvns	r3, r3
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d003      	beq.n	8005a24 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005a24:	4a12      	ldr	r2, [pc, #72]	@ (8005a70 <HAL_GPIO_Init+0x334>)
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	2b0f      	cmp	r3, #15
 8005a34:	f67f ae90 	bls.w	8005758 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005a38:	bf00      	nop
 8005a3a:	bf00      	nop
 8005a3c:	3724      	adds	r7, #36	@ 0x24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop
 8005a48:	40023800 	.word	0x40023800
 8005a4c:	40013800 	.word	0x40013800
 8005a50:	40020000 	.word	0x40020000
 8005a54:	40020400 	.word	0x40020400
 8005a58:	40020800 	.word	0x40020800
 8005a5c:	40020c00 	.word	0x40020c00
 8005a60:	40021000 	.word	0x40021000
 8005a64:	40021400 	.word	0x40021400
 8005a68:	40021800 	.word	0x40021800
 8005a6c:	40021c00 	.word	0x40021c00
 8005a70:	40013c00 	.word	0x40013c00

08005a74 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8005a86:	2300      	movs	r3, #0
 8005a88:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e0cd      	b.n	8005c2c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a90:	2201      	movs	r2, #1
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	fa02 f303 	lsl.w	r3, r2, r3
 8005a98:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	693b      	ldr	r3, [r7, #16]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	f040 80bd 	bne.w	8005c26 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005aac:	4a65      	ldr	r2, [pc, #404]	@ (8005c44 <HAL_GPIO_DeInit+0x1d0>)
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	089b      	lsrs	r3, r3, #2
 8005ab2:	3302      	adds	r3, #2
 8005ab4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ab8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f003 0303 	and.w	r3, r3, #3
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	220f      	movs	r2, #15
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	4013      	ands	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c48 <HAL_GPIO_DeInit+0x1d4>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d02b      	beq.n	8005b2e <HAL_GPIO_DeInit+0xba>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	4a5c      	ldr	r2, [pc, #368]	@ (8005c4c <HAL_GPIO_DeInit+0x1d8>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d025      	beq.n	8005b2a <HAL_GPIO_DeInit+0xb6>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	4a5b      	ldr	r2, [pc, #364]	@ (8005c50 <HAL_GPIO_DeInit+0x1dc>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d01f      	beq.n	8005b26 <HAL_GPIO_DeInit+0xb2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8005c54 <HAL_GPIO_DeInit+0x1e0>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d019      	beq.n	8005b22 <HAL_GPIO_DeInit+0xae>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	4a59      	ldr	r2, [pc, #356]	@ (8005c58 <HAL_GPIO_DeInit+0x1e4>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d013      	beq.n	8005b1e <HAL_GPIO_DeInit+0xaa>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4a58      	ldr	r2, [pc, #352]	@ (8005c5c <HAL_GPIO_DeInit+0x1e8>)
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d00d      	beq.n	8005b1a <HAL_GPIO_DeInit+0xa6>
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	4a57      	ldr	r2, [pc, #348]	@ (8005c60 <HAL_GPIO_DeInit+0x1ec>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d007      	beq.n	8005b16 <HAL_GPIO_DeInit+0xa2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a56      	ldr	r2, [pc, #344]	@ (8005c64 <HAL_GPIO_DeInit+0x1f0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d101      	bne.n	8005b12 <HAL_GPIO_DeInit+0x9e>
 8005b0e:	2307      	movs	r3, #7
 8005b10:	e00e      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b12:	2308      	movs	r3, #8
 8005b14:	e00c      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b16:	2306      	movs	r3, #6
 8005b18:	e00a      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b1a:	2305      	movs	r3, #5
 8005b1c:	e008      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b1e:	2304      	movs	r3, #4
 8005b20:	e006      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b22:	2303      	movs	r3, #3
 8005b24:	e004      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b26:	2302      	movs	r3, #2
 8005b28:	e002      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e000      	b.n	8005b30 <HAL_GPIO_DeInit+0xbc>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	697a      	ldr	r2, [r7, #20]
 8005b32:	f002 0203 	and.w	r2, r2, #3
 8005b36:	0092      	lsls	r2, r2, #2
 8005b38:	4093      	lsls	r3, r2
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	429a      	cmp	r2, r3
 8005b3e:	d132      	bne.n	8005ba6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005b40:	4b49      	ldr	r3, [pc, #292]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	43db      	mvns	r3, r3
 8005b48:	4947      	ldr	r1, [pc, #284]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8005b4e:	4b46      	ldr	r3, [pc, #280]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	43db      	mvns	r3, r3
 8005b56:	4944      	ldr	r1, [pc, #272]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8005b5c:	4b42      	ldr	r3, [pc, #264]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b5e:	68da      	ldr	r2, [r3, #12]
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	43db      	mvns	r3, r3
 8005b64:	4940      	ldr	r1, [pc, #256]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8005b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b6c:	689a      	ldr	r2, [r3, #8]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	43db      	mvns	r3, r3
 8005b72:	493d      	ldr	r1, [pc, #244]	@ (8005c68 <HAL_GPIO_DeInit+0x1f4>)
 8005b74:	4013      	ands	r3, r2
 8005b76:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	220f      	movs	r2, #15
 8005b82:	fa02 f303 	lsl.w	r3, r2, r3
 8005b86:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8005b88:	4a2e      	ldr	r2, [pc, #184]	@ (8005c44 <HAL_GPIO_DeInit+0x1d0>)
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	089b      	lsrs	r3, r3, #2
 8005b8e:	3302      	adds	r3, #2
 8005b90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	43da      	mvns	r2, r3
 8005b98:	482a      	ldr	r0, [pc, #168]	@ (8005c44 <HAL_GPIO_DeInit+0x1d0>)
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	089b      	lsrs	r3, r3, #2
 8005b9e:	400a      	ands	r2, r1
 8005ba0:	3302      	adds	r3, #2
 8005ba2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	2103      	movs	r1, #3
 8005bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb4:	43db      	mvns	r3, r3
 8005bb6:	401a      	ands	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	08da      	lsrs	r2, r3, #3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	3208      	adds	r2, #8
 8005bc4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	220f      	movs	r2, #15
 8005bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd6:	43db      	mvns	r3, r3
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	08d2      	lsrs	r2, r2, #3
 8005bdc:	4019      	ands	r1, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3208      	adds	r2, #8
 8005be2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68da      	ldr	r2, [r3, #12]
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	2103      	movs	r1, #3
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	401a      	ands	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685a      	ldr	r2, [r3, #4]
 8005c00:	2101      	movs	r1, #1
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	fa01 f303 	lsl.w	r3, r1, r3
 8005c08:	43db      	mvns	r3, r3
 8005c0a:	401a      	ands	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	2103      	movs	r1, #3
 8005c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	401a      	ands	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	617b      	str	r3, [r7, #20]
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	f67f af2e 	bls.w	8005a90 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40013800 	.word	0x40013800
 8005c48:	40020000 	.word	0x40020000
 8005c4c:	40020400 	.word	0x40020400
 8005c50:	40020800 	.word	0x40020800
 8005c54:	40020c00 	.word	0x40020c00
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	40021400 	.word	0x40021400
 8005c60:	40021800 	.word	0x40021800
 8005c64:	40021c00 	.word	0x40021c00
 8005c68:	40013c00 	.word	0x40013c00

08005c6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	460b      	mov	r3, r1
 8005c76:	807b      	strh	r3, [r7, #2]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005c7c:	787b      	ldrb	r3, [r7, #1]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005c82:	887a      	ldrh	r2, [r7, #2]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005c88:	e003      	b.n	8005c92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005c8a:	887b      	ldrh	r3, [r7, #2]
 8005c8c:	041a      	lsls	r2, r3, #16
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	619a      	str	r2, [r3, #24]
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b082      	sub	sp, #8
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005caa:	4b08      	ldr	r3, [pc, #32]	@ (8005ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cac:	695a      	ldr	r2, [r3, #20]
 8005cae:	88fb      	ldrh	r3, [r7, #6]
 8005cb0:	4013      	ands	r3, r2
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d006      	beq.n	8005cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005cb6:	4a05      	ldr	r2, [pc, #20]	@ (8005ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005cb8:	88fb      	ldrh	r3, [r7, #6]
 8005cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005cbc:	88fb      	ldrh	r3, [r7, #6]
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7fc f986 	bl	8001fd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	40013c00 	.word	0x40013c00

08005cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b084      	sub	sp, #16
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d101      	bne.n	8005ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e12b      	b.n	8005f3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d106      	bne.n	8005cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f7fe f8d4 	bl	8003ea4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2224      	movs	r2, #36	@ 0x24
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681a      	ldr	r2, [r3, #0]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005d32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005d34:	f001 fbec 	bl	8007510 <HAL_RCC_GetPCLK1Freq>
 8005d38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	4a81      	ldr	r2, [pc, #516]	@ (8005f44 <HAL_I2C_Init+0x274>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d807      	bhi.n	8005d54 <HAL_I2C_Init+0x84>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	4a80      	ldr	r2, [pc, #512]	@ (8005f48 <HAL_I2C_Init+0x278>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	bf94      	ite	ls
 8005d4c:	2301      	movls	r3, #1
 8005d4e:	2300      	movhi	r3, #0
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	e006      	b.n	8005d62 <HAL_I2C_Init+0x92>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	4a7d      	ldr	r2, [pc, #500]	@ (8005f4c <HAL_I2C_Init+0x27c>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	bf94      	ite	ls
 8005d5c:	2301      	movls	r3, #1
 8005d5e:	2300      	movhi	r3, #0
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e0e7      	b.n	8005f3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a78      	ldr	r2, [pc, #480]	@ (8005f50 <HAL_I2C_Init+0x280>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	0c9b      	lsrs	r3, r3, #18
 8005d74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	4a6a      	ldr	r2, [pc, #424]	@ (8005f44 <HAL_I2C_Init+0x274>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d802      	bhi.n	8005da4 <HAL_I2C_Init+0xd4>
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	3301      	adds	r3, #1
 8005da2:	e009      	b.n	8005db8 <HAL_I2C_Init+0xe8>
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	4a69      	ldr	r2, [pc, #420]	@ (8005f54 <HAL_I2C_Init+0x284>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	099b      	lsrs	r3, r3, #6
 8005db6:	3301      	adds	r3, #1
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6812      	ldr	r2, [r2, #0]
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005dca:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	495c      	ldr	r1, [pc, #368]	@ (8005f44 <HAL_I2C_Init+0x274>)
 8005dd4:	428b      	cmp	r3, r1
 8005dd6:	d819      	bhi.n	8005e0c <HAL_I2C_Init+0x13c>
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	1e59      	subs	r1, r3, #1
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	fbb1 f3f3 	udiv	r3, r1, r3
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005dec:	400b      	ands	r3, r1
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00a      	beq.n	8005e08 <HAL_I2C_Init+0x138>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	1e59      	subs	r1, r3, #1
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005e00:	3301      	adds	r3, #1
 8005e02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e06:	e051      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	e04f      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d111      	bne.n	8005e38 <HAL_I2C_Init+0x168>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1e58      	subs	r0, r3, #1
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6859      	ldr	r1, [r3, #4]
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	440b      	add	r3, r1
 8005e22:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e26:	3301      	adds	r3, #1
 8005e28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bf0c      	ite	eq
 8005e30:	2301      	moveq	r3, #1
 8005e32:	2300      	movne	r3, #0
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	e012      	b.n	8005e5e <HAL_I2C_Init+0x18e>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1e58      	subs	r0, r3, #1
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6859      	ldr	r1, [r3, #4]
 8005e40:	460b      	mov	r3, r1
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	440b      	add	r3, r1
 8005e46:	0099      	lsls	r1, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e4e:	3301      	adds	r3, #1
 8005e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bf0c      	ite	eq
 8005e58:	2301      	moveq	r3, #1
 8005e5a:	2300      	movne	r3, #0
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d001      	beq.n	8005e66 <HAL_I2C_Init+0x196>
 8005e62:	2301      	movs	r3, #1
 8005e64:	e022      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10e      	bne.n	8005e8c <HAL_I2C_Init+0x1bc>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	1e58      	subs	r0, r3, #1
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	460b      	mov	r3, r1
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	440b      	add	r3, r1
 8005e7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e80:	3301      	adds	r3, #1
 8005e82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e8a:	e00f      	b.n	8005eac <HAL_I2C_Init+0x1dc>
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	1e58      	subs	r0, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6859      	ldr	r1, [r3, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	0099      	lsls	r1, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ea8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	6809      	ldr	r1, [r1, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	69da      	ldr	r2, [r3, #28]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005eda:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6911      	ldr	r1, [r2, #16]
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68d2      	ldr	r2, [r2, #12]
 8005ee6:	4311      	orrs	r1, r2
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6812      	ldr	r2, [r2, #0]
 8005eec:	430b      	orrs	r3, r1
 8005eee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	695a      	ldr	r2, [r3, #20]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	431a      	orrs	r2, r3
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2220      	movs	r2, #32
 8005f26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	000186a0 	.word	0x000186a0
 8005f48:	001e847f 	.word	0x001e847f
 8005f4c:	003d08ff 	.word	0x003d08ff
 8005f50:	431bde83 	.word	0x431bde83
 8005f54:	10624dd3 	.word	0x10624dd3

08005f58 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d101      	bne.n	8005f6a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f66:	2301      	movs	r3, #1
 8005f68:	e021      	b.n	8005fae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2224      	movs	r2, #36	@ 0x24
 8005f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681a      	ldr	r2, [r3, #0]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0201 	bic.w	r2, r2, #1
 8005f80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fe f872 	bl	800406c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b088      	sub	sp, #32
 8005fbc:	af02      	add	r7, sp, #8
 8005fbe:	60f8      	str	r0, [r7, #12]
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	817b      	strh	r3, [r7, #10]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	813b      	strh	r3, [r7, #8]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005fd2:	f7fe fe11 	bl	8004bf8 <HAL_GetTick>
 8005fd6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	2b20      	cmp	r3, #32
 8005fe2:	f040 80d9 	bne.w	8006198 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	2319      	movs	r3, #25
 8005fec:	2201      	movs	r2, #1
 8005fee:	496d      	ldr	r1, [pc, #436]	@ (80061a4 <HAL_I2C_Mem_Write+0x1ec>)
 8005ff0:	68f8      	ldr	r0, [r7, #12]
 8005ff2:	f000 fc7f 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d001      	beq.n	8006000 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	e0cc      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006006:	2b01      	cmp	r3, #1
 8006008:	d101      	bne.n	800600e <HAL_I2C_Mem_Write+0x56>
 800600a:	2302      	movs	r3, #2
 800600c:	e0c5      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b01      	cmp	r3, #1
 8006022:	d007      	beq.n	8006034 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f042 0201 	orr.w	r2, r2, #1
 8006032:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006042:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2221      	movs	r2, #33	@ 0x21
 8006048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2240      	movs	r2, #64	@ 0x40
 8006050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	2200      	movs	r2, #0
 8006058:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6a3a      	ldr	r2, [r7, #32]
 800605e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8006064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800606a:	b29a      	uxth	r2, r3
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a4d      	ldr	r2, [pc, #308]	@ (80061a8 <HAL_I2C_Mem_Write+0x1f0>)
 8006074:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006076:	88f8      	ldrh	r0, [r7, #6]
 8006078:	893a      	ldrh	r2, [r7, #8]
 800607a:	8979      	ldrh	r1, [r7, #10]
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	9301      	str	r3, [sp, #4]
 8006080:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	4603      	mov	r3, r0
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fab6 	bl	80065f8 <I2C_RequestMemoryWrite>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d052      	beq.n	8006138 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e081      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800609a:	68f8      	ldr	r0, [r7, #12]
 800609c:	f000 fd00 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00d      	beq.n	80060c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d107      	bne.n	80060be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80060bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e06b      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80060dc:	3b01      	subs	r3, #1
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	695b      	ldr	r3, [r3, #20]
 80060f8:	f003 0304 	and.w	r3, r3, #4
 80060fc:	2b04      	cmp	r3, #4
 80060fe:	d11b      	bne.n	8006138 <HAL_I2C_Mem_Write+0x180>
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006104:	2b00      	cmp	r3, #0
 8006106:	d017      	beq.n	8006138 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006122:	3b01      	subs	r3, #1
 8006124:	b29a      	uxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800612e:	b29b      	uxth	r3, r3
 8006130:	3b01      	subs	r3, #1
 8006132:	b29a      	uxth	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1aa      	bne.n	8006096 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 fcec 	bl	8006b22 <I2C_WaitOnBTFFlagUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00d      	beq.n	800616c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006154:	2b04      	cmp	r3, #4
 8006156:	d107      	bne.n	8006168 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006166:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	e016      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8006194:	2300      	movs	r3, #0
 8006196:	e000      	b.n	800619a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8006198:	2302      	movs	r3, #2
  }
}
 800619a:	4618      	mov	r0, r3
 800619c:	3718      	adds	r7, #24
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	00100002 	.word	0x00100002
 80061a8:	ffff0000 	.word	0xffff0000

080061ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b08c      	sub	sp, #48	@ 0x30
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	4608      	mov	r0, r1
 80061b6:	4611      	mov	r1, r2
 80061b8:	461a      	mov	r2, r3
 80061ba:	4603      	mov	r3, r0
 80061bc:	817b      	strh	r3, [r7, #10]
 80061be:	460b      	mov	r3, r1
 80061c0:	813b      	strh	r3, [r7, #8]
 80061c2:	4613      	mov	r3, r2
 80061c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80061c6:	f7fe fd17 	bl	8004bf8 <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	f040 8208 	bne.w	80065ea <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80061da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	2319      	movs	r3, #25
 80061e0:	2201      	movs	r2, #1
 80061e2:	497b      	ldr	r1, [pc, #492]	@ (80063d0 <HAL_I2C_Mem_Read+0x224>)
 80061e4:	68f8      	ldr	r0, [r7, #12]
 80061e6:	f000 fb85 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80061f0:	2302      	movs	r3, #2
 80061f2:	e1fb      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d101      	bne.n	8006202 <HAL_I2C_Mem_Read+0x56>
 80061fe:	2302      	movs	r3, #2
 8006200:	e1f4      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d007      	beq.n	8006228 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f042 0201 	orr.w	r2, r2, #1
 8006226:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006236:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2222      	movs	r2, #34	@ 0x22
 800623c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2240      	movs	r2, #64	@ 0x40
 8006244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006252:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006258:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a5b      	ldr	r2, [pc, #364]	@ (80063d4 <HAL_I2C_Mem_Read+0x228>)
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800626a:	88f8      	ldrh	r0, [r7, #6]
 800626c:	893a      	ldrh	r2, [r7, #8]
 800626e:	8979      	ldrh	r1, [r7, #10]
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	4603      	mov	r3, r0
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 fa52 	bl	8006724 <I2C_RequestMemoryRead>
 8006280:	4603      	mov	r3, r0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e1b0      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d113      	bne.n	80062ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006292:	2300      	movs	r3, #0
 8006294:	623b      	str	r3, [r7, #32]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695b      	ldr	r3, [r3, #20]
 800629c:	623b      	str	r3, [r7, #32]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	699b      	ldr	r3, [r3, #24]
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	e184      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d11b      	bne.n	80062fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062d2:	2300      	movs	r3, #0
 80062d4:	61fb      	str	r3, [r7, #28]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	61fb      	str	r3, [r7, #28]
 80062e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f6:	601a      	str	r2, [r3, #0]
 80062f8:	e164      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d11b      	bne.n	800633a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006310:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006320:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006322:	2300      	movs	r3, #0
 8006324:	61bb      	str	r3, [r7, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	695b      	ldr	r3, [r3, #20]
 800632c:	61bb      	str	r3, [r7, #24]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	61bb      	str	r3, [r7, #24]
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	e144      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800633a:	2300      	movs	r3, #0
 800633c:	617b      	str	r3, [r7, #20]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	617b      	str	r3, [r7, #20]
 800634e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006350:	e138      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006356:	2b03      	cmp	r3, #3
 8006358:	f200 80f1 	bhi.w	800653e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006360:	2b01      	cmp	r3, #1
 8006362:	d123      	bne.n	80063ac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006366:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 fc1b 	bl	8006ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d001      	beq.n	8006378 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e139      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691a      	ldr	r2, [r3, #16]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006382:	b2d2      	uxtb	r2, r2
 8006384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006394:	3b01      	subs	r3, #1
 8006396:	b29a      	uxth	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80063aa:	e10b      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80063b0:	2b02      	cmp	r3, #2
 80063b2:	d14e      	bne.n	8006452 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ba:	2200      	movs	r2, #0
 80063bc:	4906      	ldr	r1, [pc, #24]	@ (80063d8 <HAL_I2C_Mem_Read+0x22c>)
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f000 fa98 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80063c4:	4603      	mov	r3, r0
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d008      	beq.n	80063dc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e10e      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
 80063ce:	bf00      	nop
 80063d0:	00100002 	.word	0x00100002
 80063d4:	ffff0000 	.word	0xffff0000
 80063d8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80063ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f6:	b2d2      	uxtb	r2, r2
 80063f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006414:	b29b      	uxth	r3, r3
 8006416:	3b01      	subs	r3, #1
 8006418:	b29a      	uxth	r2, r3
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	691a      	ldr	r2, [r3, #16]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006428:	b2d2      	uxtb	r2, r2
 800642a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006430:	1c5a      	adds	r2, r3, #1
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006446:	b29b      	uxth	r3, r3
 8006448:	3b01      	subs	r3, #1
 800644a:	b29a      	uxth	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006450:	e0b8      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	9300      	str	r3, [sp, #0]
 8006456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006458:	2200      	movs	r2, #0
 800645a:	4966      	ldr	r1, [pc, #408]	@ (80065f4 <HAL_I2C_Mem_Read+0x448>)
 800645c:	68f8      	ldr	r0, [r7, #12]
 800645e:	f000 fa49 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006462:	4603      	mov	r3, r0
 8006464:	2b00      	cmp	r3, #0
 8006466:	d001      	beq.n	800646c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e0bf      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800647a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	691a      	ldr	r2, [r3, #16]
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	b2d2      	uxtb	r2, r2
 8006488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006498:	3b01      	subs	r3, #1
 800649a:	b29a      	uxth	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	3b01      	subs	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064b4:	2200      	movs	r2, #0
 80064b6:	494f      	ldr	r1, [pc, #316]	@ (80065f4 <HAL_I2C_Mem_Read+0x448>)
 80064b8:	68f8      	ldr	r0, [r7, #12]
 80064ba:	f000 fa1b 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e091      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	691a      	ldr	r2, [r3, #16]
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064f4:	3b01      	subs	r3, #1
 80064f6:	b29a      	uxth	r2, r3
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b01      	subs	r3, #1
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006526:	3b01      	subs	r3, #1
 8006528:	b29a      	uxth	r2, r3
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006532:	b29b      	uxth	r3, r3
 8006534:	3b01      	subs	r3, #1
 8006536:	b29a      	uxth	r2, r3
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800653c:	e042      	b.n	80065c4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800653e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006540:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006542:	68f8      	ldr	r0, [r7, #12]
 8006544:	f000 fb2e 	bl	8006ba4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e04c      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800655c:	b2d2      	uxtb	r2, r2
 800655e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006564:	1c5a      	adds	r2, r3, #1
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800656e:	3b01      	subs	r3, #1
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800657a:	b29b      	uxth	r3, r3
 800657c:	3b01      	subs	r3, #1
 800657e:	b29a      	uxth	r2, r3
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	695b      	ldr	r3, [r3, #20]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b04      	cmp	r3, #4
 8006590:	d118      	bne.n	80065c4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	691a      	ldr	r2, [r3, #16]
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065a4:	1c5a      	adds	r2, r3, #1
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065ae:	3b01      	subs	r3, #1
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f47f aec2 	bne.w	8006352 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80065e6:	2300      	movs	r3, #0
 80065e8:	e000      	b.n	80065ec <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80065ea:	2302      	movs	r3, #2
  }
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	@ 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	00010004 	.word	0x00010004

080065f8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b088      	sub	sp, #32
 80065fc:	af02      	add	r7, sp, #8
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	4608      	mov	r0, r1
 8006602:	4611      	mov	r1, r2
 8006604:	461a      	mov	r2, r3
 8006606:	4603      	mov	r3, r0
 8006608:	817b      	strh	r3, [r7, #10]
 800660a:	460b      	mov	r3, r1
 800660c:	813b      	strh	r3, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006620:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	6a3b      	ldr	r3, [r7, #32]
 8006628:	2200      	movs	r2, #0
 800662a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800662e:	68f8      	ldr	r0, [r7, #12]
 8006630:	f000 f960 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006634:	4603      	mov	r3, r0
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006648:	d103      	bne.n	8006652 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006650:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e05f      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006656:	897b      	ldrh	r3, [r7, #10]
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006664:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006668:	6a3a      	ldr	r2, [r7, #32]
 800666a:	492d      	ldr	r1, [pc, #180]	@ (8006720 <I2C_RequestMemoryWrite+0x128>)
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f000 f998 	bl	80069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e04c      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	2300      	movs	r3, #0
 800667e:	617b      	str	r3, [r7, #20]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	617b      	str	r3, [r7, #20]
 8006690:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006692:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006694:	6a39      	ldr	r1, [r7, #32]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 fa02 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800669c:	4603      	mov	r3, r0
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00d      	beq.n	80066be <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	2b04      	cmp	r3, #4
 80066a8:	d107      	bne.n	80066ba <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e02b      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80066be:	88fb      	ldrh	r3, [r7, #6]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d105      	bne.n	80066d0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80066c4:	893b      	ldrh	r3, [r7, #8]
 80066c6:	b2da      	uxtb	r2, r3
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	611a      	str	r2, [r3, #16]
 80066ce:	e021      	b.n	8006714 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80066d0:	893b      	ldrh	r3, [r7, #8]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	b29b      	uxth	r3, r3
 80066d6:	b2da      	uxtb	r2, r3
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80066de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066e0:	6a39      	ldr	r1, [r7, #32]
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f000 f9dc 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00d      	beq.n	800670a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066f2:	2b04      	cmp	r3, #4
 80066f4:	d107      	bne.n	8006706 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006704:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e005      	b.n	8006716 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800670a:	893b      	ldrh	r3, [r7, #8]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3718      	adds	r7, #24
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	00010002 	.word	0x00010002

08006724 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af02      	add	r7, sp, #8
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	4608      	mov	r0, r1
 800672e:	4611      	mov	r1, r2
 8006730:	461a      	mov	r2, r3
 8006732:	4603      	mov	r3, r0
 8006734:	817b      	strh	r3, [r7, #10]
 8006736:	460b      	mov	r3, r1
 8006738:	813b      	strh	r3, [r7, #8]
 800673a:	4613      	mov	r3, r2
 800673c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681a      	ldr	r2, [r3, #0]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800674c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800675c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	9300      	str	r3, [sp, #0]
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	2200      	movs	r2, #0
 8006766:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 f8c2 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00d      	beq.n	8006792 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006780:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006784:	d103      	bne.n	800678e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800678c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e0aa      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006792:	897b      	ldrh	r3, [r7, #10]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	461a      	mov	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80067a0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	6a3a      	ldr	r2, [r7, #32]
 80067a6:	4952      	ldr	r1, [pc, #328]	@ (80068f0 <I2C_RequestMemoryRead+0x1cc>)
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f8fa 	bl	80069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80067ae:	4603      	mov	r3, r0
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d001      	beq.n	80067b8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80067b4:	2301      	movs	r3, #1
 80067b6:	e097      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b8:	2300      	movs	r3, #0
 80067ba:	617b      	str	r3, [r7, #20]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	617b      	str	r3, [r7, #20]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d0:	6a39      	ldr	r1, [r7, #32]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f964 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	2b04      	cmp	r3, #4
 80067e4:	d107      	bne.n	80067f6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e076      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80067fa:	88fb      	ldrh	r3, [r7, #6]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d105      	bne.n	800680c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006800:	893b      	ldrh	r3, [r7, #8]
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	611a      	str	r2, [r3, #16]
 800680a:	e021      	b.n	8006850 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800680c:	893b      	ldrh	r3, [r7, #8]
 800680e:	0a1b      	lsrs	r3, r3, #8
 8006810:	b29b      	uxth	r3, r3
 8006812:	b2da      	uxtb	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800681a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800681c:	6a39      	ldr	r1, [r7, #32]
 800681e:	68f8      	ldr	r0, [r7, #12]
 8006820:	f000 f93e 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00d      	beq.n	8006846 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	2b04      	cmp	r3, #4
 8006830:	d107      	bne.n	8006842 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006840:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	e050      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006846:	893b      	ldrh	r3, [r7, #8]
 8006848:	b2da      	uxtb	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006852:	6a39      	ldr	r1, [r7, #32]
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f923 	bl	8006aa0 <I2C_WaitOnTXEFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d00d      	beq.n	800687c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006864:	2b04      	cmp	r3, #4
 8006866:	d107      	bne.n	8006878 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006876:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e035      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800688a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	9300      	str	r3, [sp, #0]
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	2200      	movs	r2, #0
 8006894:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006898:	68f8      	ldr	r0, [r7, #12]
 800689a:	f000 f82b 	bl	80068f4 <I2C_WaitOnFlagUntilTimeout>
 800689e:	4603      	mov	r3, r0
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d00d      	beq.n	80068c0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068b2:	d103      	bne.n	80068bc <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068ba:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80068bc:	2303      	movs	r3, #3
 80068be:	e013      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80068c0:	897b      	ldrh	r3, [r7, #10]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	f043 0301 	orr.w	r3, r3, #1
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80068d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d2:	6a3a      	ldr	r2, [r7, #32]
 80068d4:	4906      	ldr	r1, [pc, #24]	@ (80068f0 <I2C_RequestMemoryRead+0x1cc>)
 80068d6:	68f8      	ldr	r0, [r7, #12]
 80068d8:	f000 f863 	bl	80069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068dc:	4603      	mov	r3, r0
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d001      	beq.n	80068e6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80068e2:	2301      	movs	r3, #1
 80068e4:	e000      	b.n	80068e8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3718      	adds	r7, #24
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	00010002 	.word	0x00010002

080068f4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	4613      	mov	r3, r2
 8006902:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006904:	e025      	b.n	8006952 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690c:	d021      	beq.n	8006952 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fe f973 	bl	8004bf8 <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	683a      	ldr	r2, [r7, #0]
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <I2C_WaitOnFlagUntilTimeout+0x30>
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d116      	bne.n	8006952 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693e:	f043 0220 	orr.w	r2, r3, #32
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e023      	b.n	800699a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	0c1b      	lsrs	r3, r3, #16
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b01      	cmp	r3, #1
 800695a:	d10d      	bne.n	8006978 <I2C_WaitOnFlagUntilTimeout+0x84>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	43da      	mvns	r2, r3
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	4013      	ands	r3, r2
 8006968:	b29b      	uxth	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	bf0c      	ite	eq
 800696e:	2301      	moveq	r3, #1
 8006970:	2300      	movne	r3, #0
 8006972:	b2db      	uxtb	r3, r3
 8006974:	461a      	mov	r2, r3
 8006976:	e00c      	b.n	8006992 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	43da      	mvns	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4013      	ands	r3, r2
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	bf0c      	ite	eq
 800698a:	2301      	moveq	r3, #1
 800698c:	2300      	movne	r3, #0
 800698e:	b2db      	uxtb	r3, r3
 8006990:	461a      	mov	r2, r3
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	429a      	cmp	r2, r3
 8006996:	d0b6      	beq.n	8006906 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	60f8      	str	r0, [r7, #12]
 80069aa:	60b9      	str	r1, [r7, #8]
 80069ac:	607a      	str	r2, [r7, #4]
 80069ae:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80069b0:	e051      	b.n	8006a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80069bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069c0:	d123      	bne.n	8006a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069d0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80069da:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2200      	movs	r2, #0
 80069e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f6:	f043 0204 	orr.w	r2, r3, #4
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e046      	b.n	8006a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a10:	d021      	beq.n	8006a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a12:	f7fe f8f1 	bl	8004bf8 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d302      	bcc.n	8006a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d116      	bne.n	8006a56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2220      	movs	r2, #32
 8006a32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	f043 0220 	orr.w	r2, r3, #32
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e020      	b.n	8006a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	0c1b      	lsrs	r3, r3, #16
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	2b01      	cmp	r3, #1
 8006a5e:	d10c      	bne.n	8006a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	43da      	mvns	r2, r3
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	4013      	ands	r3, r2
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2301      	movne	r3, #1
 8006a74:	2300      	moveq	r3, #0
 8006a76:	b2db      	uxtb	r3, r3
 8006a78:	e00b      	b.n	8006a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	43da      	mvns	r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	4013      	ands	r3, r2
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	bf14      	ite	ne
 8006a8c:	2301      	movne	r3, #1
 8006a8e:	2300      	moveq	r3, #0
 8006a90:	b2db      	uxtb	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d18d      	bne.n	80069b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006a96:	2300      	movs	r3, #0
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3710      	adds	r7, #16
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	60b9      	str	r1, [r7, #8]
 8006aaa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006aac:	e02d      	b.n	8006b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f8ce 	bl	8006c50 <I2C_IsAcknowledgeFailed>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e02d      	b.n	8006b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ac4:	d021      	beq.n	8006b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac6:	f7fe f897 	bl	8004bf8 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	68ba      	ldr	r2, [r7, #8]
 8006ad2:	429a      	cmp	r2, r3
 8006ad4:	d302      	bcc.n	8006adc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d116      	bne.n	8006b0a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af6:	f043 0220 	orr.w	r2, r3, #32
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e007      	b.n	8006b1a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	695b      	ldr	r3, [r3, #20]
 8006b10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b14:	2b80      	cmp	r3, #128	@ 0x80
 8006b16:	d1ca      	bne.n	8006aae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3710      	adds	r7, #16
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b084      	sub	sp, #16
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b2e:	e02d      	b.n	8006b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f88d 	bl	8006c50 <I2C_IsAcknowledgeFailed>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e02d      	b.n	8006b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d021      	beq.n	8006b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b48:	f7fe f856 	bl	8004bf8 <HAL_GetTick>
 8006b4c:	4602      	mov	r2, r0
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d302      	bcc.n	8006b5e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d116      	bne.n	8006b8c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2220      	movs	r2, #32
 8006b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b78:	f043 0220 	orr.w	r2, r3, #32
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e007      	b.n	8006b9c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	f003 0304 	and.w	r3, r3, #4
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d1ca      	bne.n	8006b30 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006b9a:	2300      	movs	r3, #0
}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	3710      	adds	r7, #16
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bd80      	pop	{r7, pc}

08006ba4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006bb0:	e042      	b.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	f003 0310 	and.w	r3, r3, #16
 8006bbc:	2b10      	cmp	r3, #16
 8006bbe:	d119      	bne.n	8006bf4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0210 	mvn.w	r2, #16
 8006bc8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2220      	movs	r2, #32
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e029      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bf4:	f7fe f800 	bl	8004bf8 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	68ba      	ldr	r2, [r7, #8]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d116      	bne.n	8006c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c24:	f043 0220 	orr.w	r2, r3, #32
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c34:	2301      	movs	r3, #1
 8006c36:	e007      	b.n	8006c48 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	695b      	ldr	r3, [r3, #20]
 8006c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c42:	2b40      	cmp	r3, #64	@ 0x40
 8006c44:	d1b5      	bne.n	8006bb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3710      	adds	r7, #16
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c62:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c66:	d11b      	bne.n	8006ca0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c70:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2220      	movs	r2, #32
 8006c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2200      	movs	r2, #0
 8006c84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8c:	f043 0204 	orr.w	r2, r3, #4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e267      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0301 	and.w	r3, r3, #1
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d075      	beq.n	8006dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006cce:	4b88      	ldr	r3, [pc, #544]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f003 030c 	and.w	r3, r3, #12
 8006cd6:	2b04      	cmp	r3, #4
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006cda:	4b85      	ldr	r3, [pc, #532]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006ce2:	2b08      	cmp	r3, #8
 8006ce4:	d112      	bne.n	8006d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ce6:	4b82      	ldr	r3, [pc, #520]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006cf2:	d10b      	bne.n	8006d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d05b      	beq.n	8006db8 <HAL_RCC_OscConfig+0x108>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d157      	bne.n	8006db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	e242      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d14:	d106      	bne.n	8006d24 <HAL_RCC_OscConfig+0x74>
 8006d16:	4b76      	ldr	r3, [pc, #472]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a75      	ldr	r2, [pc, #468]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d20:	6013      	str	r3, [r2, #0]
 8006d22:	e01d      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006d2c:	d10c      	bne.n	8006d48 <HAL_RCC_OscConfig+0x98>
 8006d2e:	4b70      	ldr	r3, [pc, #448]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a6f      	ldr	r2, [pc, #444]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4b6d      	ldr	r3, [pc, #436]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	4a6c      	ldr	r2, [pc, #432]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d44:	6013      	str	r3, [r2, #0]
 8006d46:	e00b      	b.n	8006d60 <HAL_RCC_OscConfig+0xb0>
 8006d48:	4b69      	ldr	r3, [pc, #420]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a68      	ldr	r2, [pc, #416]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	4b66      	ldr	r3, [pc, #408]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a65      	ldr	r2, [pc, #404]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d013      	beq.n	8006d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d68:	f7fd ff46 	bl	8004bf8 <HAL_GetTick>
 8006d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d70:	f7fd ff42 	bl	8004bf8 <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	@ 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e207      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d82:	4b5b      	ldr	r3, [pc, #364]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCC_OscConfig+0xc0>
 8006d8e:	e014      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d90:	f7fd ff32 	bl	8004bf8 <HAL_GetTick>
 8006d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006d96:	e008      	b.n	8006daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006d98:	f7fd ff2e 	bl	8004bf8 <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	2b64      	cmp	r3, #100	@ 0x64
 8006da4:	d901      	bls.n	8006daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	e1f3      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006daa:	4b51      	ldr	r3, [pc, #324]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1f0      	bne.n	8006d98 <HAL_RCC_OscConfig+0xe8>
 8006db6:	e000      	b.n	8006dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0302 	and.w	r3, r3, #2
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d063      	beq.n	8006e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dc6:	4b4a      	ldr	r3, [pc, #296]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	f003 030c 	and.w	r3, r3, #12
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dd2:	4b47      	ldr	r3, [pc, #284]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006dda:	2b08      	cmp	r3, #8
 8006ddc:	d11c      	bne.n	8006e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006dde:	4b44      	ldr	r3, [pc, #272]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d116      	bne.n	8006e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006dea:	4b41      	ldr	r3, [pc, #260]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <HAL_RCC_OscConfig+0x152>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	68db      	ldr	r3, [r3, #12]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d001      	beq.n	8006e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e1c7      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e02:	4b3b      	ldr	r3, [pc, #236]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	00db      	lsls	r3, r3, #3
 8006e10:	4937      	ldr	r1, [pc, #220]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e16:	e03a      	b.n	8006e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d020      	beq.n	8006e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e20:	4b34      	ldr	r3, [pc, #208]	@ (8006ef4 <HAL_RCC_OscConfig+0x244>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e26:	f7fd fee7 	bl	8004bf8 <HAL_GetTick>
 8006e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e2c:	e008      	b.n	8006e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e2e:	f7fd fee3 	bl	8004bf8 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d901      	bls.n	8006e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e1a8      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e40:	4b2b      	ldr	r3, [pc, #172]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 0302 	and.w	r3, r3, #2
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d0f0      	beq.n	8006e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	00db      	lsls	r3, r3, #3
 8006e5a:	4925      	ldr	r1, [pc, #148]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	600b      	str	r3, [r1, #0]
 8006e60:	e015      	b.n	8006e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e62:	4b24      	ldr	r3, [pc, #144]	@ (8006ef4 <HAL_RCC_OscConfig+0x244>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e68:	f7fd fec6 	bl	8004bf8 <HAL_GetTick>
 8006e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e6e:	e008      	b.n	8006e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006e70:	f7fd fec2 	bl	8004bf8 <HAL_GetTick>
 8006e74:	4602      	mov	r2, r0
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	1ad3      	subs	r3, r2, r3
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e187      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006e82:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0302 	and.w	r3, r3, #2
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1f0      	bne.n	8006e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0308 	and.w	r3, r3, #8
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d036      	beq.n	8006f08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	695b      	ldr	r3, [r3, #20]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d016      	beq.n	8006ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ea2:	4b15      	ldr	r3, [pc, #84]	@ (8006ef8 <HAL_RCC_OscConfig+0x248>)
 8006ea4:	2201      	movs	r2, #1
 8006ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea8:	f7fd fea6 	bl	8004bf8 <HAL_GetTick>
 8006eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006eae:	e008      	b.n	8006ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006eb0:	f7fd fea2 	bl	8004bf8 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d901      	bls.n	8006ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ebe:	2303      	movs	r3, #3
 8006ec0:	e167      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ef0 <HAL_RCC_OscConfig+0x240>)
 8006ec4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ec6:	f003 0302 	and.w	r3, r3, #2
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d0f0      	beq.n	8006eb0 <HAL_RCC_OscConfig+0x200>
 8006ece:	e01b      	b.n	8006f08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ed0:	4b09      	ldr	r3, [pc, #36]	@ (8006ef8 <HAL_RCC_OscConfig+0x248>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ed6:	f7fd fe8f 	bl	8004bf8 <HAL_GetTick>
 8006eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006edc:	e00e      	b.n	8006efc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ede:	f7fd fe8b 	bl	8004bf8 <HAL_GetTick>
 8006ee2:	4602      	mov	r2, r0
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	1ad3      	subs	r3, r2, r3
 8006ee8:	2b02      	cmp	r3, #2
 8006eea:	d907      	bls.n	8006efc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e150      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	42470000 	.word	0x42470000
 8006ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006efc:	4b88      	ldr	r3, [pc, #544]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006efe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f00:	f003 0302 	and.w	r3, r3, #2
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1ea      	bne.n	8006ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f003 0304 	and.w	r3, r3, #4
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f000 8097 	beq.w	8007044 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f16:	2300      	movs	r3, #0
 8006f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f1a:	4b81      	ldr	r3, [pc, #516]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10f      	bne.n	8006f46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f26:	2300      	movs	r3, #0
 8006f28:	60bb      	str	r3, [r7, #8]
 8006f2a:	4b7d      	ldr	r3, [pc, #500]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2e:	4a7c      	ldr	r2, [pc, #496]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8006f36:	4b7a      	ldr	r3, [pc, #488]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f3e:	60bb      	str	r3, [r7, #8]
 8006f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f46:	4b77      	ldr	r3, [pc, #476]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d118      	bne.n	8006f84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f52:	4b74      	ldr	r3, [pc, #464]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a73      	ldr	r2, [pc, #460]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f5e:	f7fd fe4b 	bl	8004bf8 <HAL_GetTick>
 8006f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f64:	e008      	b.n	8006f78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f66:	f7fd fe47 	bl	8004bf8 <HAL_GetTick>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	1ad3      	subs	r3, r2, r3
 8006f70:	2b02      	cmp	r3, #2
 8006f72:	d901      	bls.n	8006f78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006f74:	2303      	movs	r3, #3
 8006f76:	e10c      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f78:	4b6a      	ldr	r3, [pc, #424]	@ (8007124 <HAL_RCC_OscConfig+0x474>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d0f0      	beq.n	8006f66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d106      	bne.n	8006f9a <HAL_RCC_OscConfig+0x2ea>
 8006f8c:	4b64      	ldr	r3, [pc, #400]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f90:	4a63      	ldr	r2, [pc, #396]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	6713      	str	r3, [r2, #112]	@ 0x70
 8006f98:	e01c      	b.n	8006fd4 <HAL_RCC_OscConfig+0x324>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	2b05      	cmp	r3, #5
 8006fa0:	d10c      	bne.n	8006fbc <HAL_RCC_OscConfig+0x30c>
 8006fa2:	4b5f      	ldr	r3, [pc, #380]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fa6:	4a5e      	ldr	r2, [pc, #376]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	f043 0304 	orr.w	r3, r3, #4
 8006fac:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fae:	4b5c      	ldr	r3, [pc, #368]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fb2:	4a5b      	ldr	r2, [pc, #364]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fba:	e00b      	b.n	8006fd4 <HAL_RCC_OscConfig+0x324>
 8006fbc:	4b58      	ldr	r3, [pc, #352]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fc0:	4a57      	ldr	r2, [pc, #348]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fc8:	4b55      	ldr	r3, [pc, #340]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006fcc:	4a54      	ldr	r2, [pc, #336]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006fce:	f023 0304 	bic.w	r3, r3, #4
 8006fd2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d015      	beq.n	8007008 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fdc:	f7fd fe0c 	bl	8004bf8 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fe2:	e00a      	b.n	8006ffa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006fe4:	f7fd fe08 	bl	8004bf8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d901      	bls.n	8006ffa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ff6:	2303      	movs	r3, #3
 8006ff8:	e0cb      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ffa:	4b49      	ldr	r3, [pc, #292]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8006ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ffe:	f003 0302 	and.w	r3, r3, #2
 8007002:	2b00      	cmp	r3, #0
 8007004:	d0ee      	beq.n	8006fe4 <HAL_RCC_OscConfig+0x334>
 8007006:	e014      	b.n	8007032 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007008:	f7fd fdf6 	bl	8004bf8 <HAL_GetTick>
 800700c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800700e:	e00a      	b.n	8007026 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007010:	f7fd fdf2 	bl	8004bf8 <HAL_GetTick>
 8007014:	4602      	mov	r2, r0
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800701e:	4293      	cmp	r3, r2
 8007020:	d901      	bls.n	8007026 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007022:	2303      	movs	r3, #3
 8007024:	e0b5      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007026:	4b3e      	ldr	r3, [pc, #248]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	f003 0302 	and.w	r3, r3, #2
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1ee      	bne.n	8007010 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007032:	7dfb      	ldrb	r3, [r7, #23]
 8007034:	2b01      	cmp	r3, #1
 8007036:	d105      	bne.n	8007044 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007038:	4b39      	ldr	r3, [pc, #228]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 800703a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703c:	4a38      	ldr	r2, [pc, #224]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 800703e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007042:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	f000 80a1 	beq.w	8007190 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800704e:	4b34      	ldr	r3, [pc, #208]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b08      	cmp	r3, #8
 8007058:	d05c      	beq.n	8007114 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d141      	bne.n	80070e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007062:	4b31      	ldr	r3, [pc, #196]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 8007064:	2200      	movs	r2, #0
 8007066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007068:	f7fd fdc6 	bl	8004bf8 <HAL_GetTick>
 800706c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800706e:	e008      	b.n	8007082 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007070:	f7fd fdc2 	bl	8004bf8 <HAL_GetTick>
 8007074:	4602      	mov	r2, r0
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	1ad3      	subs	r3, r2, r3
 800707a:	2b02      	cmp	r3, #2
 800707c:	d901      	bls.n	8007082 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800707e:	2303      	movs	r3, #3
 8007080:	e087      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007082:	4b27      	ldr	r3, [pc, #156]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1f0      	bne.n	8007070 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	69da      	ldr	r2, [r3, #28]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	431a      	orrs	r2, r3
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800709c:	019b      	lsls	r3, r3, #6
 800709e:	431a      	orrs	r2, r3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a4:	085b      	lsrs	r3, r3, #1
 80070a6:	3b01      	subs	r3, #1
 80070a8:	041b      	lsls	r3, r3, #16
 80070aa:	431a      	orrs	r2, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	061b      	lsls	r3, r3, #24
 80070b2:	491b      	ldr	r1, [pc, #108]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 80070b4:	4313      	orrs	r3, r2
 80070b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80070b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 80070ba:	2201      	movs	r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070be:	f7fd fd9b 	bl	8004bf8 <HAL_GetTick>
 80070c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070c4:	e008      	b.n	80070d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070c6:	f7fd fd97 	bl	8004bf8 <HAL_GetTick>
 80070ca:	4602      	mov	r2, r0
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d901      	bls.n	80070d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80070d4:	2303      	movs	r3, #3
 80070d6:	e05c      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070d8:	4b11      	ldr	r3, [pc, #68]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d0f0      	beq.n	80070c6 <HAL_RCC_OscConfig+0x416>
 80070e4:	e054      	b.n	8007190 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070e6:	4b10      	ldr	r3, [pc, #64]	@ (8007128 <HAL_RCC_OscConfig+0x478>)
 80070e8:	2200      	movs	r2, #0
 80070ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070ec:	f7fd fd84 	bl	8004bf8 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070f4:	f7fd fd80 	bl	8004bf8 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e045      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007106:	4b06      	ldr	r3, [pc, #24]	@ (8007120 <HAL_RCC_OscConfig+0x470>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f0      	bne.n	80070f4 <HAL_RCC_OscConfig+0x444>
 8007112:	e03d      	b.n	8007190 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	2b01      	cmp	r3, #1
 800711a:	d107      	bne.n	800712c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800711c:	2301      	movs	r3, #1
 800711e:	e038      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
 8007120:	40023800 	.word	0x40023800
 8007124:	40007000 	.word	0x40007000
 8007128:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800712c:	4b1b      	ldr	r3, [pc, #108]	@ (800719c <HAL_RCC_OscConfig+0x4ec>)
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d028      	beq.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007144:	429a      	cmp	r2, r3
 8007146:	d121      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007152:	429a      	cmp	r2, r3
 8007154:	d11a      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800715c:	4013      	ands	r3, r2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007162:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007164:	4293      	cmp	r3, r2
 8007166:	d111      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007172:	085b      	lsrs	r3, r3, #1
 8007174:	3b01      	subs	r3, #1
 8007176:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007178:	429a      	cmp	r2, r3
 800717a:	d107      	bne.n	800718c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007188:	429a      	cmp	r2, r3
 800718a:	d001      	beq.n	8007190 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800718c:	2301      	movs	r3, #1
 800718e:	e000      	b.n	8007192 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3718      	adds	r7, #24
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40023800 	.word	0x40023800

080071a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0cc      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071b4:	4b68      	ldr	r3, [pc, #416]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0307 	and.w	r3, r3, #7
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	429a      	cmp	r2, r3
 80071c0:	d90c      	bls.n	80071dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071c2:	4b65      	ldr	r3, [pc, #404]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071c4:	683a      	ldr	r2, [r7, #0]
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071ca:	4b63      	ldr	r3, [pc, #396]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0307 	and.w	r3, r3, #7
 80071d2:	683a      	ldr	r2, [r7, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d001      	beq.n	80071dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	e0b8      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d020      	beq.n	800722a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0304 	and.w	r3, r3, #4
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d005      	beq.n	8007200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071f4:	4b59      	ldr	r3, [pc, #356]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	4a58      	ldr	r2, [pc, #352]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80071fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80071fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f003 0308 	and.w	r3, r3, #8
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800720c:	4b53      	ldr	r3, [pc, #332]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	4a52      	ldr	r2, [pc, #328]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007218:	4b50      	ldr	r3, [pc, #320]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	494d      	ldr	r1, [pc, #308]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007226:	4313      	orrs	r3, r2
 8007228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d044      	beq.n	80072c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d107      	bne.n	800724e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800723e:	4b47      	ldr	r3, [pc, #284]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d119      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800724a:	2301      	movs	r3, #1
 800724c:	e07f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	685b      	ldr	r3, [r3, #4]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d003      	beq.n	800725e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800725a:	2b03      	cmp	r3, #3
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800725e:	4b3f      	ldr	r3, [pc, #252]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d109      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e06f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800726e:	4b3b      	ldr	r3, [pc, #236]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d101      	bne.n	800727e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	e067      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800727e:	4b37      	ldr	r3, [pc, #220]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f023 0203 	bic.w	r2, r3, #3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	4934      	ldr	r1, [pc, #208]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007290:	f7fd fcb2 	bl	8004bf8 <HAL_GetTick>
 8007294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007296:	e00a      	b.n	80072ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007298:	f7fd fcae 	bl	8004bf8 <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d901      	bls.n	80072ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80072aa:	2303      	movs	r3, #3
 80072ac:	e04f      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072ae:	4b2b      	ldr	r3, [pc, #172]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 020c 	and.w	r2, r3, #12
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	429a      	cmp	r2, r3
 80072be:	d1eb      	bne.n	8007298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80072c0:	4b25      	ldr	r3, [pc, #148]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f003 0307 	and.w	r3, r3, #7
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d20c      	bcs.n	80072e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072ce:	4b22      	ldr	r3, [pc, #136]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072d0:	683a      	ldr	r2, [r7, #0]
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072d6:	4b20      	ldr	r3, [pc, #128]	@ (8007358 <HAL_RCC_ClockConfig+0x1b8>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	683a      	ldr	r2, [r7, #0]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d001      	beq.n	80072e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e032      	b.n	800734e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f003 0304 	and.w	r3, r3, #4
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d008      	beq.n	8007306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072f4:	4b19      	ldr	r3, [pc, #100]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	4916      	ldr	r1, [pc, #88]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007302:	4313      	orrs	r3, r2
 8007304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d009      	beq.n	8007326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007312:	4b12      	ldr	r3, [pc, #72]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	490e      	ldr	r1, [pc, #56]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 8007322:	4313      	orrs	r3, r2
 8007324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007326:	f000 f821 	bl	800736c <HAL_RCC_GetSysClockFreq>
 800732a:	4602      	mov	r2, r0
 800732c:	4b0b      	ldr	r3, [pc, #44]	@ (800735c <HAL_RCC_ClockConfig+0x1bc>)
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	490a      	ldr	r1, [pc, #40]	@ (8007360 <HAL_RCC_ClockConfig+0x1c0>)
 8007338:	5ccb      	ldrb	r3, [r1, r3]
 800733a:	fa22 f303 	lsr.w	r3, r2, r3
 800733e:	4a09      	ldr	r2, [pc, #36]	@ (8007364 <HAL_RCC_ClockConfig+0x1c4>)
 8007340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007342:	4b09      	ldr	r3, [pc, #36]	@ (8007368 <HAL_RCC_ClockConfig+0x1c8>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7fd fc12 	bl	8004b70 <HAL_InitTick>

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40023c00 	.word	0x40023c00
 800735c:	40023800 	.word	0x40023800
 8007360:	0800b6ec 	.word	0x0800b6ec
 8007364:	20000058 	.word	0x20000058
 8007368:	2000005c 	.word	0x2000005c

0800736c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800736c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007370:	b090      	sub	sp, #64	@ 0x40
 8007372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007374:	2300      	movs	r3, #0
 8007376:	637b      	str	r3, [r7, #52]	@ 0x34
 8007378:	2300      	movs	r3, #0
 800737a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800737c:	2300      	movs	r3, #0
 800737e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007384:	4b59      	ldr	r3, [pc, #356]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 030c 	and.w	r3, r3, #12
 800738c:	2b08      	cmp	r3, #8
 800738e:	d00d      	beq.n	80073ac <HAL_RCC_GetSysClockFreq+0x40>
 8007390:	2b08      	cmp	r3, #8
 8007392:	f200 80a1 	bhi.w	80074d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <HAL_RCC_GetSysClockFreq+0x34>
 800739a:	2b04      	cmp	r3, #4
 800739c:	d003      	beq.n	80073a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800739e:	e09b      	b.n	80074d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80073a0:	4b53      	ldr	r3, [pc, #332]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80073a2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80073a4:	e09b      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80073a6:	4b53      	ldr	r3, [pc, #332]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073aa:	e098      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80073ac:	4b4f      	ldr	r3, [pc, #316]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80073b4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80073b6:	4b4d      	ldr	r3, [pc, #308]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d028      	beq.n	8007414 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80073c2:	4b4a      	ldr	r3, [pc, #296]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80073c4:	685b      	ldr	r3, [r3, #4]
 80073c6:	099b      	lsrs	r3, r3, #6
 80073c8:	2200      	movs	r2, #0
 80073ca:	623b      	str	r3, [r7, #32]
 80073cc:	627a      	str	r2, [r7, #36]	@ 0x24
 80073ce:	6a3b      	ldr	r3, [r7, #32]
 80073d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80073d4:	2100      	movs	r1, #0
 80073d6:	4b47      	ldr	r3, [pc, #284]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073d8:	fb03 f201 	mul.w	r2, r3, r1
 80073dc:	2300      	movs	r3, #0
 80073de:	fb00 f303 	mul.w	r3, r0, r3
 80073e2:	4413      	add	r3, r2
 80073e4:	4a43      	ldr	r2, [pc, #268]	@ (80074f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80073e6:	fba0 1202 	umull	r1, r2, r0, r2
 80073ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ec:	460a      	mov	r2, r1
 80073ee:	62ba      	str	r2, [r7, #40]	@ 0x28
 80073f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f2:	4413      	add	r3, r2
 80073f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073f8:	2200      	movs	r2, #0
 80073fa:	61bb      	str	r3, [r7, #24]
 80073fc:	61fa      	str	r2, [r7, #28]
 80073fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007402:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007406:	f7f9 fbc3 	bl	8000b90 <__aeabi_uldivmod>
 800740a:	4602      	mov	r2, r0
 800740c:	460b      	mov	r3, r1
 800740e:	4613      	mov	r3, r2
 8007410:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007412:	e053      	b.n	80074bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007414:	4b35      	ldr	r3, [pc, #212]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	099b      	lsrs	r3, r3, #6
 800741a:	2200      	movs	r2, #0
 800741c:	613b      	str	r3, [r7, #16]
 800741e:	617a      	str	r2, [r7, #20]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007426:	f04f 0b00 	mov.w	fp, #0
 800742a:	4652      	mov	r2, sl
 800742c:	465b      	mov	r3, fp
 800742e:	f04f 0000 	mov.w	r0, #0
 8007432:	f04f 0100 	mov.w	r1, #0
 8007436:	0159      	lsls	r1, r3, #5
 8007438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800743c:	0150      	lsls	r0, r2, #5
 800743e:	4602      	mov	r2, r0
 8007440:	460b      	mov	r3, r1
 8007442:	ebb2 080a 	subs.w	r8, r2, sl
 8007446:	eb63 090b 	sbc.w	r9, r3, fp
 800744a:	f04f 0200 	mov.w	r2, #0
 800744e:	f04f 0300 	mov.w	r3, #0
 8007452:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007456:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800745a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800745e:	ebb2 0408 	subs.w	r4, r2, r8
 8007462:	eb63 0509 	sbc.w	r5, r3, r9
 8007466:	f04f 0200 	mov.w	r2, #0
 800746a:	f04f 0300 	mov.w	r3, #0
 800746e:	00eb      	lsls	r3, r5, #3
 8007470:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007474:	00e2      	lsls	r2, r4, #3
 8007476:	4614      	mov	r4, r2
 8007478:	461d      	mov	r5, r3
 800747a:	eb14 030a 	adds.w	r3, r4, sl
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	eb45 030b 	adc.w	r3, r5, fp
 8007484:	607b      	str	r3, [r7, #4]
 8007486:	f04f 0200 	mov.w	r2, #0
 800748a:	f04f 0300 	mov.w	r3, #0
 800748e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007492:	4629      	mov	r1, r5
 8007494:	028b      	lsls	r3, r1, #10
 8007496:	4621      	mov	r1, r4
 8007498:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800749c:	4621      	mov	r1, r4
 800749e:	028a      	lsls	r2, r1, #10
 80074a0:	4610      	mov	r0, r2
 80074a2:	4619      	mov	r1, r3
 80074a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074a6:	2200      	movs	r2, #0
 80074a8:	60bb      	str	r3, [r7, #8]
 80074aa:	60fa      	str	r2, [r7, #12]
 80074ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074b0:	f7f9 fb6e 	bl	8000b90 <__aeabi_uldivmod>
 80074b4:	4602      	mov	r2, r0
 80074b6:	460b      	mov	r3, r1
 80074b8:	4613      	mov	r3, r2
 80074ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80074bc:	4b0b      	ldr	r3, [pc, #44]	@ (80074ec <HAL_RCC_GetSysClockFreq+0x180>)
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	f003 0303 	and.w	r3, r3, #3
 80074c6:	3301      	adds	r3, #1
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80074cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80074ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074d6:	e002      	b.n	80074de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80074d8:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80074dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80074de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	3740      	adds	r7, #64	@ 0x40
 80074e4:	46bd      	mov	sp, r7
 80074e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80074ea:	bf00      	nop
 80074ec:	40023800 	.word	0x40023800
 80074f0:	00f42400 	.word	0x00f42400
 80074f4:	017d7840 	.word	0x017d7840

080074f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f8:	b480      	push	{r7}
 80074fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074fc:	4b03      	ldr	r3, [pc, #12]	@ (800750c <HAL_RCC_GetHCLKFreq+0x14>)
 80074fe:	681b      	ldr	r3, [r3, #0]
}
 8007500:	4618      	mov	r0, r3
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	20000058 	.word	0x20000058

08007510 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007514:	f7ff fff0 	bl	80074f8 <HAL_RCC_GetHCLKFreq>
 8007518:	4602      	mov	r2, r0
 800751a:	4b05      	ldr	r3, [pc, #20]	@ (8007530 <HAL_RCC_GetPCLK1Freq+0x20>)
 800751c:	689b      	ldr	r3, [r3, #8]
 800751e:	0a9b      	lsrs	r3, r3, #10
 8007520:	f003 0307 	and.w	r3, r3, #7
 8007524:	4903      	ldr	r1, [pc, #12]	@ (8007534 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007526:	5ccb      	ldrb	r3, [r1, r3]
 8007528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800752c:	4618      	mov	r0, r3
 800752e:	bd80      	pop	{r7, pc}
 8007530:	40023800 	.word	0x40023800
 8007534:	0800b6fc 	.word	0x0800b6fc

08007538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800753c:	f7ff ffdc 	bl	80074f8 <HAL_RCC_GetHCLKFreq>
 8007540:	4602      	mov	r2, r0
 8007542:	4b05      	ldr	r3, [pc, #20]	@ (8007558 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	0b5b      	lsrs	r3, r3, #13
 8007548:	f003 0307 	and.w	r3, r3, #7
 800754c:	4903      	ldr	r1, [pc, #12]	@ (800755c <HAL_RCC_GetPCLK2Freq+0x24>)
 800754e:	5ccb      	ldrb	r3, [r1, r3]
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40023800 	.word	0x40023800
 800755c:	0800b6fc 	.word	0x0800b6fc

08007560 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d101      	bne.n	8007572 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e07b      	b.n	800766a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007576:	2b00      	cmp	r3, #0
 8007578:	d108      	bne.n	800758c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007582:	d009      	beq.n	8007598 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	61da      	str	r2, [r3, #28]
 800758a:	e005      	b.n	8007598 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2200      	movs	r2, #0
 8007590:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2200      	movs	r2, #0
 8007596:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	2200      	movs	r2, #0
 800759c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80075a4:	b2db      	uxtb	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d106      	bne.n	80075b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7fc fd9e 	bl	80040f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80075e0:	431a      	orrs	r2, r3
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80075ea:	431a      	orrs	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	431a      	orrs	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	431a      	orrs	r2, r3
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007608:	431a      	orrs	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800761c:	ea42 0103 	orr.w	r1, r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	430a      	orrs	r2, r1
 800762e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	699b      	ldr	r3, [r3, #24]
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 0104 	and.w	r1, r3, #4
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763e:	f003 0210 	and.w	r2, r3, #16
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	430a      	orrs	r2, r1
 8007648:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	69da      	ldr	r2, [r3, #28]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007658:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2201      	movs	r2, #1
 8007664:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3708      	adds	r7, #8
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	e041      	b.n	8007708 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800768a:	b2db      	uxtb	r3, r3
 800768c:	2b00      	cmp	r3, #0
 800768e:	d106      	bne.n	800769e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f7fc fd73 	bl	8004184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2202      	movs	r2, #2
 80076a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f000 fcd7 	bl	8008064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2201      	movs	r2, #1
 80076ba:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2201      	movs	r2, #1
 80076c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2201      	movs	r2, #1
 80076ca:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3708      	adds	r7, #8
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007710:	b480      	push	{r7}
 8007712:	b085      	sub	sp, #20
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800771e:	b2db      	uxtb	r3, r3
 8007720:	2b01      	cmp	r3, #1
 8007722:	d001      	beq.n	8007728 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007724:	2301      	movs	r3, #1
 8007726:	e046      	b.n	80077b6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a23      	ldr	r2, [pc, #140]	@ (80077c4 <HAL_TIM_Base_Start+0xb4>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d022      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007742:	d01d      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1f      	ldr	r2, [pc, #124]	@ (80077c8 <HAL_TIM_Base_Start+0xb8>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d018      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1e      	ldr	r2, [pc, #120]	@ (80077cc <HAL_TIM_Base_Start+0xbc>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d013      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a1c      	ldr	r2, [pc, #112]	@ (80077d0 <HAL_TIM_Base_Start+0xc0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d00e      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a1b      	ldr	r2, [pc, #108]	@ (80077d4 <HAL_TIM_Base_Start+0xc4>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d009      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a19      	ldr	r2, [pc, #100]	@ (80077d8 <HAL_TIM_Base_Start+0xc8>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <HAL_TIM_Base_Start+0x70>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	4a18      	ldr	r2, [pc, #96]	@ (80077dc <HAL_TIM_Base_Start+0xcc>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d111      	bne.n	80077a4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 0307 	and.w	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2b06      	cmp	r3, #6
 8007790:	d010      	beq.n	80077b4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0201 	orr.w	r2, r2, #1
 80077a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077a2:	e007      	b.n	80077b4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681a      	ldr	r2, [r3, #0]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f042 0201 	orr.w	r2, r2, #1
 80077b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b4:	2300      	movs	r3, #0
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	40010000 	.word	0x40010000
 80077c8:	40000400 	.word	0x40000400
 80077cc:	40000800 	.word	0x40000800
 80077d0:	40000c00 	.word	0x40000c00
 80077d4:	40010400 	.word	0x40010400
 80077d8:	40014000 	.word	0x40014000
 80077dc:	40001800 	.word	0x40001800

080077e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b085      	sub	sp, #20
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d001      	beq.n	80077f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80077f4:	2301      	movs	r3, #1
 80077f6:	e04e      	b.n	8007896 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68da      	ldr	r2, [r3, #12]
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f042 0201 	orr.w	r2, r2, #1
 800780e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a23      	ldr	r2, [pc, #140]	@ (80078a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d022      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007822:	d01d      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1f      	ldr	r2, [pc, #124]	@ (80078a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d018      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1e      	ldr	r2, [pc, #120]	@ (80078ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d013      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1c      	ldr	r2, [pc, #112]	@ (80078b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d00e      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d009      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a19      	ldr	r2, [pc, #100]	@ (80078b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d004      	beq.n	8007860 <HAL_TIM_Base_Start_IT+0x80>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a18      	ldr	r2, [pc, #96]	@ (80078bc <HAL_TIM_Base_Start_IT+0xdc>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d111      	bne.n	8007884 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b06      	cmp	r3, #6
 8007870:	d010      	beq.n	8007894 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007882:	e007      	b.n	8007894 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	681a      	ldr	r2, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f042 0201 	orr.w	r2, r2, #1
 8007892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40010000 	.word	0x40010000
 80078a8:	40000400 	.word	0x40000400
 80078ac:	40000800 	.word	0x40000800
 80078b0:	40000c00 	.word	0x40000c00
 80078b4:	40010400 	.word	0x40010400
 80078b8:	40014000 	.word	0x40014000
 80078bc:	40001800 	.word	0x40001800

080078c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b082      	sub	sp, #8
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e041      	b.n	8007956 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d106      	bne.n	80078ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f7fc fc9e 	bl	8004228 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2202      	movs	r2, #2
 80078f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4619      	mov	r1, r3
 80078fe:	4610      	mov	r0, r2
 8007900:	f000 fbb0 	bl	8008064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
	...

08007960 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b084      	sub	sp, #16
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d109      	bne.n	8007984 <HAL_TIM_PWM_Start+0x24>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b01      	cmp	r3, #1
 800797a:	bf14      	ite	ne
 800797c:	2301      	movne	r3, #1
 800797e:	2300      	moveq	r3, #0
 8007980:	b2db      	uxtb	r3, r3
 8007982:	e022      	b.n	80079ca <HAL_TIM_PWM_Start+0x6a>
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	2b04      	cmp	r3, #4
 8007988:	d109      	bne.n	800799e <HAL_TIM_PWM_Start+0x3e>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b01      	cmp	r3, #1
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e015      	b.n	80079ca <HAL_TIM_PWM_Start+0x6a>
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	2b08      	cmp	r3, #8
 80079a2:	d109      	bne.n	80079b8 <HAL_TIM_PWM_Start+0x58>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	e008      	b.n	80079ca <HAL_TIM_PWM_Start+0x6a>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	bf14      	ite	ne
 80079c4:	2301      	movne	r3, #1
 80079c6:	2300      	moveq	r3, #0
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d001      	beq.n	80079d2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80079ce:	2301      	movs	r3, #1
 80079d0:	e07c      	b.n	8007acc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d104      	bne.n	80079e2 <HAL_TIM_PWM_Start+0x82>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2202      	movs	r2, #2
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80079e0:	e013      	b.n	8007a0a <HAL_TIM_PWM_Start+0xaa>
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d104      	bne.n	80079f2 <HAL_TIM_PWM_Start+0x92>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2202      	movs	r2, #2
 80079ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80079f0:	e00b      	b.n	8007a0a <HAL_TIM_PWM_Start+0xaa>
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	2b08      	cmp	r3, #8
 80079f6:	d104      	bne.n	8007a02 <HAL_TIM_PWM_Start+0xa2>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2202      	movs	r2, #2
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a00:	e003      	b.n	8007a0a <HAL_TIM_PWM_Start+0xaa>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	2202      	movs	r2, #2
 8007a06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	6839      	ldr	r1, [r7, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 fe10 	bl	8008638 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8007ad4 <HAL_TIM_PWM_Start+0x174>)
 8007a1e:	4293      	cmp	r3, r2
 8007a20:	d004      	beq.n	8007a2c <HAL_TIM_PWM_Start+0xcc>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad8 <HAL_TIM_PWM_Start+0x178>)
 8007a28:	4293      	cmp	r3, r2
 8007a2a:	d101      	bne.n	8007a30 <HAL_TIM_PWM_Start+0xd0>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e000      	b.n	8007a32 <HAL_TIM_PWM_Start+0xd2>
 8007a30:	2300      	movs	r3, #0
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d007      	beq.n	8007a46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a44:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a22      	ldr	r2, [pc, #136]	@ (8007ad4 <HAL_TIM_PWM_Start+0x174>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d022      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a58:	d01d      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8007adc <HAL_TIM_PWM_Start+0x17c>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d018      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae0 <HAL_TIM_PWM_Start+0x180>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d013      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a1c      	ldr	r2, [pc, #112]	@ (8007ae4 <HAL_TIM_PWM_Start+0x184>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d00e      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a16      	ldr	r2, [pc, #88]	@ (8007ad8 <HAL_TIM_PWM_Start+0x178>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d009      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a18      	ldr	r2, [pc, #96]	@ (8007ae8 <HAL_TIM_PWM_Start+0x188>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d004      	beq.n	8007a96 <HAL_TIM_PWM_Start+0x136>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	4a16      	ldr	r2, [pc, #88]	@ (8007aec <HAL_TIM_PWM_Start+0x18c>)
 8007a92:	4293      	cmp	r3, r2
 8007a94:	d111      	bne.n	8007aba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f003 0307 	and.w	r3, r3, #7
 8007aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2b06      	cmp	r3, #6
 8007aa6:	d010      	beq.n	8007aca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ab8:	e007      	b.n	8007aca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0201 	orr.w	r2, r2, #1
 8007ac8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	40010000 	.word	0x40010000
 8007ad8:	40010400 	.word	0x40010400
 8007adc:	40000400 	.word	0x40000400
 8007ae0:	40000800 	.word	0x40000800
 8007ae4:	40000c00 	.word	0x40000c00
 8007ae8:	40014000 	.word	0x40014000
 8007aec:	40001800 	.word	0x40001800

08007af0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	d122      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0302 	and.w	r3, r3, #2
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d11b      	bne.n	8007b4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f06f 0202 	mvn.w	r2, #2
 8007b1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2201      	movs	r2, #1
 8007b22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d003      	beq.n	8007b3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fa77 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007b38:	e005      	b.n	8007b46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 fa69 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b40:	6878      	ldr	r0, [r7, #4]
 8007b42:	f000 fa7a 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d122      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	f003 0304 	and.w	r3, r3, #4
 8007b64:	2b04      	cmp	r3, #4
 8007b66:	d11b      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f06f 0204 	mvn.w	r2, #4
 8007b70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2202      	movs	r2, #2
 8007b76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d003      	beq.n	8007b8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fa4d 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007b8c:	e005      	b.n	8007b9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 fa3f 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fa50 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0308 	and.w	r3, r3, #8
 8007baa:	2b08      	cmp	r3, #8
 8007bac:	d122      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0308 	and.w	r3, r3, #8
 8007bb8:	2b08      	cmp	r3, #8
 8007bba:	d11b      	bne.n	8007bf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0208 	mvn.w	r2, #8
 8007bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2204      	movs	r2, #4
 8007bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	f003 0303 	and.w	r3, r3, #3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d003      	beq.n	8007be2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 fa23 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007be0:	e005      	b.n	8007bee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 fa15 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 fa26 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	f003 0310 	and.w	r3, r3, #16
 8007bfe:	2b10      	cmp	r3, #16
 8007c00:	d122      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f003 0310 	and.w	r3, r3, #16
 8007c0c:	2b10      	cmp	r3, #16
 8007c0e:	d11b      	bne.n	8007c48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f06f 0210 	mvn.w	r2, #16
 8007c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2208      	movs	r2, #8
 8007c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	69db      	ldr	r3, [r3, #28]
 8007c26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f9f9 	bl	8008026 <HAL_TIM_IC_CaptureCallback>
 8007c34:	e005      	b.n	8007c42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f9eb 	bl	8008012 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 f9fc 	bl	800803a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	f003 0301 	and.w	r3, r3, #1
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10e      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f003 0301 	and.w	r3, r3, #1
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d107      	bne.n	8007c74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f06f 0201 	mvn.w	r2, #1
 8007c6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7fa fdb4 	bl	80027dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c7e:	2b80      	cmp	r3, #128	@ 0x80
 8007c80:	d10e      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c8c:	2b80      	cmp	r3, #128	@ 0x80
 8007c8e:	d107      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007c98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 fd78 	bl	8008790 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007caa:	2b40      	cmp	r3, #64	@ 0x40
 8007cac:	d10e      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cb8:	2b40      	cmp	r3, #64	@ 0x40
 8007cba:	d107      	bne.n	8007ccc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007cc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f9c1 	bl	800804e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b20      	cmp	r3, #32
 8007cd8:	d10e      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	f003 0320 	and.w	r3, r3, #32
 8007ce4:	2b20      	cmp	r3, #32
 8007ce6:	d107      	bne.n	8007cf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f06f 0220 	mvn.w	r2, #32
 8007cf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fd42 	bl	800877c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d101      	bne.n	8007d1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007d1a:	2302      	movs	r3, #2
 8007d1c:	e0ae      	b.n	8007e7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2201      	movs	r2, #1
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2b0c      	cmp	r3, #12
 8007d2a:	f200 809f 	bhi.w	8007e6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d69 	.word	0x08007d69
 8007d38:	08007e6d 	.word	0x08007e6d
 8007d3c:	08007e6d 	.word	0x08007e6d
 8007d40:	08007e6d 	.word	0x08007e6d
 8007d44:	08007da9 	.word	0x08007da9
 8007d48:	08007e6d 	.word	0x08007e6d
 8007d4c:	08007e6d 	.word	0x08007e6d
 8007d50:	08007e6d 	.word	0x08007e6d
 8007d54:	08007deb 	.word	0x08007deb
 8007d58:	08007e6d 	.word	0x08007e6d
 8007d5c:	08007e6d 	.word	0x08007e6d
 8007d60:	08007e6d 	.word	0x08007e6d
 8007d64:	08007e2b 	.word	0x08007e2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68b9      	ldr	r1, [r7, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 fa18 	bl	80081a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f042 0208 	orr.w	r2, r2, #8
 8007d82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	699a      	ldr	r2, [r3, #24]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f022 0204 	bic.w	r2, r2, #4
 8007d92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6999      	ldr	r1, [r3, #24]
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	691a      	ldr	r2, [r3, #16]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	619a      	str	r2, [r3, #24]
      break;
 8007da6:	e064      	b.n	8007e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	4618      	mov	r0, r3
 8007db0:	f000 fa68 	bl	8008284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	699a      	ldr	r2, [r3, #24]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007dc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	699a      	ldr	r2, [r3, #24]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007dd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	6999      	ldr	r1, [r3, #24]
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	021a      	lsls	r2, r3, #8
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	430a      	orrs	r2, r1
 8007de6:	619a      	str	r2, [r3, #24]
      break;
 8007de8:	e043      	b.n	8007e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68b9      	ldr	r1, [r7, #8]
 8007df0:	4618      	mov	r0, r3
 8007df2:	f000 fabd 	bl	8008370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f042 0208 	orr.w	r2, r2, #8
 8007e04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69da      	ldr	r2, [r3, #28]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 0204 	bic.w	r2, r2, #4
 8007e14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	69d9      	ldr	r1, [r3, #28]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	691a      	ldr	r2, [r3, #16]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	61da      	str	r2, [r3, #28]
      break;
 8007e28:	e023      	b.n	8007e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68b9      	ldr	r1, [r7, #8]
 8007e30:	4618      	mov	r0, r3
 8007e32:	f000 fb11 	bl	8008458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	69da      	ldr	r2, [r3, #28]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69da      	ldr	r2, [r3, #28]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007e54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	69d9      	ldr	r1, [r3, #28]
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	021a      	lsls	r2, r3, #8
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	61da      	str	r2, [r3, #28]
      break;
 8007e6a:	e002      	b.n	8007e72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3718      	adds	r7, #24
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
 8007e8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e8e:	2300      	movs	r3, #0
 8007e90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d101      	bne.n	8007ea0 <HAL_TIM_ConfigClockSource+0x1c>
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e0b4      	b.n	800800a <HAL_TIM_ConfigClockSource+0x186>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2201      	movs	r2, #1
 8007ea4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007ebe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ec6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68ba      	ldr	r2, [r7, #8]
 8007ece:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ed8:	d03e      	beq.n	8007f58 <HAL_TIM_ConfigClockSource+0xd4>
 8007eda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ede:	f200 8087 	bhi.w	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ee2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ee6:	f000 8086 	beq.w	8007ff6 <HAL_TIM_ConfigClockSource+0x172>
 8007eea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007eee:	d87f      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef0:	2b70      	cmp	r3, #112	@ 0x70
 8007ef2:	d01a      	beq.n	8007f2a <HAL_TIM_ConfigClockSource+0xa6>
 8007ef4:	2b70      	cmp	r3, #112	@ 0x70
 8007ef6:	d87b      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ef8:	2b60      	cmp	r3, #96	@ 0x60
 8007efa:	d050      	beq.n	8007f9e <HAL_TIM_ConfigClockSource+0x11a>
 8007efc:	2b60      	cmp	r3, #96	@ 0x60
 8007efe:	d877      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f00:	2b50      	cmp	r3, #80	@ 0x50
 8007f02:	d03c      	beq.n	8007f7e <HAL_TIM_ConfigClockSource+0xfa>
 8007f04:	2b50      	cmp	r3, #80	@ 0x50
 8007f06:	d873      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f08:	2b40      	cmp	r3, #64	@ 0x40
 8007f0a:	d058      	beq.n	8007fbe <HAL_TIM_ConfigClockSource+0x13a>
 8007f0c:	2b40      	cmp	r3, #64	@ 0x40
 8007f0e:	d86f      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f10:	2b30      	cmp	r3, #48	@ 0x30
 8007f12:	d064      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x15a>
 8007f14:	2b30      	cmp	r3, #48	@ 0x30
 8007f16:	d86b      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f18:	2b20      	cmp	r3, #32
 8007f1a:	d060      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x15a>
 8007f1c:	2b20      	cmp	r3, #32
 8007f1e:	d867      	bhi.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d05c      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x15a>
 8007f24:	2b10      	cmp	r3, #16
 8007f26:	d05a      	beq.n	8007fde <HAL_TIM_ConfigClockSource+0x15a>
 8007f28:	e062      	b.n	8007ff0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6818      	ldr	r0, [r3, #0]
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	6899      	ldr	r1, [r3, #8]
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f000 fb5d 	bl	80085f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007f4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	609a      	str	r2, [r3, #8]
      break;
 8007f56:	e04f      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6818      	ldr	r0, [r3, #0]
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	6899      	ldr	r1, [r3, #8]
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685a      	ldr	r2, [r3, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	68db      	ldr	r3, [r3, #12]
 8007f68:	f000 fb46 	bl	80085f8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	689a      	ldr	r2, [r3, #8]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007f7a:	609a      	str	r2, [r3, #8]
      break;
 8007f7c:	e03c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	6859      	ldr	r1, [r3, #4]
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	68db      	ldr	r3, [r3, #12]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f000 faba 	bl	8008504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	2150      	movs	r1, #80	@ 0x50
 8007f96:	4618      	mov	r0, r3
 8007f98:	f000 fb13 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 8007f9c:	e02c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6818      	ldr	r0, [r3, #0]
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	6859      	ldr	r1, [r3, #4]
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	461a      	mov	r2, r3
 8007fac:	f000 fad9 	bl	8008562 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2160      	movs	r1, #96	@ 0x60
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f000 fb03 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 8007fbc:	e01c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6818      	ldr	r0, [r3, #0]
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	6859      	ldr	r1, [r3, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	f000 fa9a 	bl	8008504 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2140      	movs	r1, #64	@ 0x40
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f000 faf3 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 8007fdc:	e00c      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	4610      	mov	r0, r2
 8007fea:	f000 faea 	bl	80085c2 <TIM_ITRx_SetConfig>
      break;
 8007fee:	e003      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ff4:	e000      	b.n	8007ff8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ff6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008008:	7bfb      	ldrb	r3, [r7, #15]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3710      	adds	r7, #16
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}

08008012 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr

0800804e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800804e:	b480      	push	{r7}
 8008050:	b083      	sub	sp, #12
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008056:	bf00      	nop
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
	...

08008064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008064:	b480      	push	{r7}
 8008066:	b085      	sub	sp, #20
 8008068:	af00      	add	r7, sp, #0
 800806a:	6078      	str	r0, [r7, #4]
 800806c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	4a40      	ldr	r2, [pc, #256]	@ (8008178 <TIM_Base_SetConfig+0x114>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d013      	beq.n	80080a4 <TIM_Base_SetConfig+0x40>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008082:	d00f      	beq.n	80080a4 <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a3d      	ldr	r2, [pc, #244]	@ (800817c <TIM_Base_SetConfig+0x118>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d00b      	beq.n	80080a4 <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a3c      	ldr	r2, [pc, #240]	@ (8008180 <TIM_Base_SetConfig+0x11c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d007      	beq.n	80080a4 <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3b      	ldr	r2, [pc, #236]	@ (8008184 <TIM_Base_SetConfig+0x120>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d003      	beq.n	80080a4 <TIM_Base_SetConfig+0x40>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a3a      	ldr	r2, [pc, #232]	@ (8008188 <TIM_Base_SetConfig+0x124>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d108      	bne.n	80080b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80080aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	4a2f      	ldr	r2, [pc, #188]	@ (8008178 <TIM_Base_SetConfig+0x114>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d02b      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080c4:	d027      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4a2c      	ldr	r2, [pc, #176]	@ (800817c <TIM_Base_SetConfig+0x118>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d023      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2b      	ldr	r2, [pc, #172]	@ (8008180 <TIM_Base_SetConfig+0x11c>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d01f      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2a      	ldr	r2, [pc, #168]	@ (8008184 <TIM_Base_SetConfig+0x120>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01b      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a29      	ldr	r2, [pc, #164]	@ (8008188 <TIM_Base_SetConfig+0x124>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d017      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a28      	ldr	r2, [pc, #160]	@ (800818c <TIM_Base_SetConfig+0x128>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d013      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a27      	ldr	r2, [pc, #156]	@ (8008190 <TIM_Base_SetConfig+0x12c>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d00f      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a26      	ldr	r2, [pc, #152]	@ (8008194 <TIM_Base_SetConfig+0x130>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00b      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a25      	ldr	r2, [pc, #148]	@ (8008198 <TIM_Base_SetConfig+0x134>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d007      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a24      	ldr	r2, [pc, #144]	@ (800819c <TIM_Base_SetConfig+0x138>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d003      	beq.n	8008116 <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a23      	ldr	r2, [pc, #140]	@ (80081a0 <TIM_Base_SetConfig+0x13c>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d108      	bne.n	8008128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800811c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	4313      	orrs	r3, r2
 8008126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	4313      	orrs	r3, r2
 8008134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	689a      	ldr	r2, [r3, #8]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a0a      	ldr	r2, [pc, #40]	@ (8008178 <TIM_Base_SetConfig+0x114>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d003      	beq.n	800815c <TIM_Base_SetConfig+0xf8>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a0c      	ldr	r2, [pc, #48]	@ (8008188 <TIM_Base_SetConfig+0x124>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d103      	bne.n	8008164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	691a      	ldr	r2, [r3, #16]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	615a      	str	r2, [r3, #20]
}
 800816a:	bf00      	nop
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	40010000 	.word	0x40010000
 800817c:	40000400 	.word	0x40000400
 8008180:	40000800 	.word	0x40000800
 8008184:	40000c00 	.word	0x40000c00
 8008188:	40010400 	.word	0x40010400
 800818c:	40014000 	.word	0x40014000
 8008190:	40014400 	.word	0x40014400
 8008194:	40014800 	.word	0x40014800
 8008198:	40001800 	.word	0x40001800
 800819c:	40001c00 	.word	0x40001c00
 80081a0:	40002000 	.word	0x40002000

080081a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	f023 0201 	bic.w	r2, r3, #1
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0303 	bic.w	r3, r3, #3
 80081da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	f023 0302 	bic.w	r3, r3, #2
 80081ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	697a      	ldr	r2, [r7, #20]
 80081f4:	4313      	orrs	r3, r2
 80081f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a20      	ldr	r2, [pc, #128]	@ (800827c <TIM_OC1_SetConfig+0xd8>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_OC1_SetConfig+0x64>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a1f      	ldr	r2, [pc, #124]	@ (8008280 <TIM_OC1_SetConfig+0xdc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d10c      	bne.n	8008222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	f023 0308 	bic.w	r3, r3, #8
 800820e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	697a      	ldr	r2, [r7, #20]
 8008216:	4313      	orrs	r3, r2
 8008218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 0304 	bic.w	r3, r3, #4
 8008220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a15      	ldr	r2, [pc, #84]	@ (800827c <TIM_OC1_SetConfig+0xd8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d003      	beq.n	8008232 <TIM_OC1_SetConfig+0x8e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a14      	ldr	r2, [pc, #80]	@ (8008280 <TIM_OC1_SetConfig+0xdc>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d111      	bne.n	8008256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	695b      	ldr	r3, [r3, #20]
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	4313      	orrs	r3, r2
 800824a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	693a      	ldr	r2, [r7, #16]
 8008252:	4313      	orrs	r3, r2
 8008254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68fa      	ldr	r2, [r7, #12]
 8008260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	685a      	ldr	r2, [r3, #4]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	697a      	ldr	r2, [r7, #20]
 800826e:	621a      	str	r2, [r3, #32]
}
 8008270:	bf00      	nop
 8008272:	371c      	adds	r7, #28
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40010000 	.word	0x40010000
 8008280:	40010400 	.word	0x40010400

08008284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008284:	b480      	push	{r7}
 8008286:	b087      	sub	sp, #28
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	f023 0210 	bic.w	r2, r3, #16
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	699b      	ldr	r3, [r3, #24]
 80082aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	021b      	lsls	r3, r3, #8
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	4313      	orrs	r3, r2
 80082c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	f023 0320 	bic.w	r3, r3, #32
 80082ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	011b      	lsls	r3, r3, #4
 80082d6:	697a      	ldr	r2, [r7, #20]
 80082d8:	4313      	orrs	r3, r2
 80082da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a22      	ldr	r2, [pc, #136]	@ (8008368 <TIM_OC2_SetConfig+0xe4>)
 80082e0:	4293      	cmp	r3, r2
 80082e2:	d003      	beq.n	80082ec <TIM_OC2_SetConfig+0x68>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a21      	ldr	r2, [pc, #132]	@ (800836c <TIM_OC2_SetConfig+0xe8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d10d      	bne.n	8008308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082ec:	697b      	ldr	r3, [r7, #20]
 80082ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80082f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	011b      	lsls	r3, r3, #4
 80082fa:	697a      	ldr	r2, [r7, #20]
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008306:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	4a17      	ldr	r2, [pc, #92]	@ (8008368 <TIM_OC2_SetConfig+0xe4>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d003      	beq.n	8008318 <TIM_OC2_SetConfig+0x94>
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a16      	ldr	r2, [pc, #88]	@ (800836c <TIM_OC2_SetConfig+0xe8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d113      	bne.n	8008340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008318:	693b      	ldr	r3, [r7, #16]
 800831a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800831e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	695b      	ldr	r3, [r3, #20]
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	4313      	orrs	r3, r2
 8008332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	699b      	ldr	r3, [r3, #24]
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	693a      	ldr	r2, [r7, #16]
 800833c:	4313      	orrs	r3, r2
 800833e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68fa      	ldr	r2, [r7, #12]
 800834a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	685a      	ldr	r2, [r3, #4]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	697a      	ldr	r2, [r7, #20]
 8008358:	621a      	str	r2, [r3, #32]
}
 800835a:	bf00      	nop
 800835c:	371c      	adds	r7, #28
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40010000 	.word	0x40010000
 800836c:	40010400 	.word	0x40010400

08008370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0303 	bic.w	r3, r3, #3
 80083a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083b2:	697b      	ldr	r3, [r7, #20]
 80083b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80083b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	689b      	ldr	r3, [r3, #8]
 80083be:	021b      	lsls	r3, r3, #8
 80083c0:	697a      	ldr	r2, [r7, #20]
 80083c2:	4313      	orrs	r3, r2
 80083c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	4a21      	ldr	r2, [pc, #132]	@ (8008450 <TIM_OC3_SetConfig+0xe0>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d003      	beq.n	80083d6 <TIM_OC3_SetConfig+0x66>
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a20      	ldr	r2, [pc, #128]	@ (8008454 <TIM_OC3_SetConfig+0xe4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d10d      	bne.n	80083f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80083dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	021b      	lsls	r3, r3, #8
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80083f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a16      	ldr	r2, [pc, #88]	@ (8008450 <TIM_OC3_SetConfig+0xe0>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d003      	beq.n	8008402 <TIM_OC3_SetConfig+0x92>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a15      	ldr	r2, [pc, #84]	@ (8008454 <TIM_OC3_SetConfig+0xe4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d113      	bne.n	800842a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	011b      	lsls	r3, r3, #4
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	4313      	orrs	r3, r2
 800841c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	699b      	ldr	r3, [r3, #24]
 8008422:	011b      	lsls	r3, r3, #4
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	4313      	orrs	r3, r2
 8008428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68fa      	ldr	r2, [r7, #12]
 8008434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	621a      	str	r2, [r3, #32]
}
 8008444:	bf00      	nop
 8008446:	371c      	adds	r7, #28
 8008448:	46bd      	mov	sp, r7
 800844a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844e:	4770      	bx	lr
 8008450:	40010000 	.word	0x40010000
 8008454:	40010400 	.word	0x40010400

08008458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008458:	b480      	push	{r7}
 800845a:	b087      	sub	sp, #28
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a1b      	ldr	r3, [r3, #32]
 8008466:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6a1b      	ldr	r3, [r3, #32]
 8008472:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800848e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	021b      	lsls	r3, r3, #8
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	4313      	orrs	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800849c:	693b      	ldr	r3, [r7, #16]
 800849e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	031b      	lsls	r3, r3, #12
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4313      	orrs	r3, r2
 80084ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	4a12      	ldr	r2, [pc, #72]	@ (80084fc <TIM_OC4_SetConfig+0xa4>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d003      	beq.n	80084c0 <TIM_OC4_SetConfig+0x68>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a11      	ldr	r2, [pc, #68]	@ (8008500 <TIM_OC4_SetConfig+0xa8>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d109      	bne.n	80084d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80084c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	019b      	lsls	r3, r3, #6
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4313      	orrs	r3, r2
 80084d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	621a      	str	r2, [r3, #32]
}
 80084ee:	bf00      	nop
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	40010000 	.word	0x40010000
 8008500:	40010400 	.word	0x40010400

08008504 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008504:	b480      	push	{r7}
 8008506:	b087      	sub	sp, #28
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a1b      	ldr	r3, [r3, #32]
 8008514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	6a1b      	ldr	r3, [r3, #32]
 800851a:	f023 0201 	bic.w	r2, r3, #1
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	699b      	ldr	r3, [r3, #24]
 8008526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800852e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	011b      	lsls	r3, r3, #4
 8008534:	693a      	ldr	r2, [r7, #16]
 8008536:	4313      	orrs	r3, r2
 8008538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	f023 030a 	bic.w	r3, r3, #10
 8008540:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008542:	697a      	ldr	r2, [r7, #20]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	4313      	orrs	r3, r2
 8008548:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	693a      	ldr	r2, [r7, #16]
 800854e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	697a      	ldr	r2, [r7, #20]
 8008554:	621a      	str	r2, [r3, #32]
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008562:	b480      	push	{r7}
 8008564:	b087      	sub	sp, #28
 8008566:	af00      	add	r7, sp, #0
 8008568:	60f8      	str	r0, [r7, #12]
 800856a:	60b9      	str	r1, [r7, #8]
 800856c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	f023 0210 	bic.w	r2, r3, #16
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6a1b      	ldr	r3, [r3, #32]
 8008584:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800858c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	031b      	lsls	r3, r3, #12
 8008592:	697a      	ldr	r2, [r7, #20]
 8008594:	4313      	orrs	r3, r2
 8008596:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800859e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	011b      	lsls	r3, r3, #4
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	693a      	ldr	r2, [r7, #16]
 80085b4:	621a      	str	r2, [r3, #32]
}
 80085b6:	bf00      	nop
 80085b8:	371c      	adds	r7, #28
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]
 80085ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4313      	orrs	r3, r2
 80085e0:	f043 0307 	orr.w	r3, r3, #7
 80085e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	609a      	str	r2, [r3, #8]
}
 80085ec:	bf00      	nop
 80085ee:	3714      	adds	r7, #20
 80085f0:	46bd      	mov	sp, r7
 80085f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f6:	4770      	bx	lr

080085f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80085f8:	b480      	push	{r7}
 80085fa:	b087      	sub	sp, #28
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	60f8      	str	r0, [r7, #12]
 8008600:	60b9      	str	r1, [r7, #8]
 8008602:	607a      	str	r2, [r7, #4]
 8008604:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008612:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	021a      	lsls	r2, r3, #8
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	431a      	orrs	r2, r3
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4313      	orrs	r3, r2
 8008620:	697a      	ldr	r2, [r7, #20]
 8008622:	4313      	orrs	r3, r2
 8008624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	697a      	ldr	r2, [r7, #20]
 800862a:	609a      	str	r2, [r3, #8]
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	f003 031f 	and.w	r3, r3, #31
 800864a:	2201      	movs	r2, #1
 800864c:	fa02 f303 	lsl.w	r3, r2, r3
 8008650:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	6a1a      	ldr	r2, [r3, #32]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	43db      	mvns	r3, r3
 800865a:	401a      	ands	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1a      	ldr	r2, [r3, #32]
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	f003 031f 	and.w	r3, r3, #31
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	431a      	orrs	r2, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	621a      	str	r2, [r3, #32]
}
 8008676:	bf00      	nop
 8008678:	371c      	adds	r7, #28
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
	...

08008684 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008684:	b480      	push	{r7}
 8008686:	b085      	sub	sp, #20
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008694:	2b01      	cmp	r3, #1
 8008696:	d101      	bne.n	800869c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008698:	2302      	movs	r3, #2
 800869a:	e05a      	b.n	8008752 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689b      	ldr	r3, [r3, #8]
 80086ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68fa      	ldr	r2, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	68fa      	ldr	r2, [r7, #12]
 80086d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a21      	ldr	r2, [pc, #132]	@ (8008760 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d022      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80086e8:	d01d      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	4a1d      	ldr	r2, [pc, #116]	@ (8008764 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d018      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	4a1b      	ldr	r2, [pc, #108]	@ (8008768 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80086fa:	4293      	cmp	r3, r2
 80086fc:	d013      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	4a1a      	ldr	r2, [pc, #104]	@ (800876c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d00e      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a18      	ldr	r2, [pc, #96]	@ (8008770 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d009      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4a17      	ldr	r2, [pc, #92]	@ (8008774 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008718:	4293      	cmp	r3, r2
 800871a:	d004      	beq.n	8008726 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4a15      	ldr	r2, [pc, #84]	@ (8008778 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008722:	4293      	cmp	r3, r2
 8008724:	d10c      	bne.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800872c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	68ba      	ldr	r2, [r7, #8]
 8008734:	4313      	orrs	r3, r2
 8008736:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	40010000 	.word	0x40010000
 8008764:	40000400 	.word	0x40000400
 8008768:	40000800 	.word	0x40000800
 800876c:	40000c00 	.word	0x40000c00
 8008770:	40010400 	.word	0x40010400
 8008774:	40014000 	.word	0x40014000
 8008778:	40001800 	.word	0x40001800

0800877c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800877c:	b480      	push	{r7}
 800877e:	b083      	sub	sp, #12
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008784:	bf00      	nop
 8008786:	370c      	adds	r7, #12
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008790:	b480      	push	{r7}
 8008792:	b083      	sub	sp, #12
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008798:	bf00      	nop
 800879a:	370c      	adds	r7, #12
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	e03f      	b.n	8008836 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d106      	bne.n	80087d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f7fb fda8 	bl	8004320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2224      	movs	r2, #36	@ 0x24
 80087d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	68da      	ldr	r2, [r3, #12]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80087e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f000 ffa7 	bl	800973c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	691a      	ldr	r2, [r3, #16]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80087fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	695a      	ldr	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800880c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68da      	ldr	r2, [r3, #12]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800881c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2220      	movs	r2, #32
 8008828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2220      	movs	r2, #32
 8008830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3708      	adds	r7, #8
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b08c      	sub	sp, #48	@ 0x30
 8008844:	af00      	add	r7, sp, #0
 8008846:	60f8      	str	r0, [r7, #12]
 8008848:	60b9      	str	r1, [r7, #8]
 800884a:	4613      	mov	r3, r2
 800884c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008854:	b2db      	uxtb	r3, r3
 8008856:	2b20      	cmp	r3, #32
 8008858:	d165      	bne.n	8008926 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d002      	beq.n	8008866 <HAL_UART_Transmit_DMA+0x26>
 8008860:	88fb      	ldrh	r3, [r7, #6]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d101      	bne.n	800886a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008866:	2301      	movs	r3, #1
 8008868:	e05e      	b.n	8008928 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008870:	2b01      	cmp	r3, #1
 8008872:	d101      	bne.n	8008878 <HAL_UART_Transmit_DMA+0x38>
 8008874:	2302      	movs	r3, #2
 8008876:	e057      	b.n	8008928 <HAL_UART_Transmit_DMA+0xe8>
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2201      	movs	r2, #1
 800887c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	88fa      	ldrh	r2, [r7, #6]
 800888a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	88fa      	ldrh	r2, [r7, #6]
 8008890:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2200      	movs	r2, #0
 8008896:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2221      	movs	r2, #33	@ 0x21
 800889c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088a4:	4a22      	ldr	r2, [pc, #136]	@ (8008930 <HAL_UART_Transmit_DMA+0xf0>)
 80088a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088ac:	4a21      	ldr	r2, [pc, #132]	@ (8008934 <HAL_UART_Transmit_DMA+0xf4>)
 80088ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088b4:	4a20      	ldr	r2, [pc, #128]	@ (8008938 <HAL_UART_Transmit_DMA+0xf8>)
 80088b6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088bc:	2200      	movs	r2, #0
 80088be:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80088c0:	f107 0308 	add.w	r3, r7, #8
 80088c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80088ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088cc:	6819      	ldr	r1, [r3, #0]
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	3304      	adds	r3, #4
 80088d4:	461a      	mov	r2, r3
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	f7fc fbdc 	bl	8005094 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80088e4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	3314      	adds	r3, #20
 80088f4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	e853 3f00 	ldrex	r3, [r3]
 80088fc:	617b      	str	r3, [r7, #20]
   return(result);
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008904:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800890e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008910:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008912:	6a39      	ldr	r1, [r7, #32]
 8008914:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008916:	e841 2300 	strex	r3, r2, [r1]
 800891a:	61fb      	str	r3, [r7, #28]
   return(result);
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d1e5      	bne.n	80088ee <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	e000      	b.n	8008928 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008926:	2302      	movs	r3, #2
  }
}
 8008928:	4618      	mov	r0, r3
 800892a:	3730      	adds	r7, #48	@ 0x30
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	08008fd5 	.word	0x08008fd5
 8008934:	0800906f 	.word	0x0800906f
 8008938:	080091e7 	.word	0x080091e7

0800893c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	60f8      	str	r0, [r7, #12]
 8008944:	60b9      	str	r1, [r7, #8]
 8008946:	4613      	mov	r3, r2
 8008948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b20      	cmp	r3, #32
 8008954:	d11d      	bne.n	8008992 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d002      	beq.n	8008962 <HAL_UART_Receive_DMA+0x26>
 800895c:	88fb      	ldrh	r3, [r7, #6]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d101      	bne.n	8008966 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008962:	2301      	movs	r3, #1
 8008964:	e016      	b.n	8008994 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800896c:	2b01      	cmp	r3, #1
 800896e:	d101      	bne.n	8008974 <HAL_UART_Receive_DMA+0x38>
 8008970:	2302      	movs	r3, #2
 8008972:	e00f      	b.n	8008994 <HAL_UART_Receive_DMA+0x58>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	2200      	movs	r2, #0
 8008980:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008982:	88fb      	ldrh	r3, [r7, #6]
 8008984:	461a      	mov	r2, r3
 8008986:	68b9      	ldr	r1, [r7, #8]
 8008988:	68f8      	ldr	r0, [r7, #12]
 800898a:	f000 fc77 	bl	800927c <UART_Start_Receive_DMA>
 800898e:	4603      	mov	r3, r0
 8008990:	e000      	b.n	8008994 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008992:	2302      	movs	r3, #2
  }
}
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b08c      	sub	sp, #48	@ 0x30
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b20      	cmp	r3, #32
 80089b4:	d152      	bne.n	8008a5c <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80089bc:	88fb      	ldrh	r3, [r7, #6]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d101      	bne.n	80089c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80089c2:	2301      	movs	r3, #1
 80089c4:	e04b      	b.n	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d101      	bne.n	80089d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80089d0:	2302      	movs	r3, #2
 80089d2:	e044      	b.n	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	2201      	movs	r2, #1
 80089e0:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80089e2:	88fb      	ldrh	r3, [r7, #6]
 80089e4:	461a      	mov	r2, r3
 80089e6:	68b9      	ldr	r1, [r7, #8]
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f000 fc47 	bl	800927c <UART_Start_Receive_DMA>
 80089ee:	4603      	mov	r3, r0
 80089f0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80089f4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d12c      	bne.n	8008a56 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d125      	bne.n	8008a50 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008a04:	2300      	movs	r3, #0
 8008a06:	613b      	str	r3, [r7, #16]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	613b      	str	r3, [r7, #16]
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	330c      	adds	r3, #12
 8008a20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a22:	69bb      	ldr	r3, [r7, #24]
 8008a24:	e853 3f00 	ldrex	r3, [r3]
 8008a28:	617b      	str	r3, [r7, #20]
   return(result);
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	f043 0310 	orr.w	r3, r3, #16
 8008a30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	330c      	adds	r3, #12
 8008a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a3a:	627a      	str	r2, [r7, #36]	@ 0x24
 8008a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a3e:	6a39      	ldr	r1, [r7, #32]
 8008a40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008a42:	e841 2300 	strex	r3, r2, [r1]
 8008a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d1e5      	bne.n	8008a1a <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008a4e:	e002      	b.n	8008a56 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008a50:	2301      	movs	r3, #1
 8008a52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008a56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a5a:	e000      	b.n	8008a5e <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008a5c:	2302      	movs	r3, #2
  }
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3730      	adds	r7, #48	@ 0x30
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b0ba      	sub	sp, #232	@ 0xe8
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68db      	ldr	r3, [r3, #12]
 8008a80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008a9e:	f003 030f 	and.w	r3, r3, #15
 8008aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008aa6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10f      	bne.n	8008ace <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ab2:	f003 0320 	and.w	r3, r3, #32
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d009      	beq.n	8008ace <HAL_UART_IRQHandler+0x66>
 8008aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008abe:	f003 0320 	and.w	r3, r3, #32
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d003      	beq.n	8008ace <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 fd7d 	bl	80095c6 <UART_Receive_IT>
      return;
 8008acc:	e256      	b.n	8008f7c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	f000 80de 	beq.w	8008c94 <HAL_UART_IRQHandler+0x22c>
 8008ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d106      	bne.n	8008af2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f000 80d1 	beq.w	8008c94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00b      	beq.n	8008b16 <HAL_UART_IRQHandler+0xae>
 8008afe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b0e:	f043 0201 	orr.w	r2, r3, #1
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b1a:	f003 0304 	and.w	r3, r3, #4
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00b      	beq.n	8008b3a <HAL_UART_IRQHandler+0xd2>
 8008b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b26:	f003 0301 	and.w	r3, r3, #1
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d005      	beq.n	8008b3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b32:	f043 0202 	orr.w	r2, r3, #2
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b3e:	f003 0302 	and.w	r3, r3, #2
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d00b      	beq.n	8008b5e <HAL_UART_IRQHandler+0xf6>
 8008b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b4a:	f003 0301 	and.w	r3, r3, #1
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d005      	beq.n	8008b5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b56:	f043 0204 	orr.w	r2, r3, #4
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b62:	f003 0308 	and.w	r3, r3, #8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d011      	beq.n	8008b8e <HAL_UART_IRQHandler+0x126>
 8008b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b6e:	f003 0320 	and.w	r3, r3, #32
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d105      	bne.n	8008b82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d005      	beq.n	8008b8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b86:	f043 0208 	orr.w	r2, r3, #8
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 81ed 	beq.w	8008f72 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008b9c:	f003 0320 	and.w	r3, r3, #32
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d008      	beq.n	8008bb6 <HAL_UART_IRQHandler+0x14e>
 8008ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ba8:	f003 0320 	and.w	r3, r3, #32
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d002      	beq.n	8008bb6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 fd08 	bl	80095c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	695b      	ldr	r3, [r3, #20]
 8008bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc0:	2b40      	cmp	r3, #64	@ 0x40
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2301      	moveq	r3, #1
 8008bc6:	2300      	movne	r3, #0
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	f003 0308 	and.w	r3, r3, #8
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d103      	bne.n	8008be2 <HAL_UART_IRQHandler+0x17a>
 8008bda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d04f      	beq.n	8008c82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 fc10 	bl	8009408 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bf2:	2b40      	cmp	r3, #64	@ 0x40
 8008bf4:	d141      	bne.n	8008c7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3314      	adds	r3, #20
 8008bfc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008c0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008c10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	3314      	adds	r3, #20
 8008c1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008c22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008c26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008c2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008c32:	e841 2300 	strex	r3, r2, [r1]
 8008c36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d1d9      	bne.n	8008bf6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d013      	beq.n	8008c72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c4e:	4a7d      	ldr	r2, [pc, #500]	@ (8008e44 <HAL_UART_IRQHandler+0x3dc>)
 8008c50:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c56:	4618      	mov	r0, r3
 8008c58:	f7fc fae4 	bl	8005224 <HAL_DMA_Abort_IT>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d016      	beq.n	8008c90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c68:	687a      	ldr	r2, [r7, #4]
 8008c6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008c6c:	4610      	mov	r0, r2
 8008c6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c70:	e00e      	b.n	8008c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 f9a4 	bl	8008fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c78:	e00a      	b.n	8008c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f9a0 	bl	8008fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c80:	e006      	b.n	8008c90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 f99c 	bl	8008fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008c8e:	e170      	b.n	8008f72 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c90:	bf00      	nop
    return;
 8008c92:	e16e      	b.n	8008f72 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c98:	2b01      	cmp	r3, #1
 8008c9a:	f040 814a 	bne.w	8008f32 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca2:	f003 0310 	and.w	r3, r3, #16
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 8143 	beq.w	8008f32 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb0:	f003 0310 	and.w	r3, r3, #16
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 813c 	beq.w	8008f32 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008cba:	2300      	movs	r3, #0
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	60bb      	str	r3, [r7, #8]
 8008cce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cda:	2b40      	cmp	r3, #64	@ 0x40
 8008cdc:	f040 80b4 	bne.w	8008e48 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008cec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 8140 	beq.w	8008f76 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	f080 8139 	bcs.w	8008f76 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008d0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d10:	69db      	ldr	r3, [r3, #28]
 8008d12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008d16:	f000 8088 	beq.w	8008e2a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	330c      	adds	r3, #12
 8008d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d24:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	330c      	adds	r3, #12
 8008d42:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008d46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d4e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008d52:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008d5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1d9      	bne.n	8008d1a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	3314      	adds	r3, #20
 8008d6c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008d70:	e853 3f00 	ldrex	r3, [r3]
 8008d74:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008d76:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008d78:	f023 0301 	bic.w	r3, r3, #1
 8008d7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	3314      	adds	r3, #20
 8008d86:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008d8a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008d92:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008d96:	e841 2300 	strex	r3, r2, [r1]
 8008d9a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008d9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1e1      	bne.n	8008d66 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	3314      	adds	r3, #20
 8008da8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dac:	e853 3f00 	ldrex	r3, [r3]
 8008db0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008db2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008db4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008db8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	3314      	adds	r3, #20
 8008dc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008dc6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008dc8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008dcc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008dd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e3      	bne.n	8008da2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	330c      	adds	r3, #12
 8008dee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008df2:	e853 3f00 	ldrex	r3, [r3]
 8008df6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008df8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008dfa:	f023 0310 	bic.w	r3, r3, #16
 8008dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	330c      	adds	r3, #12
 8008e08:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8008e0c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8008e0e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e10:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008e12:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008e14:	e841 2300 	strex	r3, r2, [r1]
 8008e18:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008e1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d1e3      	bne.n	8008de8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fc f98d 	bl	8005144 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	1ad3      	subs	r3, r2, r3
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	4619      	mov	r1, r3
 8008e3a:	6878      	ldr	r0, [r7, #4]
 8008e3c:	f7f9 fce0 	bl	8002800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008e40:	e099      	b.n	8008f76 <HAL_UART_IRQHandler+0x50e>
 8008e42:	bf00      	nop
 8008e44:	080094cf 	.word	0x080094cf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e50:	b29b      	uxth	r3, r3
 8008e52:	1ad3      	subs	r3, r2, r3
 8008e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f000 808b 	beq.w	8008f7a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	f000 8086 	beq.w	8008f7a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	330c      	adds	r3, #12
 8008e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e78:	e853 3f00 	ldrex	r3, [r3]
 8008e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	330c      	adds	r3, #12
 8008e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8008e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008e9a:	e841 2300 	strex	r3, r2, [r1]
 8008e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d1e3      	bne.n	8008e6e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	3314      	adds	r3, #20
 8008eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb0:	e853 3f00 	ldrex	r3, [r3]
 8008eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8008eb6:	6a3b      	ldr	r3, [r7, #32]
 8008eb8:	f023 0301 	bic.w	r3, r3, #1
 8008ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	3314      	adds	r3, #20
 8008ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8008ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e3      	bne.n	8008ea6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	330c      	adds	r3, #12
 8008ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	e853 3f00 	ldrex	r3, [r3]
 8008efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0310 	bic.w	r3, r3, #16
 8008f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	330c      	adds	r3, #12
 8008f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008f10:	61fa      	str	r2, [r7, #28]
 8008f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	69b9      	ldr	r1, [r7, #24]
 8008f16:	69fa      	ldr	r2, [r7, #28]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8008f1e:	697b      	ldr	r3, [r7, #20]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e3      	bne.n	8008eec <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f9 fc68 	bl	8002800 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f30:	e023      	b.n	8008f7a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d009      	beq.n	8008f52 <HAL_UART_IRQHandler+0x4ea>
 8008f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	f000 fad3 	bl	80094f6 <UART_Transmit_IT>
    return;
 8008f50:	e014      	b.n	8008f7c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00e      	beq.n	8008f7c <HAL_UART_IRQHandler+0x514>
 8008f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f000 fb13 	bl	8009596 <UART_EndTransmit_IT>
    return;
 8008f70:	e004      	b.n	8008f7c <HAL_UART_IRQHandler+0x514>
    return;
 8008f72:	bf00      	nop
 8008f74:	e002      	b.n	8008f7c <HAL_UART_IRQHandler+0x514>
      return;
 8008f76:	bf00      	nop
 8008f78:	e000      	b.n	8008f7c <HAL_UART_IRQHandler+0x514>
      return;
 8008f7a:	bf00      	nop
  }
}
 8008f7c:	37e8      	adds	r7, #232	@ 0xe8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop

08008f84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f8c:	bf00      	nop
 8008f8e:	370c      	adds	r7, #12
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b083      	sub	sp, #12
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008fa0:	bf00      	nop
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b083      	sub	sp, #12
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008fb4:	bf00      	nop
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr

08008fc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b083      	sub	sp, #12
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008fc8:	bf00      	nop
 8008fca:	370c      	adds	r7, #12
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b090      	sub	sp, #64	@ 0x40
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d137      	bne.n	8009060 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3314      	adds	r3, #20
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	623b      	str	r3, [r7, #32]
   return(result);
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800900c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800900e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3314      	adds	r3, #20
 8009014:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009016:	633a      	str	r2, [r7, #48]	@ 0x30
 8009018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e5      	bne.n	8008ff6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800902a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	330c      	adds	r3, #12
 8009030:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	e853 3f00 	ldrex	r3, [r3]
 8009038:	60fb      	str	r3, [r7, #12]
   return(result);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009040:	637b      	str	r3, [r7, #52]	@ 0x34
 8009042:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	330c      	adds	r3, #12
 8009048:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800904a:	61fa      	str	r2, [r7, #28]
 800904c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800904e:	69b9      	ldr	r1, [r7, #24]
 8009050:	69fa      	ldr	r2, [r7, #28]
 8009052:	e841 2300 	strex	r3, r2, [r1]
 8009056:	617b      	str	r3, [r7, #20]
   return(result);
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d1e5      	bne.n	800902a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800905e:	e002      	b.n	8009066 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009060:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009062:	f7ff ff8f 	bl	8008f84 <HAL_UART_TxCpltCallback>
}
 8009066:	bf00      	nop
 8009068:	3740      	adds	r7, #64	@ 0x40
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}

0800906e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800906e:	b580      	push	{r7, lr}
 8009070:	b084      	sub	sp, #16
 8009072:	af00      	add	r7, sp, #0
 8009074:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800907a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800907c:	68f8      	ldr	r0, [r7, #12]
 800907e:	f7ff ff8b 	bl	8008f98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009082:	bf00      	nop
 8009084:	3710      	adds	r7, #16
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}

0800908a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b09c      	sub	sp, #112	@ 0x70
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009096:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d172      	bne.n	800918c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80090a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090a8:	2200      	movs	r2, #0
 80090aa:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	330c      	adds	r3, #12
 80090b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80090bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80090be:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80090c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	330c      	adds	r3, #12
 80090ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80090cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80090ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e5      	bne.n	80090ac <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3314      	adds	r3, #20
 80090e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090f2:	f023 0301 	bic.w	r3, r3, #1
 80090f6:	667b      	str	r3, [r7, #100]	@ 0x64
 80090f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	3314      	adds	r3, #20
 80090fe:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009100:	647a      	str	r2, [r7, #68]	@ 0x44
 8009102:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009106:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800910e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e5      	bne.n	80090e0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009114:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	3314      	adds	r3, #20
 800911a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800911c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911e:	e853 3f00 	ldrex	r3, [r3]
 8009122:	623b      	str	r3, [r7, #32]
   return(result);
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800912a:	663b      	str	r3, [r7, #96]	@ 0x60
 800912c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3314      	adds	r3, #20
 8009132:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009134:	633a      	str	r2, [r7, #48]	@ 0x30
 8009136:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009138:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800913a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800913c:	e841 2300 	strex	r3, r2, [r1]
 8009140:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	2b00      	cmp	r3, #0
 8009146:	d1e5      	bne.n	8009114 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009148:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800914a:	2220      	movs	r2, #32
 800914c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009150:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009154:	2b01      	cmp	r3, #1
 8009156:	d119      	bne.n	800918c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	330c      	adds	r3, #12
 800915e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	693b      	ldr	r3, [r7, #16]
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	60fb      	str	r3, [r7, #12]
   return(result);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f023 0310 	bic.w	r3, r3, #16
 800916e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009170:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	330c      	adds	r3, #12
 8009176:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009178:	61fa      	str	r2, [r7, #28]
 800917a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	69b9      	ldr	r1, [r7, #24]
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	617b      	str	r3, [r7, #20]
   return(result);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e5      	bne.n	8009158 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800918c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800918e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009190:	2b01      	cmp	r3, #1
 8009192:	d106      	bne.n	80091a2 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009196:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009198:	4619      	mov	r1, r3
 800919a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800919c:	f7f9 fb30 	bl	8002800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091a0:	e002      	b.n	80091a8 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80091a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80091a4:	f7f9 fc50 	bl	8002a48 <HAL_UART_RxCpltCallback>
}
 80091a8:	bf00      	nop
 80091aa:	3770      	adds	r7, #112	@ 0x70
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d108      	bne.n	80091d8 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80091ca:	085b      	lsrs	r3, r3, #1
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	4619      	mov	r1, r3
 80091d0:	68f8      	ldr	r0, [r7, #12]
 80091d2:	f7f9 fb15 	bl	8002800 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80091d6:	e002      	b.n	80091de <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80091d8:	68f8      	ldr	r0, [r7, #12]
 80091da:	f7ff fee7 	bl	8008fac <HAL_UART_RxHalfCpltCallback>
}
 80091de:	bf00      	nop
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b084      	sub	sp, #16
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80091ee:	2300      	movs	r3, #0
 80091f0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	695b      	ldr	r3, [r3, #20]
 80091fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009202:	2b80      	cmp	r3, #128	@ 0x80
 8009204:	bf0c      	ite	eq
 8009206:	2301      	moveq	r3, #1
 8009208:	2300      	movne	r3, #0
 800920a:	b2db      	uxtb	r3, r3
 800920c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009214:	b2db      	uxtb	r3, r3
 8009216:	2b21      	cmp	r3, #33	@ 0x21
 8009218:	d108      	bne.n	800922c <UART_DMAError+0x46>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d005      	beq.n	800922c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	2200      	movs	r2, #0
 8009224:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009226:	68b8      	ldr	r0, [r7, #8]
 8009228:	f000 f8c6 	bl	80093b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	695b      	ldr	r3, [r3, #20]
 8009232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009236:	2b40      	cmp	r3, #64	@ 0x40
 8009238:	bf0c      	ite	eq
 800923a:	2301      	moveq	r3, #1
 800923c:	2300      	movne	r3, #0
 800923e:	b2db      	uxtb	r3, r3
 8009240:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009248:	b2db      	uxtb	r3, r3
 800924a:	2b22      	cmp	r3, #34	@ 0x22
 800924c:	d108      	bne.n	8009260 <UART_DMAError+0x7a>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d005      	beq.n	8009260 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2200      	movs	r2, #0
 8009258:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800925a:	68b8      	ldr	r0, [r7, #8]
 800925c:	f000 f8d4 	bl	8009408 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009264:	f043 0210 	orr.w	r2, r3, #16
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800926c:	68b8      	ldr	r0, [r7, #8]
 800926e:	f7ff fea7 	bl	8008fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
	...

0800927c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800927c:	b580      	push	{r7, lr}
 800927e:	b098      	sub	sp, #96	@ 0x60
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	4613      	mov	r3, r2
 8009288:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	88fa      	ldrh	r2, [r7, #6]
 8009294:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2200      	movs	r2, #0
 800929a:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2222      	movs	r2, #34	@ 0x22
 80092a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092a8:	4a40      	ldr	r2, [pc, #256]	@ (80093ac <UART_Start_Receive_DMA+0x130>)
 80092aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	4a3f      	ldr	r2, [pc, #252]	@ (80093b0 <UART_Start_Receive_DMA+0x134>)
 80092b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b8:	4a3e      	ldr	r2, [pc, #248]	@ (80093b4 <UART_Start_Receive_DMA+0x138>)
 80092ba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c0:	2200      	movs	r2, #0
 80092c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80092c4:	f107 0308 	add.w	r3, r7, #8
 80092c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3304      	adds	r3, #4
 80092d4:	4619      	mov	r1, r3
 80092d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	88fb      	ldrh	r3, [r7, #6]
 80092dc:	f7fb feda 	bl	8005094 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80092e0:	2300      	movs	r3, #0
 80092e2:	613b      	str	r3, [r7, #16]
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	613b      	str	r3, [r7, #16]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	613b      	str	r3, [r7, #16]
 80092f4:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2200      	movs	r2, #0
 80092fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	691b      	ldr	r3, [r3, #16]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d019      	beq.n	800933a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	330c      	adds	r3, #12
 800930c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800930e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009310:	e853 3f00 	ldrex	r3, [r3]
 8009314:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009326:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009328:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800932a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800932c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009334:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1e5      	bne.n	8009306 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	3314      	adds	r3, #20
 8009340:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009344:	e853 3f00 	ldrex	r3, [r3]
 8009348:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800934a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	657b      	str	r3, [r7, #84]	@ 0x54
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	3314      	adds	r3, #20
 8009358:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800935a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800935c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800935e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009360:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009362:	e841 2300 	strex	r3, r2, [r1]
 8009366:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800936a:	2b00      	cmp	r3, #0
 800936c:	d1e5      	bne.n	800933a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	3314      	adds	r3, #20
 8009374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009376:	69bb      	ldr	r3, [r7, #24]
 8009378:	e853 3f00 	ldrex	r3, [r3]
 800937c:	617b      	str	r3, [r7, #20]
   return(result);
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009384:	653b      	str	r3, [r7, #80]	@ 0x50
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	3314      	adds	r3, #20
 800938c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800938e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009390:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009392:	6a39      	ldr	r1, [r7, #32]
 8009394:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009396:	e841 2300 	strex	r3, r2, [r1]
 800939a:	61fb      	str	r3, [r7, #28]
   return(result);
 800939c:	69fb      	ldr	r3, [r7, #28]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1e5      	bne.n	800936e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80093a2:	2300      	movs	r3, #0
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3760      	adds	r7, #96	@ 0x60
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}
 80093ac:	0800908b 	.word	0x0800908b
 80093b0:	080091b1 	.word	0x080091b1
 80093b4:	080091e7 	.word	0x080091e7

080093b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80093b8:	b480      	push	{r7}
 80093ba:	b089      	sub	sp, #36	@ 0x24
 80093bc:	af00      	add	r7, sp, #0
 80093be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80093d6:	61fb      	str	r3, [r7, #28]
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	69fa      	ldr	r2, [r7, #28]
 80093e0:	61ba      	str	r2, [r7, #24]
 80093e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e4:	6979      	ldr	r1, [r7, #20]
 80093e6:	69ba      	ldr	r2, [r7, #24]
 80093e8:	e841 2300 	strex	r3, r2, [r1]
 80093ec:	613b      	str	r3, [r7, #16]
   return(result);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d1e5      	bne.n	80093c0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	2220      	movs	r2, #32
 80093f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80093fc:	bf00      	nop
 80093fe:	3724      	adds	r7, #36	@ 0x24
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr

08009408 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009408:	b480      	push	{r7}
 800940a:	b095      	sub	sp, #84	@ 0x54
 800940c:	af00      	add	r7, sp, #0
 800940e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	330c      	adds	r3, #12
 8009416:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800941a:	e853 3f00 	ldrex	r3, [r3]
 800941e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009420:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009422:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009426:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	330c      	adds	r3, #12
 800942e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009430:	643a      	str	r2, [r7, #64]	@ 0x40
 8009432:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009436:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009438:	e841 2300 	strex	r3, r2, [r1]
 800943c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800943e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009440:	2b00      	cmp	r3, #0
 8009442:	d1e5      	bne.n	8009410 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	3314      	adds	r3, #20
 800944a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	6a3b      	ldr	r3, [r7, #32]
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	61fb      	str	r3, [r7, #28]
   return(result);
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	f023 0301 	bic.w	r3, r3, #1
 800945a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	3314      	adds	r3, #20
 8009462:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009464:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009466:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800946a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e5      	bne.n	8009444 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800947c:	2b01      	cmp	r3, #1
 800947e:	d119      	bne.n	80094b4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	330c      	adds	r3, #12
 8009486:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	e853 3f00 	ldrex	r3, [r3]
 800948e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	f023 0310 	bic.w	r3, r3, #16
 8009496:	647b      	str	r3, [r7, #68]	@ 0x44
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	330c      	adds	r3, #12
 800949e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094a0:	61ba      	str	r2, [r7, #24]
 80094a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a4:	6979      	ldr	r1, [r7, #20]
 80094a6:	69ba      	ldr	r2, [r7, #24]
 80094a8:	e841 2300 	strex	r3, r2, [r1]
 80094ac:	613b      	str	r3, [r7, #16]
   return(result);
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1e5      	bne.n	8009480 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2220      	movs	r2, #32
 80094b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2200      	movs	r2, #0
 80094c0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094c2:	bf00      	nop
 80094c4:	3754      	adds	r7, #84	@ 0x54
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr

080094ce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80094ce:	b580      	push	{r7, lr}
 80094d0:	b084      	sub	sp, #16
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094da:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	2200      	movs	r2, #0
 80094e6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80094e8:	68f8      	ldr	r0, [r7, #12]
 80094ea:	f7ff fd69 	bl	8008fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80094ee:	bf00      	nop
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}

080094f6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80094f6:	b480      	push	{r7}
 80094f8:	b085      	sub	sp, #20
 80094fa:	af00      	add	r7, sp, #0
 80094fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b21      	cmp	r3, #33	@ 0x21
 8009508:	d13e      	bne.n	8009588 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009512:	d114      	bne.n	800953e <UART_Transmit_IT+0x48>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d110      	bne.n	800953e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a1b      	ldr	r3, [r3, #32]
 8009520:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	881b      	ldrh	r3, [r3, #0]
 8009526:	461a      	mov	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009530:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	6a1b      	ldr	r3, [r3, #32]
 8009536:	1c9a      	adds	r2, r3, #2
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	621a      	str	r2, [r3, #32]
 800953c:	e008      	b.n	8009550 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	1c59      	adds	r1, r3, #1
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	6211      	str	r1, [r2, #32]
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009554:	b29b      	uxth	r3, r3
 8009556:	3b01      	subs	r3, #1
 8009558:	b29b      	uxth	r3, r3
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	4619      	mov	r1, r3
 800955e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009560:	2b00      	cmp	r3, #0
 8009562:	d10f      	bne.n	8009584 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	68da      	ldr	r2, [r3, #12]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009572:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009582:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	e000      	b.n	800958a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009588:	2302      	movs	r3, #2
  }
}
 800958a:	4618      	mov	r0, r3
 800958c:	3714      	adds	r7, #20
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009596:	b580      	push	{r7, lr}
 8009598:	b082      	sub	sp, #8
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68da      	ldr	r2, [r3, #12]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80095ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2220      	movs	r2, #32
 80095b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80095b6:	6878      	ldr	r0, [r7, #4]
 80095b8:	f7ff fce4 	bl	8008f84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3708      	adds	r7, #8
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b08c      	sub	sp, #48	@ 0x30
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80095d4:	b2db      	uxtb	r3, r3
 80095d6:	2b22      	cmp	r3, #34	@ 0x22
 80095d8:	f040 80ab 	bne.w	8009732 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80095e4:	d117      	bne.n	8009616 <UART_Receive_IT+0x50>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d113      	bne.n	8009616 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80095ee:	2300      	movs	r3, #0
 80095f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095f6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	b29b      	uxth	r3, r3
 8009600:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009604:	b29a      	uxth	r2, r3
 8009606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009608:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960e:	1c9a      	adds	r2, r3, #2
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	629a      	str	r2, [r3, #40]	@ 0x28
 8009614:	e026      	b.n	8009664 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800961c:	2300      	movs	r3, #0
 800961e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009628:	d007      	beq.n	800963a <UART_Receive_IT+0x74>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d10a      	bne.n	8009648 <UART_Receive_IT+0x82>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d106      	bne.n	8009648 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	685b      	ldr	r3, [r3, #4]
 8009640:	b2da      	uxtb	r2, r3
 8009642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e008      	b.n	800965a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	b2db      	uxtb	r3, r3
 8009650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009654:	b2da      	uxtb	r2, r3
 8009656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009658:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800965e:	1c5a      	adds	r2, r3, #1
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009668:	b29b      	uxth	r3, r3
 800966a:	3b01      	subs	r3, #1
 800966c:	b29b      	uxth	r3, r3
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009674:	2b00      	cmp	r3, #0
 8009676:	d15a      	bne.n	800972e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f022 0220 	bic.w	r2, r2, #32
 8009686:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	68da      	ldr	r2, [r3, #12]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009696:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	695a      	ldr	r2, [r3, #20]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f022 0201 	bic.w	r2, r2, #1
 80096a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2220      	movs	r2, #32
 80096ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096b4:	2b01      	cmp	r3, #1
 80096b6:	d135      	bne.n	8009724 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	330c      	adds	r3, #12
 80096c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	e853 3f00 	ldrex	r3, [r3]
 80096cc:	613b      	str	r3, [r7, #16]
   return(result);
 80096ce:	693b      	ldr	r3, [r7, #16]
 80096d0:	f023 0310 	bic.w	r3, r3, #16
 80096d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	330c      	adds	r3, #12
 80096dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096de:	623a      	str	r2, [r7, #32]
 80096e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e2:	69f9      	ldr	r1, [r7, #28]
 80096e4:	6a3a      	ldr	r2, [r7, #32]
 80096e6:	e841 2300 	strex	r3, r2, [r1]
 80096ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ec:	69bb      	ldr	r3, [r7, #24]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d1e5      	bne.n	80096be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	f003 0310 	and.w	r3, r3, #16
 80096fc:	2b10      	cmp	r3, #16
 80096fe:	d10a      	bne.n	8009716 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009700:	2300      	movs	r3, #0
 8009702:	60fb      	str	r3, [r7, #12]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	60fb      	str	r3, [r7, #12]
 8009714:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f7f9 f86f 	bl	8002800 <HAL_UARTEx_RxEventCallback>
 8009722:	e002      	b.n	800972a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7f9 f98f 	bl	8002a48 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800972a:	2300      	movs	r3, #0
 800972c:	e002      	b.n	8009734 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800972e:	2300      	movs	r3, #0
 8009730:	e000      	b.n	8009734 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009732:	2302      	movs	r3, #2
  }
}
 8009734:	4618      	mov	r0, r3
 8009736:	3730      	adds	r7, #48	@ 0x30
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}

0800973c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800973c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009740:	b0c0      	sub	sp, #256	@ 0x100
 8009742:	af00      	add	r7, sp, #0
 8009744:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	691b      	ldr	r3, [r3, #16]
 8009750:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009758:	68d9      	ldr	r1, [r3, #12]
 800975a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	ea40 0301 	orr.w	r3, r0, r1
 8009764:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800976a:	689a      	ldr	r2, [r3, #8]
 800976c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	431a      	orrs	r2, r3
 8009774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009778:	695b      	ldr	r3, [r3, #20]
 800977a:	431a      	orrs	r2, r3
 800977c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	4313      	orrs	r3, r2
 8009784:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009794:	f021 010c 	bic.w	r1, r1, #12
 8009798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800979c:	681a      	ldr	r2, [r3, #0]
 800979e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80097a2:	430b      	orrs	r3, r1
 80097a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80097a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	695b      	ldr	r3, [r3, #20]
 80097ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80097b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097b6:	6999      	ldr	r1, [r3, #24]
 80097b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	ea40 0301 	orr.w	r3, r0, r1
 80097c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c8:	681a      	ldr	r2, [r3, #0]
 80097ca:	4b8f      	ldr	r3, [pc, #572]	@ (8009a08 <UART_SetConfig+0x2cc>)
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d005      	beq.n	80097dc <UART_SetConfig+0xa0>
 80097d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	4b8d      	ldr	r3, [pc, #564]	@ (8009a0c <UART_SetConfig+0x2d0>)
 80097d8:	429a      	cmp	r2, r3
 80097da:	d104      	bne.n	80097e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80097dc:	f7fd feac 	bl	8007538 <HAL_RCC_GetPCLK2Freq>
 80097e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80097e4:	e003      	b.n	80097ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80097e6:	f7fd fe93 	bl	8007510 <HAL_RCC_GetPCLK1Freq>
 80097ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097f2:	69db      	ldr	r3, [r3, #28]
 80097f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097f8:	f040 810c 	bne.w	8009a14 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009800:	2200      	movs	r2, #0
 8009802:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009806:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800980a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800980e:	4622      	mov	r2, r4
 8009810:	462b      	mov	r3, r5
 8009812:	1891      	adds	r1, r2, r2
 8009814:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009816:	415b      	adcs	r3, r3
 8009818:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800981a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800981e:	4621      	mov	r1, r4
 8009820:	eb12 0801 	adds.w	r8, r2, r1
 8009824:	4629      	mov	r1, r5
 8009826:	eb43 0901 	adc.w	r9, r3, r1
 800982a:	f04f 0200 	mov.w	r2, #0
 800982e:	f04f 0300 	mov.w	r3, #0
 8009832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800983a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800983e:	4690      	mov	r8, r2
 8009840:	4699      	mov	r9, r3
 8009842:	4623      	mov	r3, r4
 8009844:	eb18 0303 	adds.w	r3, r8, r3
 8009848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800984c:	462b      	mov	r3, r5
 800984e:	eb49 0303 	adc.w	r3, r9, r3
 8009852:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	2200      	movs	r2, #0
 800985e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009862:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009866:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800986a:	460b      	mov	r3, r1
 800986c:	18db      	adds	r3, r3, r3
 800986e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009870:	4613      	mov	r3, r2
 8009872:	eb42 0303 	adc.w	r3, r2, r3
 8009876:	657b      	str	r3, [r7, #84]	@ 0x54
 8009878:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800987c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009880:	f7f7 f986 	bl	8000b90 <__aeabi_uldivmod>
 8009884:	4602      	mov	r2, r0
 8009886:	460b      	mov	r3, r1
 8009888:	4b61      	ldr	r3, [pc, #388]	@ (8009a10 <UART_SetConfig+0x2d4>)
 800988a:	fba3 2302 	umull	r2, r3, r3, r2
 800988e:	095b      	lsrs	r3, r3, #5
 8009890:	011c      	lsls	r4, r3, #4
 8009892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009896:	2200      	movs	r2, #0
 8009898:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800989c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80098a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80098a4:	4642      	mov	r2, r8
 80098a6:	464b      	mov	r3, r9
 80098a8:	1891      	adds	r1, r2, r2
 80098aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80098ac:	415b      	adcs	r3, r3
 80098ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80098b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80098b4:	4641      	mov	r1, r8
 80098b6:	eb12 0a01 	adds.w	sl, r2, r1
 80098ba:	4649      	mov	r1, r9
 80098bc:	eb43 0b01 	adc.w	fp, r3, r1
 80098c0:	f04f 0200 	mov.w	r2, #0
 80098c4:	f04f 0300 	mov.w	r3, #0
 80098c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80098cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80098d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80098d4:	4692      	mov	sl, r2
 80098d6:	469b      	mov	fp, r3
 80098d8:	4643      	mov	r3, r8
 80098da:	eb1a 0303 	adds.w	r3, sl, r3
 80098de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098e2:	464b      	mov	r3, r9
 80098e4:	eb4b 0303 	adc.w	r3, fp, r3
 80098e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f0:	685b      	ldr	r3, [r3, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80098f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80098fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009900:	460b      	mov	r3, r1
 8009902:	18db      	adds	r3, r3, r3
 8009904:	643b      	str	r3, [r7, #64]	@ 0x40
 8009906:	4613      	mov	r3, r2
 8009908:	eb42 0303 	adc.w	r3, r2, r3
 800990c:	647b      	str	r3, [r7, #68]	@ 0x44
 800990e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009912:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009916:	f7f7 f93b 	bl	8000b90 <__aeabi_uldivmod>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4611      	mov	r1, r2
 8009920:	4b3b      	ldr	r3, [pc, #236]	@ (8009a10 <UART_SetConfig+0x2d4>)
 8009922:	fba3 2301 	umull	r2, r3, r3, r1
 8009926:	095b      	lsrs	r3, r3, #5
 8009928:	2264      	movs	r2, #100	@ 0x64
 800992a:	fb02 f303 	mul.w	r3, r2, r3
 800992e:	1acb      	subs	r3, r1, r3
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009936:	4b36      	ldr	r3, [pc, #216]	@ (8009a10 <UART_SetConfig+0x2d4>)
 8009938:	fba3 2302 	umull	r2, r3, r3, r2
 800993c:	095b      	lsrs	r3, r3, #5
 800993e:	005b      	lsls	r3, r3, #1
 8009940:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009944:	441c      	add	r4, r3
 8009946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800994a:	2200      	movs	r2, #0
 800994c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009950:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009954:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009958:	4642      	mov	r2, r8
 800995a:	464b      	mov	r3, r9
 800995c:	1891      	adds	r1, r2, r2
 800995e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009960:	415b      	adcs	r3, r3
 8009962:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009964:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009968:	4641      	mov	r1, r8
 800996a:	1851      	adds	r1, r2, r1
 800996c:	6339      	str	r1, [r7, #48]	@ 0x30
 800996e:	4649      	mov	r1, r9
 8009970:	414b      	adcs	r3, r1
 8009972:	637b      	str	r3, [r7, #52]	@ 0x34
 8009974:	f04f 0200 	mov.w	r2, #0
 8009978:	f04f 0300 	mov.w	r3, #0
 800997c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009980:	4659      	mov	r1, fp
 8009982:	00cb      	lsls	r3, r1, #3
 8009984:	4651      	mov	r1, sl
 8009986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800998a:	4651      	mov	r1, sl
 800998c:	00ca      	lsls	r2, r1, #3
 800998e:	4610      	mov	r0, r2
 8009990:	4619      	mov	r1, r3
 8009992:	4603      	mov	r3, r0
 8009994:	4642      	mov	r2, r8
 8009996:	189b      	adds	r3, r3, r2
 8009998:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800999c:	464b      	mov	r3, r9
 800999e:	460a      	mov	r2, r1
 80099a0:	eb42 0303 	adc.w	r3, r2, r3
 80099a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80099b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80099b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80099bc:	460b      	mov	r3, r1
 80099be:	18db      	adds	r3, r3, r3
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099c2:	4613      	mov	r3, r2
 80099c4:	eb42 0303 	adc.w	r3, r2, r3
 80099c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80099ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80099ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80099d2:	f7f7 f8dd 	bl	8000b90 <__aeabi_uldivmod>
 80099d6:	4602      	mov	r2, r0
 80099d8:	460b      	mov	r3, r1
 80099da:	4b0d      	ldr	r3, [pc, #52]	@ (8009a10 <UART_SetConfig+0x2d4>)
 80099dc:	fba3 1302 	umull	r1, r3, r3, r2
 80099e0:	095b      	lsrs	r3, r3, #5
 80099e2:	2164      	movs	r1, #100	@ 0x64
 80099e4:	fb01 f303 	mul.w	r3, r1, r3
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	00db      	lsls	r3, r3, #3
 80099ec:	3332      	adds	r3, #50	@ 0x32
 80099ee:	4a08      	ldr	r2, [pc, #32]	@ (8009a10 <UART_SetConfig+0x2d4>)
 80099f0:	fba2 2303 	umull	r2, r3, r2, r3
 80099f4:	095b      	lsrs	r3, r3, #5
 80099f6:	f003 0207 	and.w	r2, r3, #7
 80099fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4422      	add	r2, r4
 8009a02:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009a04:	e106      	b.n	8009c14 <UART_SetConfig+0x4d8>
 8009a06:	bf00      	nop
 8009a08:	40011000 	.word	0x40011000
 8009a0c:	40011400 	.word	0x40011400
 8009a10:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009a14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a18:	2200      	movs	r2, #0
 8009a1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009a1e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009a22:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009a26:	4642      	mov	r2, r8
 8009a28:	464b      	mov	r3, r9
 8009a2a:	1891      	adds	r1, r2, r2
 8009a2c:	6239      	str	r1, [r7, #32]
 8009a2e:	415b      	adcs	r3, r3
 8009a30:	627b      	str	r3, [r7, #36]	@ 0x24
 8009a32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009a36:	4641      	mov	r1, r8
 8009a38:	1854      	adds	r4, r2, r1
 8009a3a:	4649      	mov	r1, r9
 8009a3c:	eb43 0501 	adc.w	r5, r3, r1
 8009a40:	f04f 0200 	mov.w	r2, #0
 8009a44:	f04f 0300 	mov.w	r3, #0
 8009a48:	00eb      	lsls	r3, r5, #3
 8009a4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009a4e:	00e2      	lsls	r2, r4, #3
 8009a50:	4614      	mov	r4, r2
 8009a52:	461d      	mov	r5, r3
 8009a54:	4643      	mov	r3, r8
 8009a56:	18e3      	adds	r3, r4, r3
 8009a58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009a5c:	464b      	mov	r3, r9
 8009a5e:	eb45 0303 	adc.w	r3, r5, r3
 8009a62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a6a:	685b      	ldr	r3, [r3, #4]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009a72:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009a76:	f04f 0200 	mov.w	r2, #0
 8009a7a:	f04f 0300 	mov.w	r3, #0
 8009a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009a82:	4629      	mov	r1, r5
 8009a84:	008b      	lsls	r3, r1, #2
 8009a86:	4621      	mov	r1, r4
 8009a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a8c:	4621      	mov	r1, r4
 8009a8e:	008a      	lsls	r2, r1, #2
 8009a90:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009a94:	f7f7 f87c 	bl	8000b90 <__aeabi_uldivmod>
 8009a98:	4602      	mov	r2, r0
 8009a9a:	460b      	mov	r3, r1
 8009a9c:	4b60      	ldr	r3, [pc, #384]	@ (8009c20 <UART_SetConfig+0x4e4>)
 8009a9e:	fba3 2302 	umull	r2, r3, r3, r2
 8009aa2:	095b      	lsrs	r3, r3, #5
 8009aa4:	011c      	lsls	r4, r3, #4
 8009aa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009ab0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009ab4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009ab8:	4642      	mov	r2, r8
 8009aba:	464b      	mov	r3, r9
 8009abc:	1891      	adds	r1, r2, r2
 8009abe:	61b9      	str	r1, [r7, #24]
 8009ac0:	415b      	adcs	r3, r3
 8009ac2:	61fb      	str	r3, [r7, #28]
 8009ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009ac8:	4641      	mov	r1, r8
 8009aca:	1851      	adds	r1, r2, r1
 8009acc:	6139      	str	r1, [r7, #16]
 8009ace:	4649      	mov	r1, r9
 8009ad0:	414b      	adcs	r3, r1
 8009ad2:	617b      	str	r3, [r7, #20]
 8009ad4:	f04f 0200 	mov.w	r2, #0
 8009ad8:	f04f 0300 	mov.w	r3, #0
 8009adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009ae0:	4659      	mov	r1, fp
 8009ae2:	00cb      	lsls	r3, r1, #3
 8009ae4:	4651      	mov	r1, sl
 8009ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aea:	4651      	mov	r1, sl
 8009aec:	00ca      	lsls	r2, r1, #3
 8009aee:	4610      	mov	r0, r2
 8009af0:	4619      	mov	r1, r3
 8009af2:	4603      	mov	r3, r0
 8009af4:	4642      	mov	r2, r8
 8009af6:	189b      	adds	r3, r3, r2
 8009af8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009afc:	464b      	mov	r3, r9
 8009afe:	460a      	mov	r2, r1
 8009b00:	eb42 0303 	adc.w	r3, r2, r3
 8009b04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009b12:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009b14:	f04f 0200 	mov.w	r2, #0
 8009b18:	f04f 0300 	mov.w	r3, #0
 8009b1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009b20:	4649      	mov	r1, r9
 8009b22:	008b      	lsls	r3, r1, #2
 8009b24:	4641      	mov	r1, r8
 8009b26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009b2a:	4641      	mov	r1, r8
 8009b2c:	008a      	lsls	r2, r1, #2
 8009b2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009b32:	f7f7 f82d 	bl	8000b90 <__aeabi_uldivmod>
 8009b36:	4602      	mov	r2, r0
 8009b38:	460b      	mov	r3, r1
 8009b3a:	4611      	mov	r1, r2
 8009b3c:	4b38      	ldr	r3, [pc, #224]	@ (8009c20 <UART_SetConfig+0x4e4>)
 8009b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b42:	095b      	lsrs	r3, r3, #5
 8009b44:	2264      	movs	r2, #100	@ 0x64
 8009b46:	fb02 f303 	mul.w	r3, r2, r3
 8009b4a:	1acb      	subs	r3, r1, r3
 8009b4c:	011b      	lsls	r3, r3, #4
 8009b4e:	3332      	adds	r3, #50	@ 0x32
 8009b50:	4a33      	ldr	r2, [pc, #204]	@ (8009c20 <UART_SetConfig+0x4e4>)
 8009b52:	fba2 2303 	umull	r2, r3, r2, r3
 8009b56:	095b      	lsrs	r3, r3, #5
 8009b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009b5c:	441c      	add	r4, r3
 8009b5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b62:	2200      	movs	r2, #0
 8009b64:	673b      	str	r3, [r7, #112]	@ 0x70
 8009b66:	677a      	str	r2, [r7, #116]	@ 0x74
 8009b68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009b6c:	4642      	mov	r2, r8
 8009b6e:	464b      	mov	r3, r9
 8009b70:	1891      	adds	r1, r2, r2
 8009b72:	60b9      	str	r1, [r7, #8]
 8009b74:	415b      	adcs	r3, r3
 8009b76:	60fb      	str	r3, [r7, #12]
 8009b78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009b7c:	4641      	mov	r1, r8
 8009b7e:	1851      	adds	r1, r2, r1
 8009b80:	6039      	str	r1, [r7, #0]
 8009b82:	4649      	mov	r1, r9
 8009b84:	414b      	adcs	r3, r1
 8009b86:	607b      	str	r3, [r7, #4]
 8009b88:	f04f 0200 	mov.w	r2, #0
 8009b8c:	f04f 0300 	mov.w	r3, #0
 8009b90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009b94:	4659      	mov	r1, fp
 8009b96:	00cb      	lsls	r3, r1, #3
 8009b98:	4651      	mov	r1, sl
 8009b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b9e:	4651      	mov	r1, sl
 8009ba0:	00ca      	lsls	r2, r1, #3
 8009ba2:	4610      	mov	r0, r2
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	4642      	mov	r2, r8
 8009baa:	189b      	adds	r3, r3, r2
 8009bac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009bae:	464b      	mov	r3, r9
 8009bb0:	460a      	mov	r2, r1
 8009bb2:	eb42 0303 	adc.w	r3, r2, r3
 8009bb6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8009bc2:	667a      	str	r2, [r7, #100]	@ 0x64
 8009bc4:	f04f 0200 	mov.w	r2, #0
 8009bc8:	f04f 0300 	mov.w	r3, #0
 8009bcc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009bd0:	4649      	mov	r1, r9
 8009bd2:	008b      	lsls	r3, r1, #2
 8009bd4:	4641      	mov	r1, r8
 8009bd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009bda:	4641      	mov	r1, r8
 8009bdc:	008a      	lsls	r2, r1, #2
 8009bde:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009be2:	f7f6 ffd5 	bl	8000b90 <__aeabi_uldivmod>
 8009be6:	4602      	mov	r2, r0
 8009be8:	460b      	mov	r3, r1
 8009bea:	4b0d      	ldr	r3, [pc, #52]	@ (8009c20 <UART_SetConfig+0x4e4>)
 8009bec:	fba3 1302 	umull	r1, r3, r3, r2
 8009bf0:	095b      	lsrs	r3, r3, #5
 8009bf2:	2164      	movs	r1, #100	@ 0x64
 8009bf4:	fb01 f303 	mul.w	r3, r1, r3
 8009bf8:	1ad3      	subs	r3, r2, r3
 8009bfa:	011b      	lsls	r3, r3, #4
 8009bfc:	3332      	adds	r3, #50	@ 0x32
 8009bfe:	4a08      	ldr	r2, [pc, #32]	@ (8009c20 <UART_SetConfig+0x4e4>)
 8009c00:	fba2 2303 	umull	r2, r3, r2, r3
 8009c04:	095b      	lsrs	r3, r3, #5
 8009c06:	f003 020f 	and.w	r2, r3, #15
 8009c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	4422      	add	r2, r4
 8009c12:	609a      	str	r2, [r3, #8]
}
 8009c14:	bf00      	nop
 8009c16:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c20:	51eb851f 	.word	0x51eb851f

08009c24 <memset>:
 8009c24:	4402      	add	r2, r0
 8009c26:	4603      	mov	r3, r0
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d100      	bne.n	8009c2e <memset+0xa>
 8009c2c:	4770      	bx	lr
 8009c2e:	f803 1b01 	strb.w	r1, [r3], #1
 8009c32:	e7f9      	b.n	8009c28 <memset+0x4>

08009c34 <__errno>:
 8009c34:	4b01      	ldr	r3, [pc, #4]	@ (8009c3c <__errno+0x8>)
 8009c36:	6818      	ldr	r0, [r3, #0]
 8009c38:	4770      	bx	lr
 8009c3a:	bf00      	nop
 8009c3c:	20000064 	.word	0x20000064

08009c40 <__libc_init_array>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	4d0d      	ldr	r5, [pc, #52]	@ (8009c78 <__libc_init_array+0x38>)
 8009c44:	4c0d      	ldr	r4, [pc, #52]	@ (8009c7c <__libc_init_array+0x3c>)
 8009c46:	1b64      	subs	r4, r4, r5
 8009c48:	10a4      	asrs	r4, r4, #2
 8009c4a:	2600      	movs	r6, #0
 8009c4c:	42a6      	cmp	r6, r4
 8009c4e:	d109      	bne.n	8009c64 <__libc_init_array+0x24>
 8009c50:	4d0b      	ldr	r5, [pc, #44]	@ (8009c80 <__libc_init_array+0x40>)
 8009c52:	4c0c      	ldr	r4, [pc, #48]	@ (8009c84 <__libc_init_array+0x44>)
 8009c54:	f001 fd14 	bl	800b680 <_init>
 8009c58:	1b64      	subs	r4, r4, r5
 8009c5a:	10a4      	asrs	r4, r4, #2
 8009c5c:	2600      	movs	r6, #0
 8009c5e:	42a6      	cmp	r6, r4
 8009c60:	d105      	bne.n	8009c6e <__libc_init_array+0x2e>
 8009c62:	bd70      	pop	{r4, r5, r6, pc}
 8009c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c68:	4798      	blx	r3
 8009c6a:	3601      	adds	r6, #1
 8009c6c:	e7ee      	b.n	8009c4c <__libc_init_array+0xc>
 8009c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c72:	4798      	blx	r3
 8009c74:	3601      	adds	r6, #1
 8009c76:	e7f2      	b.n	8009c5e <__libc_init_array+0x1e>
 8009c78:	0800b7a0 	.word	0x0800b7a0
 8009c7c:	0800b7a0 	.word	0x0800b7a0
 8009c80:	0800b7a0 	.word	0x0800b7a0
 8009c84:	0800b7a4 	.word	0x0800b7a4

08009c88 <memcpy>:
 8009c88:	440a      	add	r2, r1
 8009c8a:	4291      	cmp	r1, r2
 8009c8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009c90:	d100      	bne.n	8009c94 <memcpy+0xc>
 8009c92:	4770      	bx	lr
 8009c94:	b510      	push	{r4, lr}
 8009c96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009c9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	d1f9      	bne.n	8009c96 <memcpy+0xe>
 8009ca2:	bd10      	pop	{r4, pc}

08009ca4 <pow>:
 8009ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ca6:	ed2d 8b02 	vpush	{d8}
 8009caa:	eeb0 8a40 	vmov.f32	s16, s0
 8009cae:	eef0 8a60 	vmov.f32	s17, s1
 8009cb2:	ec55 4b11 	vmov	r4, r5, d1
 8009cb6:	f000 fb7b 	bl	800a3b0 <__ieee754_pow>
 8009cba:	4622      	mov	r2, r4
 8009cbc:	462b      	mov	r3, r5
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	4629      	mov	r1, r5
 8009cc2:	ec57 6b10 	vmov	r6, r7, d0
 8009cc6:	f7f6 fed5 	bl	8000a74 <__aeabi_dcmpun>
 8009cca:	2800      	cmp	r0, #0
 8009ccc:	d13b      	bne.n	8009d46 <pow+0xa2>
 8009cce:	ec51 0b18 	vmov	r0, r1, d8
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	f7f6 fe9b 	bl	8000a10 <__aeabi_dcmpeq>
 8009cda:	b1b8      	cbz	r0, 8009d0c <pow+0x68>
 8009cdc:	2200      	movs	r2, #0
 8009cde:	2300      	movs	r3, #0
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fe94 	bl	8000a10 <__aeabi_dcmpeq>
 8009ce8:	2800      	cmp	r0, #0
 8009cea:	d146      	bne.n	8009d7a <pow+0xd6>
 8009cec:	ec45 4b10 	vmov	d0, r4, r5
 8009cf0:	f000 fa6d 	bl	800a1ce <finite>
 8009cf4:	b338      	cbz	r0, 8009d46 <pow+0xa2>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	f7f6 fe91 	bl	8000a24 <__aeabi_dcmplt>
 8009d02:	b300      	cbz	r0, 8009d46 <pow+0xa2>
 8009d04:	f7ff ff96 	bl	8009c34 <__errno>
 8009d08:	2322      	movs	r3, #34	@ 0x22
 8009d0a:	e01b      	b.n	8009d44 <pow+0xa0>
 8009d0c:	ec47 6b10 	vmov	d0, r6, r7
 8009d10:	f000 fa5d 	bl	800a1ce <finite>
 8009d14:	b9e0      	cbnz	r0, 8009d50 <pow+0xac>
 8009d16:	eeb0 0a48 	vmov.f32	s0, s16
 8009d1a:	eef0 0a68 	vmov.f32	s1, s17
 8009d1e:	f000 fa56 	bl	800a1ce <finite>
 8009d22:	b1a8      	cbz	r0, 8009d50 <pow+0xac>
 8009d24:	ec45 4b10 	vmov	d0, r4, r5
 8009d28:	f000 fa51 	bl	800a1ce <finite>
 8009d2c:	b180      	cbz	r0, 8009d50 <pow+0xac>
 8009d2e:	4632      	mov	r2, r6
 8009d30:	463b      	mov	r3, r7
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 fe9d 	bl	8000a74 <__aeabi_dcmpun>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d0e2      	beq.n	8009d04 <pow+0x60>
 8009d3e:	f7ff ff79 	bl	8009c34 <__errno>
 8009d42:	2321      	movs	r3, #33	@ 0x21
 8009d44:	6003      	str	r3, [r0, #0]
 8009d46:	ecbd 8b02 	vpop	{d8}
 8009d4a:	ec47 6b10 	vmov	d0, r6, r7
 8009d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d50:	2200      	movs	r2, #0
 8009d52:	2300      	movs	r3, #0
 8009d54:	4630      	mov	r0, r6
 8009d56:	4639      	mov	r1, r7
 8009d58:	f7f6 fe5a 	bl	8000a10 <__aeabi_dcmpeq>
 8009d5c:	2800      	cmp	r0, #0
 8009d5e:	d0f2      	beq.n	8009d46 <pow+0xa2>
 8009d60:	eeb0 0a48 	vmov.f32	s0, s16
 8009d64:	eef0 0a68 	vmov.f32	s1, s17
 8009d68:	f000 fa31 	bl	800a1ce <finite>
 8009d6c:	2800      	cmp	r0, #0
 8009d6e:	d0ea      	beq.n	8009d46 <pow+0xa2>
 8009d70:	ec45 4b10 	vmov	d0, r4, r5
 8009d74:	f000 fa2b 	bl	800a1ce <finite>
 8009d78:	e7c3      	b.n	8009d02 <pow+0x5e>
 8009d7a:	4f01      	ldr	r7, [pc, #4]	@ (8009d80 <pow+0xdc>)
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	e7e2      	b.n	8009d46 <pow+0xa2>
 8009d80:	3ff00000 	.word	0x3ff00000

08009d84 <sqrt>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	ed2d 8b02 	vpush	{d8}
 8009d8a:	ec55 4b10 	vmov	r4, r5, d0
 8009d8e:	f000 fa33 	bl	800a1f8 <__ieee754_sqrt>
 8009d92:	4622      	mov	r2, r4
 8009d94:	462b      	mov	r3, r5
 8009d96:	4620      	mov	r0, r4
 8009d98:	4629      	mov	r1, r5
 8009d9a:	eeb0 8a40 	vmov.f32	s16, s0
 8009d9e:	eef0 8a60 	vmov.f32	s17, s1
 8009da2:	f7f6 fe67 	bl	8000a74 <__aeabi_dcmpun>
 8009da6:	b990      	cbnz	r0, 8009dce <sqrt+0x4a>
 8009da8:	2200      	movs	r2, #0
 8009daa:	2300      	movs	r3, #0
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fe38 	bl	8000a24 <__aeabi_dcmplt>
 8009db4:	b158      	cbz	r0, 8009dce <sqrt+0x4a>
 8009db6:	f7ff ff3d 	bl	8009c34 <__errno>
 8009dba:	2321      	movs	r3, #33	@ 0x21
 8009dbc:	6003      	str	r3, [r0, #0]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4619      	mov	r1, r3
 8009dc6:	f7f6 fce5 	bl	8000794 <__aeabi_ddiv>
 8009dca:	ec41 0b18 	vmov	d8, r0, r1
 8009dce:	eeb0 0a48 	vmov.f32	s0, s16
 8009dd2:	eef0 0a68 	vmov.f32	s1, s17
 8009dd6:	ecbd 8b02 	vpop	{d8}
 8009dda:	bd38      	pop	{r3, r4, r5, pc}
 8009ddc:	0000      	movs	r0, r0
	...

08009de0 <atan>:
 8009de0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009de4:	ec55 4b10 	vmov	r4, r5, d0
 8009de8:	4bbf      	ldr	r3, [pc, #764]	@ (800a0e8 <atan+0x308>)
 8009dea:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8009dee:	429e      	cmp	r6, r3
 8009df0:	46ab      	mov	fp, r5
 8009df2:	d918      	bls.n	8009e26 <atan+0x46>
 8009df4:	4bbd      	ldr	r3, [pc, #756]	@ (800a0ec <atan+0x30c>)
 8009df6:	429e      	cmp	r6, r3
 8009df8:	d801      	bhi.n	8009dfe <atan+0x1e>
 8009dfa:	d109      	bne.n	8009e10 <atan+0x30>
 8009dfc:	b144      	cbz	r4, 8009e10 <atan+0x30>
 8009dfe:	4622      	mov	r2, r4
 8009e00:	462b      	mov	r3, r5
 8009e02:	4620      	mov	r0, r4
 8009e04:	4629      	mov	r1, r5
 8009e06:	f7f6 f9e5 	bl	80001d4 <__adddf3>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	460d      	mov	r5, r1
 8009e0e:	e006      	b.n	8009e1e <atan+0x3e>
 8009e10:	f1bb 0f00 	cmp.w	fp, #0
 8009e14:	f340 812b 	ble.w	800a06e <atan+0x28e>
 8009e18:	a597      	add	r5, pc, #604	@ (adr r5, 800a078 <atan+0x298>)
 8009e1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009e1e:	ec45 4b10 	vmov	d0, r4, r5
 8009e22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e26:	4bb2      	ldr	r3, [pc, #712]	@ (800a0f0 <atan+0x310>)
 8009e28:	429e      	cmp	r6, r3
 8009e2a:	d813      	bhi.n	8009e54 <atan+0x74>
 8009e2c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8009e30:	429e      	cmp	r6, r3
 8009e32:	d80c      	bhi.n	8009e4e <atan+0x6e>
 8009e34:	a392      	add	r3, pc, #584	@ (adr r3, 800a080 <atan+0x2a0>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	4620      	mov	r0, r4
 8009e3c:	4629      	mov	r1, r5
 8009e3e:	f7f6 f9c9 	bl	80001d4 <__adddf3>
 8009e42:	4bac      	ldr	r3, [pc, #688]	@ (800a0f4 <atan+0x314>)
 8009e44:	2200      	movs	r2, #0
 8009e46:	f7f6 fe0b 	bl	8000a60 <__aeabi_dcmpgt>
 8009e4a:	2800      	cmp	r0, #0
 8009e4c:	d1e7      	bne.n	8009e1e <atan+0x3e>
 8009e4e:	f04f 3aff 	mov.w	sl, #4294967295
 8009e52:	e029      	b.n	8009ea8 <atan+0xc8>
 8009e54:	f000 f95c 	bl	800a110 <fabs>
 8009e58:	4ba7      	ldr	r3, [pc, #668]	@ (800a0f8 <atan+0x318>)
 8009e5a:	429e      	cmp	r6, r3
 8009e5c:	ec55 4b10 	vmov	r4, r5, d0
 8009e60:	f200 80bc 	bhi.w	8009fdc <atan+0x1fc>
 8009e64:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8009e68:	429e      	cmp	r6, r3
 8009e6a:	f200 809e 	bhi.w	8009faa <atan+0x1ca>
 8009e6e:	4622      	mov	r2, r4
 8009e70:	462b      	mov	r3, r5
 8009e72:	4620      	mov	r0, r4
 8009e74:	4629      	mov	r1, r5
 8009e76:	f7f6 f9ad 	bl	80001d4 <__adddf3>
 8009e7a:	4b9e      	ldr	r3, [pc, #632]	@ (800a0f4 <atan+0x314>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	f7f6 f9a7 	bl	80001d0 <__aeabi_dsub>
 8009e82:	2200      	movs	r2, #0
 8009e84:	4606      	mov	r6, r0
 8009e86:	460f      	mov	r7, r1
 8009e88:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 f9a0 	bl	80001d4 <__adddf3>
 8009e94:	4602      	mov	r2, r0
 8009e96:	460b      	mov	r3, r1
 8009e98:	4630      	mov	r0, r6
 8009e9a:	4639      	mov	r1, r7
 8009e9c:	f7f6 fc7a 	bl	8000794 <__aeabi_ddiv>
 8009ea0:	f04f 0a00 	mov.w	sl, #0
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	460d      	mov	r5, r1
 8009ea8:	4622      	mov	r2, r4
 8009eaa:	462b      	mov	r3, r5
 8009eac:	4620      	mov	r0, r4
 8009eae:	4629      	mov	r1, r5
 8009eb0:	f7f6 fb46 	bl	8000540 <__aeabi_dmul>
 8009eb4:	4602      	mov	r2, r0
 8009eb6:	460b      	mov	r3, r1
 8009eb8:	4680      	mov	r8, r0
 8009eba:	4689      	mov	r9, r1
 8009ebc:	f7f6 fb40 	bl	8000540 <__aeabi_dmul>
 8009ec0:	a371      	add	r3, pc, #452	@ (adr r3, 800a088 <atan+0x2a8>)
 8009ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ec6:	4606      	mov	r6, r0
 8009ec8:	460f      	mov	r7, r1
 8009eca:	f7f6 fb39 	bl	8000540 <__aeabi_dmul>
 8009ece:	a370      	add	r3, pc, #448	@ (adr r3, 800a090 <atan+0x2b0>)
 8009ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ed4:	f7f6 f97e 	bl	80001d4 <__adddf3>
 8009ed8:	4632      	mov	r2, r6
 8009eda:	463b      	mov	r3, r7
 8009edc:	f7f6 fb30 	bl	8000540 <__aeabi_dmul>
 8009ee0:	a36d      	add	r3, pc, #436	@ (adr r3, 800a098 <atan+0x2b8>)
 8009ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee6:	f7f6 f975 	bl	80001d4 <__adddf3>
 8009eea:	4632      	mov	r2, r6
 8009eec:	463b      	mov	r3, r7
 8009eee:	f7f6 fb27 	bl	8000540 <__aeabi_dmul>
 8009ef2:	a36b      	add	r3, pc, #428	@ (adr r3, 800a0a0 <atan+0x2c0>)
 8009ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef8:	f7f6 f96c 	bl	80001d4 <__adddf3>
 8009efc:	4632      	mov	r2, r6
 8009efe:	463b      	mov	r3, r7
 8009f00:	f7f6 fb1e 	bl	8000540 <__aeabi_dmul>
 8009f04:	a368      	add	r3, pc, #416	@ (adr r3, 800a0a8 <atan+0x2c8>)
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f7f6 f963 	bl	80001d4 <__adddf3>
 8009f0e:	4632      	mov	r2, r6
 8009f10:	463b      	mov	r3, r7
 8009f12:	f7f6 fb15 	bl	8000540 <__aeabi_dmul>
 8009f16:	a366      	add	r3, pc, #408	@ (adr r3, 800a0b0 <atan+0x2d0>)
 8009f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f1c:	f7f6 f95a 	bl	80001d4 <__adddf3>
 8009f20:	4642      	mov	r2, r8
 8009f22:	464b      	mov	r3, r9
 8009f24:	f7f6 fb0c 	bl	8000540 <__aeabi_dmul>
 8009f28:	a363      	add	r3, pc, #396	@ (adr r3, 800a0b8 <atan+0x2d8>)
 8009f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f2e:	4680      	mov	r8, r0
 8009f30:	4689      	mov	r9, r1
 8009f32:	4630      	mov	r0, r6
 8009f34:	4639      	mov	r1, r7
 8009f36:	f7f6 fb03 	bl	8000540 <__aeabi_dmul>
 8009f3a:	a361      	add	r3, pc, #388	@ (adr r3, 800a0c0 <atan+0x2e0>)
 8009f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f40:	f7f6 f946 	bl	80001d0 <__aeabi_dsub>
 8009f44:	4632      	mov	r2, r6
 8009f46:	463b      	mov	r3, r7
 8009f48:	f7f6 fafa 	bl	8000540 <__aeabi_dmul>
 8009f4c:	a35e      	add	r3, pc, #376	@ (adr r3, 800a0c8 <atan+0x2e8>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7f6 f93d 	bl	80001d0 <__aeabi_dsub>
 8009f56:	4632      	mov	r2, r6
 8009f58:	463b      	mov	r3, r7
 8009f5a:	f7f6 faf1 	bl	8000540 <__aeabi_dmul>
 8009f5e:	a35c      	add	r3, pc, #368	@ (adr r3, 800a0d0 <atan+0x2f0>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	f7f6 f934 	bl	80001d0 <__aeabi_dsub>
 8009f68:	4632      	mov	r2, r6
 8009f6a:	463b      	mov	r3, r7
 8009f6c:	f7f6 fae8 	bl	8000540 <__aeabi_dmul>
 8009f70:	a359      	add	r3, pc, #356	@ (adr r3, 800a0d8 <atan+0x2f8>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f7f6 f92b 	bl	80001d0 <__aeabi_dsub>
 8009f7a:	4632      	mov	r2, r6
 8009f7c:	463b      	mov	r3, r7
 8009f7e:	f7f6 fadf 	bl	8000540 <__aeabi_dmul>
 8009f82:	4602      	mov	r2, r0
 8009f84:	460b      	mov	r3, r1
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	f7f6 f923 	bl	80001d4 <__adddf3>
 8009f8e:	4622      	mov	r2, r4
 8009f90:	462b      	mov	r3, r5
 8009f92:	f7f6 fad5 	bl	8000540 <__aeabi_dmul>
 8009f96:	f1ba 3fff 	cmp.w	sl, #4294967295
 8009f9a:	4602      	mov	r2, r0
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	d148      	bne.n	800a032 <atan+0x252>
 8009fa0:	4620      	mov	r0, r4
 8009fa2:	4629      	mov	r1, r5
 8009fa4:	f7f6 f914 	bl	80001d0 <__aeabi_dsub>
 8009fa8:	e72f      	b.n	8009e0a <atan+0x2a>
 8009faa:	4b52      	ldr	r3, [pc, #328]	@ (800a0f4 <atan+0x314>)
 8009fac:	2200      	movs	r2, #0
 8009fae:	4620      	mov	r0, r4
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	f7f6 f90d 	bl	80001d0 <__aeabi_dsub>
 8009fb6:	4b4f      	ldr	r3, [pc, #316]	@ (800a0f4 <atan+0x314>)
 8009fb8:	4606      	mov	r6, r0
 8009fba:	460f      	mov	r7, r1
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	4629      	mov	r1, r5
 8009fc2:	f7f6 f907 	bl	80001d4 <__adddf3>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	460b      	mov	r3, r1
 8009fca:	4630      	mov	r0, r6
 8009fcc:	4639      	mov	r1, r7
 8009fce:	f7f6 fbe1 	bl	8000794 <__aeabi_ddiv>
 8009fd2:	f04f 0a01 	mov.w	sl, #1
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	460d      	mov	r5, r1
 8009fda:	e765      	b.n	8009ea8 <atan+0xc8>
 8009fdc:	4b47      	ldr	r3, [pc, #284]	@ (800a0fc <atan+0x31c>)
 8009fde:	429e      	cmp	r6, r3
 8009fe0:	d21c      	bcs.n	800a01c <atan+0x23c>
 8009fe2:	4b47      	ldr	r3, [pc, #284]	@ (800a100 <atan+0x320>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	4620      	mov	r0, r4
 8009fe8:	4629      	mov	r1, r5
 8009fea:	f7f6 f8f1 	bl	80001d0 <__aeabi_dsub>
 8009fee:	4b44      	ldr	r3, [pc, #272]	@ (800a100 <atan+0x320>)
 8009ff0:	4606      	mov	r6, r0
 8009ff2:	460f      	mov	r7, r1
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	4629      	mov	r1, r5
 8009ffa:	f7f6 faa1 	bl	8000540 <__aeabi_dmul>
 8009ffe:	4b3d      	ldr	r3, [pc, #244]	@ (800a0f4 <atan+0x314>)
 800a000:	2200      	movs	r2, #0
 800a002:	f7f6 f8e7 	bl	80001d4 <__adddf3>
 800a006:	4602      	mov	r2, r0
 800a008:	460b      	mov	r3, r1
 800a00a:	4630      	mov	r0, r6
 800a00c:	4639      	mov	r1, r7
 800a00e:	f7f6 fbc1 	bl	8000794 <__aeabi_ddiv>
 800a012:	f04f 0a02 	mov.w	sl, #2
 800a016:	4604      	mov	r4, r0
 800a018:	460d      	mov	r5, r1
 800a01a:	e745      	b.n	8009ea8 <atan+0xc8>
 800a01c:	4622      	mov	r2, r4
 800a01e:	462b      	mov	r3, r5
 800a020:	4938      	ldr	r1, [pc, #224]	@ (800a104 <atan+0x324>)
 800a022:	2000      	movs	r0, #0
 800a024:	f7f6 fbb6 	bl	8000794 <__aeabi_ddiv>
 800a028:	f04f 0a03 	mov.w	sl, #3
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	e73a      	b.n	8009ea8 <atan+0xc8>
 800a032:	4b35      	ldr	r3, [pc, #212]	@ (800a108 <atan+0x328>)
 800a034:	4e35      	ldr	r6, [pc, #212]	@ (800a10c <atan+0x32c>)
 800a036:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 f8c7 	bl	80001d0 <__aeabi_dsub>
 800a042:	4622      	mov	r2, r4
 800a044:	462b      	mov	r3, r5
 800a046:	f7f6 f8c3 	bl	80001d0 <__aeabi_dsub>
 800a04a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	e9d6 0100 	ldrd	r0, r1, [r6]
 800a056:	f7f6 f8bb 	bl	80001d0 <__aeabi_dsub>
 800a05a:	f1bb 0f00 	cmp.w	fp, #0
 800a05e:	4604      	mov	r4, r0
 800a060:	460d      	mov	r5, r1
 800a062:	f6bf aedc 	bge.w	8009e1e <atan+0x3e>
 800a066:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a06a:	461d      	mov	r5, r3
 800a06c:	e6d7      	b.n	8009e1e <atan+0x3e>
 800a06e:	a51c      	add	r5, pc, #112	@ (adr r5, 800a0e0 <atan+0x300>)
 800a070:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a074:	e6d3      	b.n	8009e1e <atan+0x3e>
 800a076:	bf00      	nop
 800a078:	54442d18 	.word	0x54442d18
 800a07c:	3ff921fb 	.word	0x3ff921fb
 800a080:	8800759c 	.word	0x8800759c
 800a084:	7e37e43c 	.word	0x7e37e43c
 800a088:	e322da11 	.word	0xe322da11
 800a08c:	3f90ad3a 	.word	0x3f90ad3a
 800a090:	24760deb 	.word	0x24760deb
 800a094:	3fa97b4b 	.word	0x3fa97b4b
 800a098:	a0d03d51 	.word	0xa0d03d51
 800a09c:	3fb10d66 	.word	0x3fb10d66
 800a0a0:	c54c206e 	.word	0xc54c206e
 800a0a4:	3fb745cd 	.word	0x3fb745cd
 800a0a8:	920083ff 	.word	0x920083ff
 800a0ac:	3fc24924 	.word	0x3fc24924
 800a0b0:	5555550d 	.word	0x5555550d
 800a0b4:	3fd55555 	.word	0x3fd55555
 800a0b8:	2c6a6c2f 	.word	0x2c6a6c2f
 800a0bc:	bfa2b444 	.word	0xbfa2b444
 800a0c0:	52defd9a 	.word	0x52defd9a
 800a0c4:	3fadde2d 	.word	0x3fadde2d
 800a0c8:	af749a6d 	.word	0xaf749a6d
 800a0cc:	3fb3b0f2 	.word	0x3fb3b0f2
 800a0d0:	fe231671 	.word	0xfe231671
 800a0d4:	3fbc71c6 	.word	0x3fbc71c6
 800a0d8:	9998ebc4 	.word	0x9998ebc4
 800a0dc:	3fc99999 	.word	0x3fc99999
 800a0e0:	54442d18 	.word	0x54442d18
 800a0e4:	bff921fb 	.word	0xbff921fb
 800a0e8:	440fffff 	.word	0x440fffff
 800a0ec:	7ff00000 	.word	0x7ff00000
 800a0f0:	3fdbffff 	.word	0x3fdbffff
 800a0f4:	3ff00000 	.word	0x3ff00000
 800a0f8:	3ff2ffff 	.word	0x3ff2ffff
 800a0fc:	40038000 	.word	0x40038000
 800a100:	3ff80000 	.word	0x3ff80000
 800a104:	bff00000 	.word	0xbff00000
 800a108:	0800b710 	.word	0x0800b710
 800a10c:	0800b730 	.word	0x0800b730

0800a110 <fabs>:
 800a110:	ec51 0b10 	vmov	r0, r1, d0
 800a114:	4602      	mov	r2, r0
 800a116:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800a11a:	ec43 2b10 	vmov	d0, r2, r3
 800a11e:	4770      	bx	lr

0800a120 <powf>:
 800a120:	b508      	push	{r3, lr}
 800a122:	ed2d 8b04 	vpush	{d8-d9}
 800a126:	eeb0 8a60 	vmov.f32	s16, s1
 800a12a:	eeb0 9a40 	vmov.f32	s18, s0
 800a12e:	f000 fe83 	bl	800ae38 <__ieee754_powf>
 800a132:	eeb4 8a48 	vcmp.f32	s16, s16
 800a136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a13a:	eef0 8a40 	vmov.f32	s17, s0
 800a13e:	d63e      	bvs.n	800a1be <powf+0x9e>
 800a140:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a148:	d112      	bne.n	800a170 <powf+0x50>
 800a14a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a152:	d039      	beq.n	800a1c8 <powf+0xa8>
 800a154:	eeb0 0a48 	vmov.f32	s0, s16
 800a158:	f000 f844 	bl	800a1e4 <finitef>
 800a15c:	b378      	cbz	r0, 800a1be <powf+0x9e>
 800a15e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a166:	d52a      	bpl.n	800a1be <powf+0x9e>
 800a168:	f7ff fd64 	bl	8009c34 <__errno>
 800a16c:	2322      	movs	r3, #34	@ 0x22
 800a16e:	e014      	b.n	800a19a <powf+0x7a>
 800a170:	f000 f838 	bl	800a1e4 <finitef>
 800a174:	b998      	cbnz	r0, 800a19e <powf+0x7e>
 800a176:	eeb0 0a49 	vmov.f32	s0, s18
 800a17a:	f000 f833 	bl	800a1e4 <finitef>
 800a17e:	b170      	cbz	r0, 800a19e <powf+0x7e>
 800a180:	eeb0 0a48 	vmov.f32	s0, s16
 800a184:	f000 f82e 	bl	800a1e4 <finitef>
 800a188:	b148      	cbz	r0, 800a19e <powf+0x7e>
 800a18a:	eef4 8a68 	vcmp.f32	s17, s17
 800a18e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a192:	d7e9      	bvc.n	800a168 <powf+0x48>
 800a194:	f7ff fd4e 	bl	8009c34 <__errno>
 800a198:	2321      	movs	r3, #33	@ 0x21
 800a19a:	6003      	str	r3, [r0, #0]
 800a19c:	e00f      	b.n	800a1be <powf+0x9e>
 800a19e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800a1a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a6:	d10a      	bne.n	800a1be <powf+0x9e>
 800a1a8:	eeb0 0a49 	vmov.f32	s0, s18
 800a1ac:	f000 f81a 	bl	800a1e4 <finitef>
 800a1b0:	b128      	cbz	r0, 800a1be <powf+0x9e>
 800a1b2:	eeb0 0a48 	vmov.f32	s0, s16
 800a1b6:	f000 f815 	bl	800a1e4 <finitef>
 800a1ba:	2800      	cmp	r0, #0
 800a1bc:	d1d4      	bne.n	800a168 <powf+0x48>
 800a1be:	eeb0 0a68 	vmov.f32	s0, s17
 800a1c2:	ecbd 8b04 	vpop	{d8-d9}
 800a1c6:	bd08      	pop	{r3, pc}
 800a1c8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800a1cc:	e7f7      	b.n	800a1be <powf+0x9e>

0800a1ce <finite>:
 800a1ce:	b082      	sub	sp, #8
 800a1d0:	ed8d 0b00 	vstr	d0, [sp]
 800a1d4:	9801      	ldr	r0, [sp, #4]
 800a1d6:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800a1da:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800a1de:	0fc0      	lsrs	r0, r0, #31
 800a1e0:	b002      	add	sp, #8
 800a1e2:	4770      	bx	lr

0800a1e4 <finitef>:
 800a1e4:	ee10 3a10 	vmov	r3, s0
 800a1e8:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800a1ec:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800a1f0:	bfac      	ite	ge
 800a1f2:	2000      	movge	r0, #0
 800a1f4:	2001      	movlt	r0, #1
 800a1f6:	4770      	bx	lr

0800a1f8 <__ieee754_sqrt>:
 800a1f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1fc:	4a68      	ldr	r2, [pc, #416]	@ (800a3a0 <__ieee754_sqrt+0x1a8>)
 800a1fe:	ec55 4b10 	vmov	r4, r5, d0
 800a202:	43aa      	bics	r2, r5
 800a204:	462b      	mov	r3, r5
 800a206:	4621      	mov	r1, r4
 800a208:	d110      	bne.n	800a22c <__ieee754_sqrt+0x34>
 800a20a:	4622      	mov	r2, r4
 800a20c:	4620      	mov	r0, r4
 800a20e:	4629      	mov	r1, r5
 800a210:	f7f6 f996 	bl	8000540 <__aeabi_dmul>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4620      	mov	r0, r4
 800a21a:	4629      	mov	r1, r5
 800a21c:	f7f5 ffda 	bl	80001d4 <__adddf3>
 800a220:	4604      	mov	r4, r0
 800a222:	460d      	mov	r5, r1
 800a224:	ec45 4b10 	vmov	d0, r4, r5
 800a228:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22c:	2d00      	cmp	r5, #0
 800a22e:	dc0e      	bgt.n	800a24e <__ieee754_sqrt+0x56>
 800a230:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800a234:	4322      	orrs	r2, r4
 800a236:	d0f5      	beq.n	800a224 <__ieee754_sqrt+0x2c>
 800a238:	b19d      	cbz	r5, 800a262 <__ieee754_sqrt+0x6a>
 800a23a:	4622      	mov	r2, r4
 800a23c:	4620      	mov	r0, r4
 800a23e:	4629      	mov	r1, r5
 800a240:	f7f5 ffc6 	bl	80001d0 <__aeabi_dsub>
 800a244:	4602      	mov	r2, r0
 800a246:	460b      	mov	r3, r1
 800a248:	f7f6 faa4 	bl	8000794 <__aeabi_ddiv>
 800a24c:	e7e8      	b.n	800a220 <__ieee754_sqrt+0x28>
 800a24e:	152a      	asrs	r2, r5, #20
 800a250:	d115      	bne.n	800a27e <__ieee754_sqrt+0x86>
 800a252:	2000      	movs	r0, #0
 800a254:	e009      	b.n	800a26a <__ieee754_sqrt+0x72>
 800a256:	0acb      	lsrs	r3, r1, #11
 800a258:	3a15      	subs	r2, #21
 800a25a:	0549      	lsls	r1, r1, #21
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0fa      	beq.n	800a256 <__ieee754_sqrt+0x5e>
 800a260:	e7f7      	b.n	800a252 <__ieee754_sqrt+0x5a>
 800a262:	462a      	mov	r2, r5
 800a264:	e7fa      	b.n	800a25c <__ieee754_sqrt+0x64>
 800a266:	005b      	lsls	r3, r3, #1
 800a268:	3001      	adds	r0, #1
 800a26a:	02dc      	lsls	r4, r3, #11
 800a26c:	d5fb      	bpl.n	800a266 <__ieee754_sqrt+0x6e>
 800a26e:	1e44      	subs	r4, r0, #1
 800a270:	1b12      	subs	r2, r2, r4
 800a272:	f1c0 0420 	rsb	r4, r0, #32
 800a276:	fa21 f404 	lsr.w	r4, r1, r4
 800a27a:	4323      	orrs	r3, r4
 800a27c:	4081      	lsls	r1, r0
 800a27e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a282:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800a286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a28a:	07d2      	lsls	r2, r2, #31
 800a28c:	bf5c      	itt	pl
 800a28e:	005b      	lslpl	r3, r3, #1
 800a290:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800a294:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a298:	bf58      	it	pl
 800a29a:	0049      	lslpl	r1, r1, #1
 800a29c:	2600      	movs	r6, #0
 800a29e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800a2a2:	106d      	asrs	r5, r5, #1
 800a2a4:	0049      	lsls	r1, r1, #1
 800a2a6:	2016      	movs	r0, #22
 800a2a8:	4632      	mov	r2, r6
 800a2aa:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800a2ae:	1917      	adds	r7, r2, r4
 800a2b0:	429f      	cmp	r7, r3
 800a2b2:	bfde      	ittt	le
 800a2b4:	193a      	addle	r2, r7, r4
 800a2b6:	1bdb      	suble	r3, r3, r7
 800a2b8:	1936      	addle	r6, r6, r4
 800a2ba:	0fcf      	lsrs	r7, r1, #31
 800a2bc:	3801      	subs	r0, #1
 800a2be:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800a2c2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a2ca:	d1f0      	bne.n	800a2ae <__ieee754_sqrt+0xb6>
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	2720      	movs	r7, #32
 800a2d0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	eb00 0e0c 	add.w	lr, r0, ip
 800a2da:	db02      	blt.n	800a2e2 <__ieee754_sqrt+0xea>
 800a2dc:	d113      	bne.n	800a306 <__ieee754_sqrt+0x10e>
 800a2de:	458e      	cmp	lr, r1
 800a2e0:	d811      	bhi.n	800a306 <__ieee754_sqrt+0x10e>
 800a2e2:	f1be 0f00 	cmp.w	lr, #0
 800a2e6:	eb0e 000c 	add.w	r0, lr, ip
 800a2ea:	da42      	bge.n	800a372 <__ieee754_sqrt+0x17a>
 800a2ec:	2800      	cmp	r0, #0
 800a2ee:	db40      	blt.n	800a372 <__ieee754_sqrt+0x17a>
 800a2f0:	f102 0801 	add.w	r8, r2, #1
 800a2f4:	1a9b      	subs	r3, r3, r2
 800a2f6:	458e      	cmp	lr, r1
 800a2f8:	bf88      	it	hi
 800a2fa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800a2fe:	eba1 010e 	sub.w	r1, r1, lr
 800a302:	4464      	add	r4, ip
 800a304:	4642      	mov	r2, r8
 800a306:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800a30a:	3f01      	subs	r7, #1
 800a30c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800a310:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a314:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800a318:	d1dc      	bne.n	800a2d4 <__ieee754_sqrt+0xdc>
 800a31a:	4319      	orrs	r1, r3
 800a31c:	d01b      	beq.n	800a356 <__ieee754_sqrt+0x15e>
 800a31e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800a3a4 <__ieee754_sqrt+0x1ac>
 800a322:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800a3a8 <__ieee754_sqrt+0x1b0>
 800a326:	e9da 0100 	ldrd	r0, r1, [sl]
 800a32a:	e9db 2300 	ldrd	r2, r3, [fp]
 800a32e:	f7f5 ff4f 	bl	80001d0 <__aeabi_dsub>
 800a332:	e9da 8900 	ldrd	r8, r9, [sl]
 800a336:	4602      	mov	r2, r0
 800a338:	460b      	mov	r3, r1
 800a33a:	4640      	mov	r0, r8
 800a33c:	4649      	mov	r1, r9
 800a33e:	f7f6 fb7b 	bl	8000a38 <__aeabi_dcmple>
 800a342:	b140      	cbz	r0, 800a356 <__ieee754_sqrt+0x15e>
 800a344:	f1b4 3fff 	cmp.w	r4, #4294967295
 800a348:	e9da 0100 	ldrd	r0, r1, [sl]
 800a34c:	e9db 2300 	ldrd	r2, r3, [fp]
 800a350:	d111      	bne.n	800a376 <__ieee754_sqrt+0x17e>
 800a352:	3601      	adds	r6, #1
 800a354:	463c      	mov	r4, r7
 800a356:	1072      	asrs	r2, r6, #1
 800a358:	0863      	lsrs	r3, r4, #1
 800a35a:	07f1      	lsls	r1, r6, #31
 800a35c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800a360:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800a364:	bf48      	it	mi
 800a366:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800a36a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800a36e:	4618      	mov	r0, r3
 800a370:	e756      	b.n	800a220 <__ieee754_sqrt+0x28>
 800a372:	4690      	mov	r8, r2
 800a374:	e7be      	b.n	800a2f4 <__ieee754_sqrt+0xfc>
 800a376:	f7f5 ff2d 	bl	80001d4 <__adddf3>
 800a37a:	e9da 8900 	ldrd	r8, r9, [sl]
 800a37e:	4602      	mov	r2, r0
 800a380:	460b      	mov	r3, r1
 800a382:	4640      	mov	r0, r8
 800a384:	4649      	mov	r1, r9
 800a386:	f7f6 fb4d 	bl	8000a24 <__aeabi_dcmplt>
 800a38a:	b120      	cbz	r0, 800a396 <__ieee754_sqrt+0x19e>
 800a38c:	1ca0      	adds	r0, r4, #2
 800a38e:	bf08      	it	eq
 800a390:	3601      	addeq	r6, #1
 800a392:	3402      	adds	r4, #2
 800a394:	e7df      	b.n	800a356 <__ieee754_sqrt+0x15e>
 800a396:	1c63      	adds	r3, r4, #1
 800a398:	f023 0401 	bic.w	r4, r3, #1
 800a39c:	e7db      	b.n	800a356 <__ieee754_sqrt+0x15e>
 800a39e:	bf00      	nop
 800a3a0:	7ff00000 	.word	0x7ff00000
 800a3a4:	200000c0 	.word	0x200000c0
 800a3a8:	200000b8 	.word	0x200000b8
 800a3ac:	00000000 	.word	0x00000000

0800a3b0 <__ieee754_pow>:
 800a3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b4:	b091      	sub	sp, #68	@ 0x44
 800a3b6:	ed8d 1b00 	vstr	d1, [sp]
 800a3ba:	e9dd 1900 	ldrd	r1, r9, [sp]
 800a3be:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800a3c2:	ea5a 0001 	orrs.w	r0, sl, r1
 800a3c6:	ec57 6b10 	vmov	r6, r7, d0
 800a3ca:	d113      	bne.n	800a3f4 <__ieee754_pow+0x44>
 800a3cc:	19b3      	adds	r3, r6, r6
 800a3ce:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800a3d2:	4152      	adcs	r2, r2
 800a3d4:	4298      	cmp	r0, r3
 800a3d6:	4b98      	ldr	r3, [pc, #608]	@ (800a638 <__ieee754_pow+0x288>)
 800a3d8:	4193      	sbcs	r3, r2
 800a3da:	f080 84ea 	bcs.w	800adb2 <__ieee754_pow+0xa02>
 800a3de:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	4639      	mov	r1, r7
 800a3e6:	f7f5 fef5 	bl	80001d4 <__adddf3>
 800a3ea:	ec41 0b10 	vmov	d0, r0, r1
 800a3ee:	b011      	add	sp, #68	@ 0x44
 800a3f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f4:	4a91      	ldr	r2, [pc, #580]	@ (800a63c <__ieee754_pow+0x28c>)
 800a3f6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800a3fa:	4590      	cmp	r8, r2
 800a3fc:	463d      	mov	r5, r7
 800a3fe:	4633      	mov	r3, r6
 800a400:	d806      	bhi.n	800a410 <__ieee754_pow+0x60>
 800a402:	d101      	bne.n	800a408 <__ieee754_pow+0x58>
 800a404:	2e00      	cmp	r6, #0
 800a406:	d1ea      	bne.n	800a3de <__ieee754_pow+0x2e>
 800a408:	4592      	cmp	sl, r2
 800a40a:	d801      	bhi.n	800a410 <__ieee754_pow+0x60>
 800a40c:	d10e      	bne.n	800a42c <__ieee754_pow+0x7c>
 800a40e:	b169      	cbz	r1, 800a42c <__ieee754_pow+0x7c>
 800a410:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800a414:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800a418:	431d      	orrs	r5, r3
 800a41a:	d1e0      	bne.n	800a3de <__ieee754_pow+0x2e>
 800a41c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a420:	18db      	adds	r3, r3, r3
 800a422:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800a426:	4152      	adcs	r2, r2
 800a428:	429d      	cmp	r5, r3
 800a42a:	e7d4      	b.n	800a3d6 <__ieee754_pow+0x26>
 800a42c:	2d00      	cmp	r5, #0
 800a42e:	46c3      	mov	fp, r8
 800a430:	da3a      	bge.n	800a4a8 <__ieee754_pow+0xf8>
 800a432:	4a83      	ldr	r2, [pc, #524]	@ (800a640 <__ieee754_pow+0x290>)
 800a434:	4592      	cmp	sl, r2
 800a436:	d84d      	bhi.n	800a4d4 <__ieee754_pow+0x124>
 800a438:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800a43c:	4592      	cmp	sl, r2
 800a43e:	f240 84c7 	bls.w	800add0 <__ieee754_pow+0xa20>
 800a442:	ea4f 522a 	mov.w	r2, sl, asr #20
 800a446:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800a44a:	2a14      	cmp	r2, #20
 800a44c:	dd0f      	ble.n	800a46e <__ieee754_pow+0xbe>
 800a44e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800a452:	fa21 f402 	lsr.w	r4, r1, r2
 800a456:	fa04 f202 	lsl.w	r2, r4, r2
 800a45a:	428a      	cmp	r2, r1
 800a45c:	f040 84b8 	bne.w	800add0 <__ieee754_pow+0xa20>
 800a460:	f004 0401 	and.w	r4, r4, #1
 800a464:	f1c4 0402 	rsb	r4, r4, #2
 800a468:	2900      	cmp	r1, #0
 800a46a:	d158      	bne.n	800a51e <__ieee754_pow+0x16e>
 800a46c:	e00e      	b.n	800a48c <__ieee754_pow+0xdc>
 800a46e:	2900      	cmp	r1, #0
 800a470:	d154      	bne.n	800a51c <__ieee754_pow+0x16c>
 800a472:	f1c2 0214 	rsb	r2, r2, #20
 800a476:	fa4a f402 	asr.w	r4, sl, r2
 800a47a:	fa04 f202 	lsl.w	r2, r4, r2
 800a47e:	4552      	cmp	r2, sl
 800a480:	f040 84a3 	bne.w	800adca <__ieee754_pow+0xa1a>
 800a484:	f004 0401 	and.w	r4, r4, #1
 800a488:	f1c4 0402 	rsb	r4, r4, #2
 800a48c:	4a6d      	ldr	r2, [pc, #436]	@ (800a644 <__ieee754_pow+0x294>)
 800a48e:	4592      	cmp	sl, r2
 800a490:	d12e      	bne.n	800a4f0 <__ieee754_pow+0x140>
 800a492:	f1b9 0f00 	cmp.w	r9, #0
 800a496:	f280 8494 	bge.w	800adc2 <__ieee754_pow+0xa12>
 800a49a:	496a      	ldr	r1, [pc, #424]	@ (800a644 <__ieee754_pow+0x294>)
 800a49c:	4632      	mov	r2, r6
 800a49e:	463b      	mov	r3, r7
 800a4a0:	2000      	movs	r0, #0
 800a4a2:	f7f6 f977 	bl	8000794 <__aeabi_ddiv>
 800a4a6:	e7a0      	b.n	800a3ea <__ieee754_pow+0x3a>
 800a4a8:	2400      	movs	r4, #0
 800a4aa:	bbc1      	cbnz	r1, 800a51e <__ieee754_pow+0x16e>
 800a4ac:	4a63      	ldr	r2, [pc, #396]	@ (800a63c <__ieee754_pow+0x28c>)
 800a4ae:	4592      	cmp	sl, r2
 800a4b0:	d1ec      	bne.n	800a48c <__ieee754_pow+0xdc>
 800a4b2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800a4b6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800a4ba:	431a      	orrs	r2, r3
 800a4bc:	f000 8479 	beq.w	800adb2 <__ieee754_pow+0xa02>
 800a4c0:	4b61      	ldr	r3, [pc, #388]	@ (800a648 <__ieee754_pow+0x298>)
 800a4c2:	4598      	cmp	r8, r3
 800a4c4:	d908      	bls.n	800a4d8 <__ieee754_pow+0x128>
 800a4c6:	f1b9 0f00 	cmp.w	r9, #0
 800a4ca:	f2c0 8476 	blt.w	800adba <__ieee754_pow+0xa0a>
 800a4ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4d2:	e78a      	b.n	800a3ea <__ieee754_pow+0x3a>
 800a4d4:	2402      	movs	r4, #2
 800a4d6:	e7e8      	b.n	800a4aa <__ieee754_pow+0xfa>
 800a4d8:	f1b9 0f00 	cmp.w	r9, #0
 800a4dc:	f04f 0000 	mov.w	r0, #0
 800a4e0:	f04f 0100 	mov.w	r1, #0
 800a4e4:	da81      	bge.n	800a3ea <__ieee754_pow+0x3a>
 800a4e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a4ea:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800a4ee:	e77c      	b.n	800a3ea <__ieee754_pow+0x3a>
 800a4f0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800a4f4:	d106      	bne.n	800a504 <__ieee754_pow+0x154>
 800a4f6:	4632      	mov	r2, r6
 800a4f8:	463b      	mov	r3, r7
 800a4fa:	4630      	mov	r0, r6
 800a4fc:	4639      	mov	r1, r7
 800a4fe:	f7f6 f81f 	bl	8000540 <__aeabi_dmul>
 800a502:	e772      	b.n	800a3ea <__ieee754_pow+0x3a>
 800a504:	4a51      	ldr	r2, [pc, #324]	@ (800a64c <__ieee754_pow+0x29c>)
 800a506:	4591      	cmp	r9, r2
 800a508:	d109      	bne.n	800a51e <__ieee754_pow+0x16e>
 800a50a:	2d00      	cmp	r5, #0
 800a50c:	db07      	blt.n	800a51e <__ieee754_pow+0x16e>
 800a50e:	ec47 6b10 	vmov	d0, r6, r7
 800a512:	b011      	add	sp, #68	@ 0x44
 800a514:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a518:	f7ff be6e 	b.w	800a1f8 <__ieee754_sqrt>
 800a51c:	2400      	movs	r4, #0
 800a51e:	ec47 6b10 	vmov	d0, r6, r7
 800a522:	9302      	str	r3, [sp, #8]
 800a524:	f7ff fdf4 	bl	800a110 <fabs>
 800a528:	9b02      	ldr	r3, [sp, #8]
 800a52a:	ec51 0b10 	vmov	r0, r1, d0
 800a52e:	bb53      	cbnz	r3, 800a586 <__ieee754_pow+0x1d6>
 800a530:	4b44      	ldr	r3, [pc, #272]	@ (800a644 <__ieee754_pow+0x294>)
 800a532:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800a536:	429a      	cmp	r2, r3
 800a538:	d002      	beq.n	800a540 <__ieee754_pow+0x190>
 800a53a:	f1b8 0f00 	cmp.w	r8, #0
 800a53e:	d122      	bne.n	800a586 <__ieee754_pow+0x1d6>
 800a540:	f1b9 0f00 	cmp.w	r9, #0
 800a544:	da05      	bge.n	800a552 <__ieee754_pow+0x1a2>
 800a546:	4602      	mov	r2, r0
 800a548:	460b      	mov	r3, r1
 800a54a:	2000      	movs	r0, #0
 800a54c:	493d      	ldr	r1, [pc, #244]	@ (800a644 <__ieee754_pow+0x294>)
 800a54e:	f7f6 f921 	bl	8000794 <__aeabi_ddiv>
 800a552:	2d00      	cmp	r5, #0
 800a554:	f6bf af49 	bge.w	800a3ea <__ieee754_pow+0x3a>
 800a558:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800a55c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800a560:	ea58 0804 	orrs.w	r8, r8, r4
 800a564:	d108      	bne.n	800a578 <__ieee754_pow+0x1c8>
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	4610      	mov	r0, r2
 800a56c:	4619      	mov	r1, r3
 800a56e:	f7f5 fe2f 	bl	80001d0 <__aeabi_dsub>
 800a572:	4602      	mov	r2, r0
 800a574:	460b      	mov	r3, r1
 800a576:	e794      	b.n	800a4a2 <__ieee754_pow+0xf2>
 800a578:	2c01      	cmp	r4, #1
 800a57a:	f47f af36 	bne.w	800a3ea <__ieee754_pow+0x3a>
 800a57e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a582:	4619      	mov	r1, r3
 800a584:	e731      	b.n	800a3ea <__ieee754_pow+0x3a>
 800a586:	0feb      	lsrs	r3, r5, #31
 800a588:	3b01      	subs	r3, #1
 800a58a:	ea53 0204 	orrs.w	r2, r3, r4
 800a58e:	d102      	bne.n	800a596 <__ieee754_pow+0x1e6>
 800a590:	4632      	mov	r2, r6
 800a592:	463b      	mov	r3, r7
 800a594:	e7e9      	b.n	800a56a <__ieee754_pow+0x1ba>
 800a596:	3c01      	subs	r4, #1
 800a598:	431c      	orrs	r4, r3
 800a59a:	d016      	beq.n	800a5ca <__ieee754_pow+0x21a>
 800a59c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800a628 <__ieee754_pow+0x278>
 800a5a0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800a5a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a5a8:	f240 8112 	bls.w	800a7d0 <__ieee754_pow+0x420>
 800a5ac:	4b28      	ldr	r3, [pc, #160]	@ (800a650 <__ieee754_pow+0x2a0>)
 800a5ae:	459a      	cmp	sl, r3
 800a5b0:	4b25      	ldr	r3, [pc, #148]	@ (800a648 <__ieee754_pow+0x298>)
 800a5b2:	d916      	bls.n	800a5e2 <__ieee754_pow+0x232>
 800a5b4:	4598      	cmp	r8, r3
 800a5b6:	d80b      	bhi.n	800a5d0 <__ieee754_pow+0x220>
 800a5b8:	f1b9 0f00 	cmp.w	r9, #0
 800a5bc:	da0b      	bge.n	800a5d6 <__ieee754_pow+0x226>
 800a5be:	2000      	movs	r0, #0
 800a5c0:	b011      	add	sp, #68	@ 0x44
 800a5c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5c6:	f000 bfc3 	b.w	800b550 <__math_oflow>
 800a5ca:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800a630 <__ieee754_pow+0x280>
 800a5ce:	e7e7      	b.n	800a5a0 <__ieee754_pow+0x1f0>
 800a5d0:	f1b9 0f00 	cmp.w	r9, #0
 800a5d4:	dcf3      	bgt.n	800a5be <__ieee754_pow+0x20e>
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	b011      	add	sp, #68	@ 0x44
 800a5da:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5de:	f000 bfaf 	b.w	800b540 <__math_uflow>
 800a5e2:	4598      	cmp	r8, r3
 800a5e4:	d20c      	bcs.n	800a600 <__ieee754_pow+0x250>
 800a5e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f7f6 fa19 	bl	8000a24 <__aeabi_dcmplt>
 800a5f2:	3800      	subs	r0, #0
 800a5f4:	bf18      	it	ne
 800a5f6:	2001      	movne	r0, #1
 800a5f8:	f1b9 0f00 	cmp.w	r9, #0
 800a5fc:	daec      	bge.n	800a5d8 <__ieee754_pow+0x228>
 800a5fe:	e7df      	b.n	800a5c0 <__ieee754_pow+0x210>
 800a600:	4b10      	ldr	r3, [pc, #64]	@ (800a644 <__ieee754_pow+0x294>)
 800a602:	4598      	cmp	r8, r3
 800a604:	f04f 0200 	mov.w	r2, #0
 800a608:	d924      	bls.n	800a654 <__ieee754_pow+0x2a4>
 800a60a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a60e:	2300      	movs	r3, #0
 800a610:	f7f6 fa08 	bl	8000a24 <__aeabi_dcmplt>
 800a614:	3800      	subs	r0, #0
 800a616:	bf18      	it	ne
 800a618:	2001      	movne	r0, #1
 800a61a:	f1b9 0f00 	cmp.w	r9, #0
 800a61e:	dccf      	bgt.n	800a5c0 <__ieee754_pow+0x210>
 800a620:	e7da      	b.n	800a5d8 <__ieee754_pow+0x228>
 800a622:	bf00      	nop
 800a624:	f3af 8000 	nop.w
 800a628:	00000000 	.word	0x00000000
 800a62c:	3ff00000 	.word	0x3ff00000
 800a630:	00000000 	.word	0x00000000
 800a634:	bff00000 	.word	0xbff00000
 800a638:	fff00000 	.word	0xfff00000
 800a63c:	7ff00000 	.word	0x7ff00000
 800a640:	433fffff 	.word	0x433fffff
 800a644:	3ff00000 	.word	0x3ff00000
 800a648:	3fefffff 	.word	0x3fefffff
 800a64c:	3fe00000 	.word	0x3fe00000
 800a650:	43f00000 	.word	0x43f00000
 800a654:	4b5a      	ldr	r3, [pc, #360]	@ (800a7c0 <__ieee754_pow+0x410>)
 800a656:	f7f5 fdbb 	bl	80001d0 <__aeabi_dsub>
 800a65a:	a351      	add	r3, pc, #324	@ (adr r3, 800a7a0 <__ieee754_pow+0x3f0>)
 800a65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	f7f5 ff6c 	bl	8000540 <__aeabi_dmul>
 800a668:	a34f      	add	r3, pc, #316	@ (adr r3, 800a7a8 <__ieee754_pow+0x3f8>)
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	4620      	mov	r0, r4
 800a674:	4629      	mov	r1, r5
 800a676:	f7f5 ff63 	bl	8000540 <__aeabi_dmul>
 800a67a:	4b52      	ldr	r3, [pc, #328]	@ (800a7c4 <__ieee754_pow+0x414>)
 800a67c:	4682      	mov	sl, r0
 800a67e:	468b      	mov	fp, r1
 800a680:	2200      	movs	r2, #0
 800a682:	4620      	mov	r0, r4
 800a684:	4629      	mov	r1, r5
 800a686:	f7f5 ff5b 	bl	8000540 <__aeabi_dmul>
 800a68a:	4602      	mov	r2, r0
 800a68c:	460b      	mov	r3, r1
 800a68e:	a148      	add	r1, pc, #288	@ (adr r1, 800a7b0 <__ieee754_pow+0x400>)
 800a690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a694:	f7f5 fd9c 	bl	80001d0 <__aeabi_dsub>
 800a698:	4622      	mov	r2, r4
 800a69a:	462b      	mov	r3, r5
 800a69c:	f7f5 ff50 	bl	8000540 <__aeabi_dmul>
 800a6a0:	4602      	mov	r2, r0
 800a6a2:	460b      	mov	r3, r1
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	4948      	ldr	r1, [pc, #288]	@ (800a7c8 <__ieee754_pow+0x418>)
 800a6a8:	f7f5 fd92 	bl	80001d0 <__aeabi_dsub>
 800a6ac:	4622      	mov	r2, r4
 800a6ae:	4680      	mov	r8, r0
 800a6b0:	4689      	mov	r9, r1
 800a6b2:	462b      	mov	r3, r5
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	4629      	mov	r1, r5
 800a6b8:	f7f5 ff42 	bl	8000540 <__aeabi_dmul>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	460b      	mov	r3, r1
 800a6c0:	4640      	mov	r0, r8
 800a6c2:	4649      	mov	r1, r9
 800a6c4:	f7f5 ff3c 	bl	8000540 <__aeabi_dmul>
 800a6c8:	a33b      	add	r3, pc, #236	@ (adr r3, 800a7b8 <__ieee754_pow+0x408>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 ff37 	bl	8000540 <__aeabi_dmul>
 800a6d2:	4602      	mov	r2, r0
 800a6d4:	460b      	mov	r3, r1
 800a6d6:	4650      	mov	r0, sl
 800a6d8:	4659      	mov	r1, fp
 800a6da:	f7f5 fd79 	bl	80001d0 <__aeabi_dsub>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4680      	mov	r8, r0
 800a6e4:	4689      	mov	r9, r1
 800a6e6:	4630      	mov	r0, r6
 800a6e8:	4639      	mov	r1, r7
 800a6ea:	f7f5 fd73 	bl	80001d4 <__adddf3>
 800a6ee:	2400      	movs	r4, #0
 800a6f0:	4632      	mov	r2, r6
 800a6f2:	463b      	mov	r3, r7
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	460d      	mov	r5, r1
 800a6f8:	f7f5 fd6a 	bl	80001d0 <__aeabi_dsub>
 800a6fc:	4602      	mov	r2, r0
 800a6fe:	460b      	mov	r3, r1
 800a700:	4640      	mov	r0, r8
 800a702:	4649      	mov	r1, r9
 800a704:	f7f5 fd64 	bl	80001d0 <__aeabi_dsub>
 800a708:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a70c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a710:	2300      	movs	r3, #0
 800a712:	9304      	str	r3, [sp, #16]
 800a714:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a718:	4606      	mov	r6, r0
 800a71a:	460f      	mov	r7, r1
 800a71c:	4652      	mov	r2, sl
 800a71e:	465b      	mov	r3, fp
 800a720:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a724:	f7f5 fd54 	bl	80001d0 <__aeabi_dsub>
 800a728:	4622      	mov	r2, r4
 800a72a:	462b      	mov	r3, r5
 800a72c:	f7f5 ff08 	bl	8000540 <__aeabi_dmul>
 800a730:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a734:	4680      	mov	r8, r0
 800a736:	4689      	mov	r9, r1
 800a738:	4630      	mov	r0, r6
 800a73a:	4639      	mov	r1, r7
 800a73c:	f7f5 ff00 	bl	8000540 <__aeabi_dmul>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4640      	mov	r0, r8
 800a746:	4649      	mov	r1, r9
 800a748:	f7f5 fd44 	bl	80001d4 <__adddf3>
 800a74c:	4652      	mov	r2, sl
 800a74e:	465b      	mov	r3, fp
 800a750:	4606      	mov	r6, r0
 800a752:	460f      	mov	r7, r1
 800a754:	4620      	mov	r0, r4
 800a756:	4629      	mov	r1, r5
 800a758:	f7f5 fef2 	bl	8000540 <__aeabi_dmul>
 800a75c:	460b      	mov	r3, r1
 800a75e:	4602      	mov	r2, r0
 800a760:	4680      	mov	r8, r0
 800a762:	4689      	mov	r9, r1
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f5 fd34 	bl	80001d4 <__adddf3>
 800a76c:	4b17      	ldr	r3, [pc, #92]	@ (800a7cc <__ieee754_pow+0x41c>)
 800a76e:	4299      	cmp	r1, r3
 800a770:	4604      	mov	r4, r0
 800a772:	460d      	mov	r5, r1
 800a774:	468a      	mov	sl, r1
 800a776:	468b      	mov	fp, r1
 800a778:	f340 82ef 	ble.w	800ad5a <__ieee754_pow+0x9aa>
 800a77c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800a780:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800a784:	4303      	orrs	r3, r0
 800a786:	f000 81e8 	beq.w	800ab5a <__ieee754_pow+0x7aa>
 800a78a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a78e:	2200      	movs	r2, #0
 800a790:	2300      	movs	r3, #0
 800a792:	f7f6 f947 	bl	8000a24 <__aeabi_dcmplt>
 800a796:	3800      	subs	r0, #0
 800a798:	bf18      	it	ne
 800a79a:	2001      	movne	r0, #1
 800a79c:	e710      	b.n	800a5c0 <__ieee754_pow+0x210>
 800a79e:	bf00      	nop
 800a7a0:	60000000 	.word	0x60000000
 800a7a4:	3ff71547 	.word	0x3ff71547
 800a7a8:	f85ddf44 	.word	0xf85ddf44
 800a7ac:	3e54ae0b 	.word	0x3e54ae0b
 800a7b0:	55555555 	.word	0x55555555
 800a7b4:	3fd55555 	.word	0x3fd55555
 800a7b8:	652b82fe 	.word	0x652b82fe
 800a7bc:	3ff71547 	.word	0x3ff71547
 800a7c0:	3ff00000 	.word	0x3ff00000
 800a7c4:	3fd00000 	.word	0x3fd00000
 800a7c8:	3fe00000 	.word	0x3fe00000
 800a7cc:	408fffff 	.word	0x408fffff
 800a7d0:	4bd5      	ldr	r3, [pc, #852]	@ (800ab28 <__ieee754_pow+0x778>)
 800a7d2:	402b      	ands	r3, r5
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	b92b      	cbnz	r3, 800a7e4 <__ieee754_pow+0x434>
 800a7d8:	4bd4      	ldr	r3, [pc, #848]	@ (800ab2c <__ieee754_pow+0x77c>)
 800a7da:	f7f5 feb1 	bl	8000540 <__aeabi_dmul>
 800a7de:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800a7e2:	468b      	mov	fp, r1
 800a7e4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800a7e8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a7ec:	4413      	add	r3, r2
 800a7ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800a7f0:	4bcf      	ldr	r3, [pc, #828]	@ (800ab30 <__ieee754_pow+0x780>)
 800a7f2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800a7f6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800a7fa:	459b      	cmp	fp, r3
 800a7fc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a800:	dd08      	ble.n	800a814 <__ieee754_pow+0x464>
 800a802:	4bcc      	ldr	r3, [pc, #816]	@ (800ab34 <__ieee754_pow+0x784>)
 800a804:	459b      	cmp	fp, r3
 800a806:	f340 81a5 	ble.w	800ab54 <__ieee754_pow+0x7a4>
 800a80a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a80c:	3301      	adds	r3, #1
 800a80e:	930a      	str	r3, [sp, #40]	@ 0x28
 800a810:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800a814:	f04f 0a00 	mov.w	sl, #0
 800a818:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800a81c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a81e:	4bc6      	ldr	r3, [pc, #792]	@ (800ab38 <__ieee754_pow+0x788>)
 800a820:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a824:	ed93 7b00 	vldr	d7, [r3]
 800a828:	4629      	mov	r1, r5
 800a82a:	ec53 2b17 	vmov	r2, r3, d7
 800a82e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a832:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a836:	f7f5 fccb 	bl	80001d0 <__aeabi_dsub>
 800a83a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a83e:	4606      	mov	r6, r0
 800a840:	460f      	mov	r7, r1
 800a842:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a846:	f7f5 fcc5 	bl	80001d4 <__adddf3>
 800a84a:	4602      	mov	r2, r0
 800a84c:	460b      	mov	r3, r1
 800a84e:	2000      	movs	r0, #0
 800a850:	49ba      	ldr	r1, [pc, #744]	@ (800ab3c <__ieee754_pow+0x78c>)
 800a852:	f7f5 ff9f 	bl	8000794 <__aeabi_ddiv>
 800a856:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800a85a:	4602      	mov	r2, r0
 800a85c:	460b      	mov	r3, r1
 800a85e:	4630      	mov	r0, r6
 800a860:	4639      	mov	r1, r7
 800a862:	f7f5 fe6d 	bl	8000540 <__aeabi_dmul>
 800a866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a86a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800a86e:	106d      	asrs	r5, r5, #1
 800a870:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800a874:	f04f 0b00 	mov.w	fp, #0
 800a878:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800a87c:	4661      	mov	r1, ip
 800a87e:	2200      	movs	r2, #0
 800a880:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800a884:	4658      	mov	r0, fp
 800a886:	46e1      	mov	r9, ip
 800a888:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800a88c:	4614      	mov	r4, r2
 800a88e:	461d      	mov	r5, r3
 800a890:	f7f5 fe56 	bl	8000540 <__aeabi_dmul>
 800a894:	4602      	mov	r2, r0
 800a896:	460b      	mov	r3, r1
 800a898:	4630      	mov	r0, r6
 800a89a:	4639      	mov	r1, r7
 800a89c:	f7f5 fc98 	bl	80001d0 <__aeabi_dsub>
 800a8a0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a8a4:	4606      	mov	r6, r0
 800a8a6:	460f      	mov	r7, r1
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	4629      	mov	r1, r5
 800a8ac:	f7f5 fc90 	bl	80001d0 <__aeabi_dsub>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a8b8:	f7f5 fc8a 	bl	80001d0 <__aeabi_dsub>
 800a8bc:	465a      	mov	r2, fp
 800a8be:	464b      	mov	r3, r9
 800a8c0:	f7f5 fe3e 	bl	8000540 <__aeabi_dmul>
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	4630      	mov	r0, r6
 800a8ca:	4639      	mov	r1, r7
 800a8cc:	f7f5 fc80 	bl	80001d0 <__aeabi_dsub>
 800a8d0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a8d4:	f7f5 fe34 	bl	8000540 <__aeabi_dmul>
 800a8d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	f7f5 fe2c 	bl	8000540 <__aeabi_dmul>
 800a8e8:	a37d      	add	r3, pc, #500	@ (adr r3, 800aae0 <__ieee754_pow+0x730>)
 800a8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ee:	4604      	mov	r4, r0
 800a8f0:	460d      	mov	r5, r1
 800a8f2:	f7f5 fe25 	bl	8000540 <__aeabi_dmul>
 800a8f6:	a37c      	add	r3, pc, #496	@ (adr r3, 800aae8 <__ieee754_pow+0x738>)
 800a8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8fc:	f7f5 fc6a 	bl	80001d4 <__adddf3>
 800a900:	4622      	mov	r2, r4
 800a902:	462b      	mov	r3, r5
 800a904:	f7f5 fe1c 	bl	8000540 <__aeabi_dmul>
 800a908:	a379      	add	r3, pc, #484	@ (adr r3, 800aaf0 <__ieee754_pow+0x740>)
 800a90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a90e:	f7f5 fc61 	bl	80001d4 <__adddf3>
 800a912:	4622      	mov	r2, r4
 800a914:	462b      	mov	r3, r5
 800a916:	f7f5 fe13 	bl	8000540 <__aeabi_dmul>
 800a91a:	a377      	add	r3, pc, #476	@ (adr r3, 800aaf8 <__ieee754_pow+0x748>)
 800a91c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a920:	f7f5 fc58 	bl	80001d4 <__adddf3>
 800a924:	4622      	mov	r2, r4
 800a926:	462b      	mov	r3, r5
 800a928:	f7f5 fe0a 	bl	8000540 <__aeabi_dmul>
 800a92c:	a374      	add	r3, pc, #464	@ (adr r3, 800ab00 <__ieee754_pow+0x750>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 fc4f 	bl	80001d4 <__adddf3>
 800a936:	4622      	mov	r2, r4
 800a938:	462b      	mov	r3, r5
 800a93a:	f7f5 fe01 	bl	8000540 <__aeabi_dmul>
 800a93e:	a372      	add	r3, pc, #456	@ (adr r3, 800ab08 <__ieee754_pow+0x758>)
 800a940:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a944:	f7f5 fc46 	bl	80001d4 <__adddf3>
 800a948:	4622      	mov	r2, r4
 800a94a:	4606      	mov	r6, r0
 800a94c:	460f      	mov	r7, r1
 800a94e:	462b      	mov	r3, r5
 800a950:	4620      	mov	r0, r4
 800a952:	4629      	mov	r1, r5
 800a954:	f7f5 fdf4 	bl	8000540 <__aeabi_dmul>
 800a958:	4602      	mov	r2, r0
 800a95a:	460b      	mov	r3, r1
 800a95c:	4630      	mov	r0, r6
 800a95e:	4639      	mov	r1, r7
 800a960:	f7f5 fdee 	bl	8000540 <__aeabi_dmul>
 800a964:	465a      	mov	r2, fp
 800a966:	4604      	mov	r4, r0
 800a968:	460d      	mov	r5, r1
 800a96a:	464b      	mov	r3, r9
 800a96c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a970:	f7f5 fc30 	bl	80001d4 <__adddf3>
 800a974:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a978:	f7f5 fde2 	bl	8000540 <__aeabi_dmul>
 800a97c:	4622      	mov	r2, r4
 800a97e:	462b      	mov	r3, r5
 800a980:	f7f5 fc28 	bl	80001d4 <__adddf3>
 800a984:	465a      	mov	r2, fp
 800a986:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a98a:	464b      	mov	r3, r9
 800a98c:	4658      	mov	r0, fp
 800a98e:	4649      	mov	r1, r9
 800a990:	f7f5 fdd6 	bl	8000540 <__aeabi_dmul>
 800a994:	4b6a      	ldr	r3, [pc, #424]	@ (800ab40 <__ieee754_pow+0x790>)
 800a996:	2200      	movs	r2, #0
 800a998:	4606      	mov	r6, r0
 800a99a:	460f      	mov	r7, r1
 800a99c:	f7f5 fc1a 	bl	80001d4 <__adddf3>
 800a9a0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a9a4:	f7f5 fc16 	bl	80001d4 <__adddf3>
 800a9a8:	46d8      	mov	r8, fp
 800a9aa:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	465a      	mov	r2, fp
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4640      	mov	r0, r8
 800a9b6:	4649      	mov	r1, r9
 800a9b8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800a9bc:	f7f5 fdc0 	bl	8000540 <__aeabi_dmul>
 800a9c0:	465c      	mov	r4, fp
 800a9c2:	4680      	mov	r8, r0
 800a9c4:	4689      	mov	r9, r1
 800a9c6:	4b5e      	ldr	r3, [pc, #376]	@ (800ab40 <__ieee754_pow+0x790>)
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	4629      	mov	r1, r5
 800a9ce:	f7f5 fbff 	bl	80001d0 <__aeabi_dsub>
 800a9d2:	4632      	mov	r2, r6
 800a9d4:	463b      	mov	r3, r7
 800a9d6:	f7f5 fbfb 	bl	80001d0 <__aeabi_dsub>
 800a9da:	4602      	mov	r2, r0
 800a9dc:	460b      	mov	r3, r1
 800a9de:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a9e2:	f7f5 fbf5 	bl	80001d0 <__aeabi_dsub>
 800a9e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a9ea:	f7f5 fda9 	bl	8000540 <__aeabi_dmul>
 800a9ee:	4622      	mov	r2, r4
 800a9f0:	4606      	mov	r6, r0
 800a9f2:	460f      	mov	r7, r1
 800a9f4:	462b      	mov	r3, r5
 800a9f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a9fa:	f7f5 fda1 	bl	8000540 <__aeabi_dmul>
 800a9fe:	4602      	mov	r2, r0
 800aa00:	460b      	mov	r3, r1
 800aa02:	4630      	mov	r0, r6
 800aa04:	4639      	mov	r1, r7
 800aa06:	f7f5 fbe5 	bl	80001d4 <__adddf3>
 800aa0a:	4606      	mov	r6, r0
 800aa0c:	460f      	mov	r7, r1
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	4640      	mov	r0, r8
 800aa14:	4649      	mov	r1, r9
 800aa16:	f7f5 fbdd 	bl	80001d4 <__adddf3>
 800aa1a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800aa1e:	a33c      	add	r3, pc, #240	@ (adr r3, 800ab10 <__ieee754_pow+0x760>)
 800aa20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa24:	4658      	mov	r0, fp
 800aa26:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800aa2a:	460d      	mov	r5, r1
 800aa2c:	f7f5 fd88 	bl	8000540 <__aeabi_dmul>
 800aa30:	465c      	mov	r4, fp
 800aa32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa36:	4642      	mov	r2, r8
 800aa38:	464b      	mov	r3, r9
 800aa3a:	4620      	mov	r0, r4
 800aa3c:	4629      	mov	r1, r5
 800aa3e:	f7f5 fbc7 	bl	80001d0 <__aeabi_dsub>
 800aa42:	4602      	mov	r2, r0
 800aa44:	460b      	mov	r3, r1
 800aa46:	4630      	mov	r0, r6
 800aa48:	4639      	mov	r1, r7
 800aa4a:	f7f5 fbc1 	bl	80001d0 <__aeabi_dsub>
 800aa4e:	a332      	add	r3, pc, #200	@ (adr r3, 800ab18 <__ieee754_pow+0x768>)
 800aa50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa54:	f7f5 fd74 	bl	8000540 <__aeabi_dmul>
 800aa58:	a331      	add	r3, pc, #196	@ (adr r3, 800ab20 <__ieee754_pow+0x770>)
 800aa5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	4620      	mov	r0, r4
 800aa64:	4629      	mov	r1, r5
 800aa66:	f7f5 fd6b 	bl	8000540 <__aeabi_dmul>
 800aa6a:	4602      	mov	r2, r0
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	4630      	mov	r0, r6
 800aa70:	4639      	mov	r1, r7
 800aa72:	f7f5 fbaf 	bl	80001d4 <__adddf3>
 800aa76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa78:	4b32      	ldr	r3, [pc, #200]	@ (800ab44 <__ieee754_pow+0x794>)
 800aa7a:	4413      	add	r3, r2
 800aa7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa80:	f7f5 fba8 	bl	80001d4 <__adddf3>
 800aa84:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800aa88:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800aa8a:	f7f5 fcef 	bl	800046c <__aeabi_i2d>
 800aa8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aa90:	4b2d      	ldr	r3, [pc, #180]	@ (800ab48 <__ieee754_pow+0x798>)
 800aa92:	4413      	add	r3, r2
 800aa94:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa98:	4606      	mov	r6, r0
 800aa9a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800aa9e:	460f      	mov	r7, r1
 800aaa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa4:	f7f5 fb96 	bl	80001d4 <__adddf3>
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	f7f5 fb92 	bl	80001d4 <__adddf3>
 800aab0:	4632      	mov	r2, r6
 800aab2:	463b      	mov	r3, r7
 800aab4:	f7f5 fb8e 	bl	80001d4 <__adddf3>
 800aab8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800aabc:	4632      	mov	r2, r6
 800aabe:	463b      	mov	r3, r7
 800aac0:	4658      	mov	r0, fp
 800aac2:	460d      	mov	r5, r1
 800aac4:	f7f5 fb84 	bl	80001d0 <__aeabi_dsub>
 800aac8:	4642      	mov	r2, r8
 800aaca:	464b      	mov	r3, r9
 800aacc:	f7f5 fb80 	bl	80001d0 <__aeabi_dsub>
 800aad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aad4:	f7f5 fb7c 	bl	80001d0 <__aeabi_dsub>
 800aad8:	465c      	mov	r4, fp
 800aada:	4602      	mov	r2, r0
 800aadc:	e036      	b.n	800ab4c <__ieee754_pow+0x79c>
 800aade:	bf00      	nop
 800aae0:	4a454eef 	.word	0x4a454eef
 800aae4:	3fca7e28 	.word	0x3fca7e28
 800aae8:	93c9db65 	.word	0x93c9db65
 800aaec:	3fcd864a 	.word	0x3fcd864a
 800aaf0:	a91d4101 	.word	0xa91d4101
 800aaf4:	3fd17460 	.word	0x3fd17460
 800aaf8:	518f264d 	.word	0x518f264d
 800aafc:	3fd55555 	.word	0x3fd55555
 800ab00:	db6fabff 	.word	0xdb6fabff
 800ab04:	3fdb6db6 	.word	0x3fdb6db6
 800ab08:	33333303 	.word	0x33333303
 800ab0c:	3fe33333 	.word	0x3fe33333
 800ab10:	e0000000 	.word	0xe0000000
 800ab14:	3feec709 	.word	0x3feec709
 800ab18:	dc3a03fd 	.word	0xdc3a03fd
 800ab1c:	3feec709 	.word	0x3feec709
 800ab20:	145b01f5 	.word	0x145b01f5
 800ab24:	be3e2fe0 	.word	0xbe3e2fe0
 800ab28:	7ff00000 	.word	0x7ff00000
 800ab2c:	43400000 	.word	0x43400000
 800ab30:	0003988e 	.word	0x0003988e
 800ab34:	000bb679 	.word	0x000bb679
 800ab38:	0800b770 	.word	0x0800b770
 800ab3c:	3ff00000 	.word	0x3ff00000
 800ab40:	40080000 	.word	0x40080000
 800ab44:	0800b750 	.word	0x0800b750
 800ab48:	0800b760 	.word	0x0800b760
 800ab4c:	460b      	mov	r3, r1
 800ab4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ab52:	e5d7      	b.n	800a704 <__ieee754_pow+0x354>
 800ab54:	f04f 0a01 	mov.w	sl, #1
 800ab58:	e65e      	b.n	800a818 <__ieee754_pow+0x468>
 800ab5a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800ae2c <__ieee754_pow+0xa7c>)
 800ab5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab60:	4630      	mov	r0, r6
 800ab62:	4639      	mov	r1, r7
 800ab64:	f7f5 fb36 	bl	80001d4 <__adddf3>
 800ab68:	4642      	mov	r2, r8
 800ab6a:	e9cd 0100 	strd	r0, r1, [sp]
 800ab6e:	464b      	mov	r3, r9
 800ab70:	4620      	mov	r0, r4
 800ab72:	4629      	mov	r1, r5
 800ab74:	f7f5 fb2c 	bl	80001d0 <__aeabi_dsub>
 800ab78:	4602      	mov	r2, r0
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ab80:	f7f5 ff6e 	bl	8000a60 <__aeabi_dcmpgt>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	f47f ae00 	bne.w	800a78a <__ieee754_pow+0x3da>
 800ab8a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ab8e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ab92:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ab96:	fa43 fa0a 	asr.w	sl, r3, sl
 800ab9a:	44da      	add	sl, fp
 800ab9c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800aba0:	489d      	ldr	r0, [pc, #628]	@ (800ae18 <__ieee754_pow+0xa68>)
 800aba2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800aba6:	4108      	asrs	r0, r1
 800aba8:	ea00 030a 	and.w	r3, r0, sl
 800abac:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800abb0:	f1c1 0114 	rsb	r1, r1, #20
 800abb4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800abb8:	fa4a fa01 	asr.w	sl, sl, r1
 800abbc:	f1bb 0f00 	cmp.w	fp, #0
 800abc0:	4640      	mov	r0, r8
 800abc2:	4649      	mov	r1, r9
 800abc4:	f04f 0200 	mov.w	r2, #0
 800abc8:	bfb8      	it	lt
 800abca:	f1ca 0a00 	rsblt	sl, sl, #0
 800abce:	f7f5 faff 	bl	80001d0 <__aeabi_dsub>
 800abd2:	4680      	mov	r8, r0
 800abd4:	4689      	mov	r9, r1
 800abd6:	4632      	mov	r2, r6
 800abd8:	463b      	mov	r3, r7
 800abda:	4640      	mov	r0, r8
 800abdc:	4649      	mov	r1, r9
 800abde:	f7f5 faf9 	bl	80001d4 <__adddf3>
 800abe2:	2400      	movs	r4, #0
 800abe4:	a37c      	add	r3, pc, #496	@ (adr r3, 800add8 <__ieee754_pow+0xa28>)
 800abe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abea:	4620      	mov	r0, r4
 800abec:	460d      	mov	r5, r1
 800abee:	f7f5 fca7 	bl	8000540 <__aeabi_dmul>
 800abf2:	4642      	mov	r2, r8
 800abf4:	e9cd 0100 	strd	r0, r1, [sp]
 800abf8:	464b      	mov	r3, r9
 800abfa:	4620      	mov	r0, r4
 800abfc:	4629      	mov	r1, r5
 800abfe:	f7f5 fae7 	bl	80001d0 <__aeabi_dsub>
 800ac02:	4602      	mov	r2, r0
 800ac04:	460b      	mov	r3, r1
 800ac06:	4630      	mov	r0, r6
 800ac08:	4639      	mov	r1, r7
 800ac0a:	f7f5 fae1 	bl	80001d0 <__aeabi_dsub>
 800ac0e:	a374      	add	r3, pc, #464	@ (adr r3, 800ade0 <__ieee754_pow+0xa30>)
 800ac10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac14:	f7f5 fc94 	bl	8000540 <__aeabi_dmul>
 800ac18:	a373      	add	r3, pc, #460	@ (adr r3, 800ade8 <__ieee754_pow+0xa38>)
 800ac1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1e:	4680      	mov	r8, r0
 800ac20:	4689      	mov	r9, r1
 800ac22:	4620      	mov	r0, r4
 800ac24:	4629      	mov	r1, r5
 800ac26:	f7f5 fc8b 	bl	8000540 <__aeabi_dmul>
 800ac2a:	4602      	mov	r2, r0
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	4640      	mov	r0, r8
 800ac30:	4649      	mov	r1, r9
 800ac32:	f7f5 facf 	bl	80001d4 <__adddf3>
 800ac36:	4604      	mov	r4, r0
 800ac38:	460d      	mov	r5, r1
 800ac3a:	4602      	mov	r2, r0
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ac42:	f7f5 fac7 	bl	80001d4 <__adddf3>
 800ac46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ac4a:	4680      	mov	r8, r0
 800ac4c:	4689      	mov	r9, r1
 800ac4e:	f7f5 fabf 	bl	80001d0 <__aeabi_dsub>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4620      	mov	r0, r4
 800ac58:	4629      	mov	r1, r5
 800ac5a:	f7f5 fab9 	bl	80001d0 <__aeabi_dsub>
 800ac5e:	4642      	mov	r2, r8
 800ac60:	4606      	mov	r6, r0
 800ac62:	460f      	mov	r7, r1
 800ac64:	464b      	mov	r3, r9
 800ac66:	4640      	mov	r0, r8
 800ac68:	4649      	mov	r1, r9
 800ac6a:	f7f5 fc69 	bl	8000540 <__aeabi_dmul>
 800ac6e:	a360      	add	r3, pc, #384	@ (adr r3, 800adf0 <__ieee754_pow+0xa40>)
 800ac70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac74:	4604      	mov	r4, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	f7f5 fc62 	bl	8000540 <__aeabi_dmul>
 800ac7c:	a35e      	add	r3, pc, #376	@ (adr r3, 800adf8 <__ieee754_pow+0xa48>)
 800ac7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac82:	f7f5 faa5 	bl	80001d0 <__aeabi_dsub>
 800ac86:	4622      	mov	r2, r4
 800ac88:	462b      	mov	r3, r5
 800ac8a:	f7f5 fc59 	bl	8000540 <__aeabi_dmul>
 800ac8e:	a35c      	add	r3, pc, #368	@ (adr r3, 800ae00 <__ieee754_pow+0xa50>)
 800ac90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac94:	f7f5 fa9e 	bl	80001d4 <__adddf3>
 800ac98:	4622      	mov	r2, r4
 800ac9a:	462b      	mov	r3, r5
 800ac9c:	f7f5 fc50 	bl	8000540 <__aeabi_dmul>
 800aca0:	a359      	add	r3, pc, #356	@ (adr r3, 800ae08 <__ieee754_pow+0xa58>)
 800aca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca6:	f7f5 fa93 	bl	80001d0 <__aeabi_dsub>
 800acaa:	4622      	mov	r2, r4
 800acac:	462b      	mov	r3, r5
 800acae:	f7f5 fc47 	bl	8000540 <__aeabi_dmul>
 800acb2:	a357      	add	r3, pc, #348	@ (adr r3, 800ae10 <__ieee754_pow+0xa60>)
 800acb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb8:	f7f5 fa8c 	bl	80001d4 <__adddf3>
 800acbc:	4622      	mov	r2, r4
 800acbe:	462b      	mov	r3, r5
 800acc0:	f7f5 fc3e 	bl	8000540 <__aeabi_dmul>
 800acc4:	4602      	mov	r2, r0
 800acc6:	460b      	mov	r3, r1
 800acc8:	4640      	mov	r0, r8
 800acca:	4649      	mov	r1, r9
 800accc:	f7f5 fa80 	bl	80001d0 <__aeabi_dsub>
 800acd0:	4604      	mov	r4, r0
 800acd2:	460d      	mov	r5, r1
 800acd4:	4602      	mov	r2, r0
 800acd6:	460b      	mov	r3, r1
 800acd8:	4640      	mov	r0, r8
 800acda:	4649      	mov	r1, r9
 800acdc:	f7f5 fc30 	bl	8000540 <__aeabi_dmul>
 800ace0:	2200      	movs	r2, #0
 800ace2:	e9cd 0100 	strd	r0, r1, [sp]
 800ace6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800acea:	4620      	mov	r0, r4
 800acec:	4629      	mov	r1, r5
 800acee:	f7f5 fa6f 	bl	80001d0 <__aeabi_dsub>
 800acf2:	4602      	mov	r2, r0
 800acf4:	460b      	mov	r3, r1
 800acf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800acfa:	f7f5 fd4b 	bl	8000794 <__aeabi_ddiv>
 800acfe:	4632      	mov	r2, r6
 800ad00:	4604      	mov	r4, r0
 800ad02:	460d      	mov	r5, r1
 800ad04:	463b      	mov	r3, r7
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fc19 	bl	8000540 <__aeabi_dmul>
 800ad0e:	4632      	mov	r2, r6
 800ad10:	463b      	mov	r3, r7
 800ad12:	f7f5 fa5f 	bl	80001d4 <__adddf3>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	4620      	mov	r0, r4
 800ad1c:	4629      	mov	r1, r5
 800ad1e:	f7f5 fa57 	bl	80001d0 <__aeabi_dsub>
 800ad22:	4642      	mov	r2, r8
 800ad24:	464b      	mov	r3, r9
 800ad26:	f7f5 fa53 	bl	80001d0 <__aeabi_dsub>
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4602      	mov	r2, r0
 800ad2e:	493b      	ldr	r1, [pc, #236]	@ (800ae1c <__ieee754_pow+0xa6c>)
 800ad30:	2000      	movs	r0, #0
 800ad32:	f7f5 fa4d 	bl	80001d0 <__aeabi_dsub>
 800ad36:	ec41 0b10 	vmov	d0, r0, r1
 800ad3a:	ee10 3a90 	vmov	r3, s1
 800ad3e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800ad42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad46:	da30      	bge.n	800adaa <__ieee754_pow+0x9fa>
 800ad48:	4650      	mov	r0, sl
 800ad4a:	f000 fb4d 	bl	800b3e8 <scalbn>
 800ad4e:	ec51 0b10 	vmov	r0, r1, d0
 800ad52:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad56:	f7ff bbd2 	b.w	800a4fe <__ieee754_pow+0x14e>
 800ad5a:	4c31      	ldr	r4, [pc, #196]	@ (800ae20 <__ieee754_pow+0xa70>)
 800ad5c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ad60:	42a3      	cmp	r3, r4
 800ad62:	d91a      	bls.n	800ad9a <__ieee754_pow+0x9ea>
 800ad64:	4b2f      	ldr	r3, [pc, #188]	@ (800ae24 <__ieee754_pow+0xa74>)
 800ad66:	440b      	add	r3, r1
 800ad68:	4303      	orrs	r3, r0
 800ad6a:	d009      	beq.n	800ad80 <__ieee754_pow+0x9d0>
 800ad6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad70:	2200      	movs	r2, #0
 800ad72:	2300      	movs	r3, #0
 800ad74:	f7f5 fe56 	bl	8000a24 <__aeabi_dcmplt>
 800ad78:	3800      	subs	r0, #0
 800ad7a:	bf18      	it	ne
 800ad7c:	2001      	movne	r0, #1
 800ad7e:	e42b      	b.n	800a5d8 <__ieee754_pow+0x228>
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	f7f5 fa24 	bl	80001d0 <__aeabi_dsub>
 800ad88:	4632      	mov	r2, r6
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	f7f5 fe5e 	bl	8000a4c <__aeabi_dcmpge>
 800ad90:	2800      	cmp	r0, #0
 800ad92:	d1eb      	bne.n	800ad6c <__ieee754_pow+0x9bc>
 800ad94:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800ae34 <__ieee754_pow+0xa84>
 800ad98:	e6f7      	b.n	800ab8a <__ieee754_pow+0x7da>
 800ad9a:	469a      	mov	sl, r3
 800ad9c:	4b22      	ldr	r3, [pc, #136]	@ (800ae28 <__ieee754_pow+0xa78>)
 800ad9e:	459a      	cmp	sl, r3
 800ada0:	f63f aef3 	bhi.w	800ab8a <__ieee754_pow+0x7da>
 800ada4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800ada8:	e715      	b.n	800abd6 <__ieee754_pow+0x826>
 800adaa:	ec51 0b10 	vmov	r0, r1, d0
 800adae:	4619      	mov	r1, r3
 800adb0:	e7cf      	b.n	800ad52 <__ieee754_pow+0x9a2>
 800adb2:	491a      	ldr	r1, [pc, #104]	@ (800ae1c <__ieee754_pow+0xa6c>)
 800adb4:	2000      	movs	r0, #0
 800adb6:	f7ff bb18 	b.w	800a3ea <__ieee754_pow+0x3a>
 800adba:	2000      	movs	r0, #0
 800adbc:	2100      	movs	r1, #0
 800adbe:	f7ff bb14 	b.w	800a3ea <__ieee754_pow+0x3a>
 800adc2:	4630      	mov	r0, r6
 800adc4:	4639      	mov	r1, r7
 800adc6:	f7ff bb10 	b.w	800a3ea <__ieee754_pow+0x3a>
 800adca:	460c      	mov	r4, r1
 800adcc:	f7ff bb5e 	b.w	800a48c <__ieee754_pow+0xdc>
 800add0:	2400      	movs	r4, #0
 800add2:	f7ff bb49 	b.w	800a468 <__ieee754_pow+0xb8>
 800add6:	bf00      	nop
 800add8:	00000000 	.word	0x00000000
 800addc:	3fe62e43 	.word	0x3fe62e43
 800ade0:	fefa39ef 	.word	0xfefa39ef
 800ade4:	3fe62e42 	.word	0x3fe62e42
 800ade8:	0ca86c39 	.word	0x0ca86c39
 800adec:	be205c61 	.word	0xbe205c61
 800adf0:	72bea4d0 	.word	0x72bea4d0
 800adf4:	3e663769 	.word	0x3e663769
 800adf8:	c5d26bf1 	.word	0xc5d26bf1
 800adfc:	3ebbbd41 	.word	0x3ebbbd41
 800ae00:	af25de2c 	.word	0xaf25de2c
 800ae04:	3f11566a 	.word	0x3f11566a
 800ae08:	16bebd93 	.word	0x16bebd93
 800ae0c:	3f66c16c 	.word	0x3f66c16c
 800ae10:	5555553e 	.word	0x5555553e
 800ae14:	3fc55555 	.word	0x3fc55555
 800ae18:	fff00000 	.word	0xfff00000
 800ae1c:	3ff00000 	.word	0x3ff00000
 800ae20:	4090cbff 	.word	0x4090cbff
 800ae24:	3f6f3400 	.word	0x3f6f3400
 800ae28:	3fe00000 	.word	0x3fe00000
 800ae2c:	652b82fe 	.word	0x652b82fe
 800ae30:	3c971547 	.word	0x3c971547
 800ae34:	4090cc00 	.word	0x4090cc00

0800ae38 <__ieee754_powf>:
 800ae38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae3c:	ee10 4a90 	vmov	r4, s1
 800ae40:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800ae44:	ed2d 8b02 	vpush	{d8}
 800ae48:	ee10 6a10 	vmov	r6, s0
 800ae4c:	eeb0 8a40 	vmov.f32	s16, s0
 800ae50:	eef0 8a60 	vmov.f32	s17, s1
 800ae54:	d10c      	bne.n	800ae70 <__ieee754_powf+0x38>
 800ae56:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800ae5a:	0076      	lsls	r6, r6, #1
 800ae5c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800ae60:	f240 829c 	bls.w	800b39c <__ieee754_powf+0x564>
 800ae64:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ae68:	ecbd 8b02 	vpop	{d8}
 800ae6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae70:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800ae74:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800ae78:	d802      	bhi.n	800ae80 <__ieee754_powf+0x48>
 800ae7a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800ae7e:	d908      	bls.n	800ae92 <__ieee754_powf+0x5a>
 800ae80:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800ae84:	d1ee      	bne.n	800ae64 <__ieee754_powf+0x2c>
 800ae86:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800ae8a:	0064      	lsls	r4, r4, #1
 800ae8c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800ae90:	e7e6      	b.n	800ae60 <__ieee754_powf+0x28>
 800ae92:	2e00      	cmp	r6, #0
 800ae94:	da1e      	bge.n	800aed4 <__ieee754_powf+0x9c>
 800ae96:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800ae9a:	d22b      	bcs.n	800aef4 <__ieee754_powf+0xbc>
 800ae9c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800aea0:	d332      	bcc.n	800af08 <__ieee754_powf+0xd0>
 800aea2:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800aea6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800aeaa:	fa49 f503 	asr.w	r5, r9, r3
 800aeae:	fa05 f303 	lsl.w	r3, r5, r3
 800aeb2:	454b      	cmp	r3, r9
 800aeb4:	d126      	bne.n	800af04 <__ieee754_powf+0xcc>
 800aeb6:	f005 0501 	and.w	r5, r5, #1
 800aeba:	f1c5 0502 	rsb	r5, r5, #2
 800aebe:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800aec2:	d122      	bne.n	800af0a <__ieee754_powf+0xd2>
 800aec4:	2c00      	cmp	r4, #0
 800aec6:	f280 826f 	bge.w	800b3a8 <__ieee754_powf+0x570>
 800aeca:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800aece:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aed2:	e7c9      	b.n	800ae68 <__ieee754_powf+0x30>
 800aed4:	2500      	movs	r5, #0
 800aed6:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800aeda:	d1f0      	bne.n	800aebe <__ieee754_powf+0x86>
 800aedc:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800aee0:	f000 825c 	beq.w	800b39c <__ieee754_powf+0x564>
 800aee4:	d908      	bls.n	800aef8 <__ieee754_powf+0xc0>
 800aee6:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800b248 <__ieee754_powf+0x410>
 800aeea:	2c00      	cmp	r4, #0
 800aeec:	bfa8      	it	ge
 800aeee:	eeb0 0a68 	vmovge.f32	s0, s17
 800aef2:	e7b9      	b.n	800ae68 <__ieee754_powf+0x30>
 800aef4:	2502      	movs	r5, #2
 800aef6:	e7ee      	b.n	800aed6 <__ieee754_powf+0x9e>
 800aef8:	2c00      	cmp	r4, #0
 800aefa:	f280 8252 	bge.w	800b3a2 <__ieee754_powf+0x56a>
 800aefe:	eeb1 0a68 	vneg.f32	s0, s17
 800af02:	e7b1      	b.n	800ae68 <__ieee754_powf+0x30>
 800af04:	2500      	movs	r5, #0
 800af06:	e7da      	b.n	800aebe <__ieee754_powf+0x86>
 800af08:	2500      	movs	r5, #0
 800af0a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800af0e:	d102      	bne.n	800af16 <__ieee754_powf+0xde>
 800af10:	ee28 0a08 	vmul.f32	s0, s16, s16
 800af14:	e7a8      	b.n	800ae68 <__ieee754_powf+0x30>
 800af16:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800af1a:	d109      	bne.n	800af30 <__ieee754_powf+0xf8>
 800af1c:	2e00      	cmp	r6, #0
 800af1e:	db07      	blt.n	800af30 <__ieee754_powf+0xf8>
 800af20:	eeb0 0a48 	vmov.f32	s0, s16
 800af24:	ecbd 8b02 	vpop	{d8}
 800af28:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af2c:	f000 bba4 	b.w	800b678 <__ieee754_sqrtf>
 800af30:	eeb0 0a48 	vmov.f32	s0, s16
 800af34:	f000 fa50 	bl	800b3d8 <fabsf>
 800af38:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800af3c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800af40:	4647      	mov	r7, r8
 800af42:	d002      	beq.n	800af4a <__ieee754_powf+0x112>
 800af44:	f1b8 0f00 	cmp.w	r8, #0
 800af48:	d117      	bne.n	800af7a <__ieee754_powf+0x142>
 800af4a:	2c00      	cmp	r4, #0
 800af4c:	bfbc      	itt	lt
 800af4e:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800af52:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800af56:	2e00      	cmp	r6, #0
 800af58:	da86      	bge.n	800ae68 <__ieee754_powf+0x30>
 800af5a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800af5e:	ea58 0805 	orrs.w	r8, r8, r5
 800af62:	d104      	bne.n	800af6e <__ieee754_powf+0x136>
 800af64:	ee70 7a40 	vsub.f32	s15, s0, s0
 800af68:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800af6c:	e77c      	b.n	800ae68 <__ieee754_powf+0x30>
 800af6e:	2d01      	cmp	r5, #1
 800af70:	f47f af7a 	bne.w	800ae68 <__ieee754_powf+0x30>
 800af74:	eeb1 0a40 	vneg.f32	s0, s0
 800af78:	e776      	b.n	800ae68 <__ieee754_powf+0x30>
 800af7a:	0ff0      	lsrs	r0, r6, #31
 800af7c:	3801      	subs	r0, #1
 800af7e:	ea55 0300 	orrs.w	r3, r5, r0
 800af82:	d104      	bne.n	800af8e <__ieee754_powf+0x156>
 800af84:	ee38 8a48 	vsub.f32	s16, s16, s16
 800af88:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800af8c:	e76c      	b.n	800ae68 <__ieee754_powf+0x30>
 800af8e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800af92:	d973      	bls.n	800b07c <__ieee754_powf+0x244>
 800af94:	4bad      	ldr	r3, [pc, #692]	@ (800b24c <__ieee754_powf+0x414>)
 800af96:	4598      	cmp	r8, r3
 800af98:	d808      	bhi.n	800afac <__ieee754_powf+0x174>
 800af9a:	2c00      	cmp	r4, #0
 800af9c:	da0b      	bge.n	800afb6 <__ieee754_powf+0x17e>
 800af9e:	2000      	movs	r0, #0
 800afa0:	ecbd 8b02 	vpop	{d8}
 800afa4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afa8:	f000 bb60 	b.w	800b66c <__math_oflowf>
 800afac:	4ba8      	ldr	r3, [pc, #672]	@ (800b250 <__ieee754_powf+0x418>)
 800afae:	4598      	cmp	r8, r3
 800afb0:	d908      	bls.n	800afc4 <__ieee754_powf+0x18c>
 800afb2:	2c00      	cmp	r4, #0
 800afb4:	dcf3      	bgt.n	800af9e <__ieee754_powf+0x166>
 800afb6:	2000      	movs	r0, #0
 800afb8:	ecbd 8b02 	vpop	{d8}
 800afbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afc0:	f000 bb4e 	b.w	800b660 <__math_uflowf>
 800afc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800afc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800afcc:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800b254 <__ieee754_powf+0x41c>
 800afd0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800afd4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800afd8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800afdc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800afe0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800afe4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800afe8:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800b258 <__ieee754_powf+0x420>
 800afec:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800aff0:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800b25c <__ieee754_powf+0x424>
 800aff4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800aff8:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800b260 <__ieee754_powf+0x428>
 800affc:	eef0 6a67 	vmov.f32	s13, s15
 800b000:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b004:	ee16 3a90 	vmov	r3, s13
 800b008:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b00c:	f023 030f 	bic.w	r3, r3, #15
 800b010:	ee06 3a90 	vmov	s13, r3
 800b014:	eee0 6a47 	vfms.f32	s13, s0, s14
 800b018:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b01c:	3d01      	subs	r5, #1
 800b01e:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800b022:	4305      	orrs	r5, r0
 800b024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b028:	f024 040f 	bic.w	r4, r4, #15
 800b02c:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800b030:	bf18      	it	ne
 800b032:	eeb0 8a47 	vmovne.f32	s16, s14
 800b036:	ee07 4a10 	vmov	s14, r4
 800b03a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b03e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b042:	ee07 3a90 	vmov	s15, r3
 800b046:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b04a:	ee07 4a10 	vmov	s14, r4
 800b04e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b052:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b056:	ee17 1a10 	vmov	r1, s14
 800b05a:	2900      	cmp	r1, #0
 800b05c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b060:	f340 80dd 	ble.w	800b21e <__ieee754_powf+0x3e6>
 800b064:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800b068:	f240 80ca 	bls.w	800b200 <__ieee754_powf+0x3c8>
 800b06c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b074:	bf4c      	ite	mi
 800b076:	2001      	movmi	r0, #1
 800b078:	2000      	movpl	r0, #0
 800b07a:	e791      	b.n	800afa0 <__ieee754_powf+0x168>
 800b07c:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800b080:	bf01      	itttt	eq
 800b082:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800b264 <__ieee754_powf+0x42c>
 800b086:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b08a:	f06f 0317 	mvneq.w	r3, #23
 800b08e:	ee17 7a90 	vmoveq	r7, s15
 800b092:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800b096:	bf18      	it	ne
 800b098:	2300      	movne	r3, #0
 800b09a:	3a7f      	subs	r2, #127	@ 0x7f
 800b09c:	441a      	add	r2, r3
 800b09e:	4b72      	ldr	r3, [pc, #456]	@ (800b268 <__ieee754_powf+0x430>)
 800b0a0:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800b0a4:	429f      	cmp	r7, r3
 800b0a6:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800b0aa:	dd06      	ble.n	800b0ba <__ieee754_powf+0x282>
 800b0ac:	4b6f      	ldr	r3, [pc, #444]	@ (800b26c <__ieee754_powf+0x434>)
 800b0ae:	429f      	cmp	r7, r3
 800b0b0:	f340 80a4 	ble.w	800b1fc <__ieee754_powf+0x3c4>
 800b0b4:	3201      	adds	r2, #1
 800b0b6:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800b0ba:	2600      	movs	r6, #0
 800b0bc:	4b6c      	ldr	r3, [pc, #432]	@ (800b270 <__ieee754_powf+0x438>)
 800b0be:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800b0c2:	ee07 1a10 	vmov	s14, r1
 800b0c6:	edd3 5a00 	vldr	s11, [r3]
 800b0ca:	4b6a      	ldr	r3, [pc, #424]	@ (800b274 <__ieee754_powf+0x43c>)
 800b0cc:	ee75 7a87 	vadd.f32	s15, s11, s14
 800b0d0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0d4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800b0d8:	1049      	asrs	r1, r1, #1
 800b0da:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800b0de:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800b0e2:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800b0e6:	ee37 6a65 	vsub.f32	s12, s14, s11
 800b0ea:	ee07 1a90 	vmov	s15, r1
 800b0ee:	ee26 5a24 	vmul.f32	s10, s12, s9
 800b0f2:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800b0f6:	ee15 7a10 	vmov	r7, s10
 800b0fa:	401f      	ands	r7, r3
 800b0fc:	ee06 7a90 	vmov	s13, r7
 800b100:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800b104:	ee37 7a65 	vsub.f32	s14, s14, s11
 800b108:	ee65 7a05 	vmul.f32	s15, s10, s10
 800b10c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800b110:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800b278 <__ieee754_powf+0x440>
 800b114:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800b27c <__ieee754_powf+0x444>
 800b118:	eee7 5a87 	vfma.f32	s11, s15, s14
 800b11c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800b280 <__ieee754_powf+0x448>
 800b120:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b124:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800b254 <__ieee754_powf+0x41c>
 800b128:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b12c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800b284 <__ieee754_powf+0x44c>
 800b130:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b134:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800b288 <__ieee754_powf+0x450>
 800b138:	ee26 6a24 	vmul.f32	s12, s12, s9
 800b13c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800b140:	ee35 7a26 	vadd.f32	s14, s10, s13
 800b144:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b148:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b14c:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800b150:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800b154:	eef0 5a67 	vmov.f32	s11, s15
 800b158:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800b15c:	ee75 5a87 	vadd.f32	s11, s11, s14
 800b160:	ee15 1a90 	vmov	r1, s11
 800b164:	4019      	ands	r1, r3
 800b166:	ee05 1a90 	vmov	s11, r1
 800b16a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800b16e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800b172:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b176:	ee67 7a85 	vmul.f32	s15, s15, s10
 800b17a:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b17e:	eeb0 6a67 	vmov.f32	s12, s15
 800b182:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800b186:	ee16 1a10 	vmov	r1, s12
 800b18a:	4019      	ands	r1, r3
 800b18c:	ee06 1a10 	vmov	s12, r1
 800b190:	eeb0 7a46 	vmov.f32	s14, s12
 800b194:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800b198:	493c      	ldr	r1, [pc, #240]	@ (800b28c <__ieee754_powf+0x454>)
 800b19a:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800b19e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1a2:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800b290 <__ieee754_powf+0x458>
 800b1a6:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800b294 <__ieee754_powf+0x45c>
 800b1aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b1ae:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800b298 <__ieee754_powf+0x460>
 800b1b2:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b1b6:	ed91 7a00 	vldr	s14, [r1]
 800b1ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b1be:	ee07 2a10 	vmov	s14, r2
 800b1c2:	eef0 6a67 	vmov.f32	s13, s15
 800b1c6:	4a35      	ldr	r2, [pc, #212]	@ (800b29c <__ieee754_powf+0x464>)
 800b1c8:	eee6 6a25 	vfma.f32	s13, s12, s11
 800b1cc:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800b1d0:	ed92 5a00 	vldr	s10, [r2]
 800b1d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b1d8:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b1dc:	ee76 6a87 	vadd.f32	s13, s13, s14
 800b1e0:	ee16 2a90 	vmov	r2, s13
 800b1e4:	4013      	ands	r3, r2
 800b1e6:	ee06 3a90 	vmov	s13, r3
 800b1ea:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b1ee:	ee37 7a45 	vsub.f32	s14, s14, s10
 800b1f2:	eea6 7a65 	vfms.f32	s14, s12, s11
 800b1f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b1fa:	e70f      	b.n	800b01c <__ieee754_powf+0x1e4>
 800b1fc:	2601      	movs	r6, #1
 800b1fe:	e75d      	b.n	800b0bc <__ieee754_powf+0x284>
 800b200:	d152      	bne.n	800b2a8 <__ieee754_powf+0x470>
 800b202:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800b2a0 <__ieee754_powf+0x468>
 800b206:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b20a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b20e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b216:	f73f af29 	bgt.w	800b06c <__ieee754_powf+0x234>
 800b21a:	2386      	movs	r3, #134	@ 0x86
 800b21c:	e048      	b.n	800b2b0 <__ieee754_powf+0x478>
 800b21e:	4a21      	ldr	r2, [pc, #132]	@ (800b2a4 <__ieee754_powf+0x46c>)
 800b220:	4293      	cmp	r3, r2
 800b222:	d907      	bls.n	800b234 <__ieee754_powf+0x3fc>
 800b224:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b22c:	bf4c      	ite	mi
 800b22e:	2001      	movmi	r0, #1
 800b230:	2000      	movpl	r0, #0
 800b232:	e6c1      	b.n	800afb8 <__ieee754_powf+0x180>
 800b234:	d138      	bne.n	800b2a8 <__ieee754_powf+0x470>
 800b236:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b23a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b23e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b242:	dbea      	blt.n	800b21a <__ieee754_powf+0x3e2>
 800b244:	e7ee      	b.n	800b224 <__ieee754_powf+0x3ec>
 800b246:	bf00      	nop
 800b248:	00000000 	.word	0x00000000
 800b24c:	3f7ffff3 	.word	0x3f7ffff3
 800b250:	3f800007 	.word	0x3f800007
 800b254:	3eaaaaab 	.word	0x3eaaaaab
 800b258:	3fb8aa3b 	.word	0x3fb8aa3b
 800b25c:	36eca570 	.word	0x36eca570
 800b260:	3fb8aa00 	.word	0x3fb8aa00
 800b264:	4b800000 	.word	0x4b800000
 800b268:	001cc471 	.word	0x001cc471
 800b26c:	005db3d6 	.word	0x005db3d6
 800b270:	0800b790 	.word	0x0800b790
 800b274:	fffff000 	.word	0xfffff000
 800b278:	3e6c3255 	.word	0x3e6c3255
 800b27c:	3e53f142 	.word	0x3e53f142
 800b280:	3e8ba305 	.word	0x3e8ba305
 800b284:	3edb6db7 	.word	0x3edb6db7
 800b288:	3f19999a 	.word	0x3f19999a
 800b28c:	0800b780 	.word	0x0800b780
 800b290:	3f76384f 	.word	0x3f76384f
 800b294:	3f763800 	.word	0x3f763800
 800b298:	369dc3a0 	.word	0x369dc3a0
 800b29c:	0800b788 	.word	0x0800b788
 800b2a0:	3338aa3c 	.word	0x3338aa3c
 800b2a4:	43160000 	.word	0x43160000
 800b2a8:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800b2ac:	d971      	bls.n	800b392 <__ieee754_powf+0x55a>
 800b2ae:	15db      	asrs	r3, r3, #23
 800b2b0:	3b7e      	subs	r3, #126	@ 0x7e
 800b2b2:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800b2b6:	4118      	asrs	r0, r3
 800b2b8:	4408      	add	r0, r1
 800b2ba:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b2be:	4a3c      	ldr	r2, [pc, #240]	@ (800b3b0 <__ieee754_powf+0x578>)
 800b2c0:	3b7f      	subs	r3, #127	@ 0x7f
 800b2c2:	411a      	asrs	r2, r3
 800b2c4:	4002      	ands	r2, r0
 800b2c6:	ee07 2a10 	vmov	s14, r2
 800b2ca:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800b2ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800b2d2:	f1c3 0317 	rsb	r3, r3, #23
 800b2d6:	4118      	asrs	r0, r3
 800b2d8:	2900      	cmp	r1, #0
 800b2da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b2de:	bfb8      	it	lt
 800b2e0:	4240      	neglt	r0, r0
 800b2e2:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b2e6:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800b3b4 <__ieee754_powf+0x57c>
 800b2ea:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800b3b8 <__ieee754_powf+0x580>
 800b2ee:	ee17 3a10 	vmov	r3, s14
 800b2f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800b2f6:	f023 030f 	bic.w	r3, r3, #15
 800b2fa:	ee07 3a10 	vmov	s14, r3
 800b2fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b302:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b306:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b30a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800b3bc <__ieee754_powf+0x584>
 800b30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b312:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800b316:	eef0 6a67 	vmov.f32	s13, s15
 800b31a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b31e:	eef0 5a66 	vmov.f32	s11, s13
 800b322:	eee7 5a46 	vfms.f32	s11, s14, s12
 800b326:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800b32a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b32e:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800b3c0 <__ieee754_powf+0x588>
 800b332:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800b3c4 <__ieee754_powf+0x58c>
 800b336:	eea7 6a25 	vfma.f32	s12, s14, s11
 800b33a:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800b3c8 <__ieee754_powf+0x590>
 800b33e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b342:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800b3cc <__ieee754_powf+0x594>
 800b346:	eea5 6a87 	vfma.f32	s12, s11, s14
 800b34a:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800b3d0 <__ieee754_powf+0x598>
 800b34e:	eee6 5a07 	vfma.f32	s11, s12, s14
 800b352:	eeb0 6a66 	vmov.f32	s12, s13
 800b356:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800b35a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800b35e:	ee66 5a86 	vmul.f32	s11, s13, s12
 800b362:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b366:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800b36a:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800b36e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b372:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b376:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b37a:	ee10 3a10 	vmov	r3, s0
 800b37e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b382:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b386:	da06      	bge.n	800b396 <__ieee754_powf+0x55e>
 800b388:	f000 f8ea 	bl	800b560 <scalbnf>
 800b38c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b390:	e56a      	b.n	800ae68 <__ieee754_powf+0x30>
 800b392:	2000      	movs	r0, #0
 800b394:	e7a5      	b.n	800b2e2 <__ieee754_powf+0x4aa>
 800b396:	ee00 3a10 	vmov	s0, r3
 800b39a:	e7f7      	b.n	800b38c <__ieee754_powf+0x554>
 800b39c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b3a0:	e562      	b.n	800ae68 <__ieee754_powf+0x30>
 800b3a2:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800b3d4 <__ieee754_powf+0x59c>
 800b3a6:	e55f      	b.n	800ae68 <__ieee754_powf+0x30>
 800b3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800b3ac:	e55c      	b.n	800ae68 <__ieee754_powf+0x30>
 800b3ae:	bf00      	nop
 800b3b0:	ff800000 	.word	0xff800000
 800b3b4:	3f317218 	.word	0x3f317218
 800b3b8:	3f317200 	.word	0x3f317200
 800b3bc:	35bfbe8c 	.word	0x35bfbe8c
 800b3c0:	b5ddea0e 	.word	0xb5ddea0e
 800b3c4:	3331bb4c 	.word	0x3331bb4c
 800b3c8:	388ab355 	.word	0x388ab355
 800b3cc:	bb360b61 	.word	0xbb360b61
 800b3d0:	3e2aaaab 	.word	0x3e2aaaab
 800b3d4:	00000000 	.word	0x00000000

0800b3d8 <fabsf>:
 800b3d8:	ee10 3a10 	vmov	r3, s0
 800b3dc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b3e0:	ee00 3a10 	vmov	s0, r3
 800b3e4:	4770      	bx	lr
	...

0800b3e8 <scalbn>:
 800b3e8:	b570      	push	{r4, r5, r6, lr}
 800b3ea:	ec55 4b10 	vmov	r4, r5, d0
 800b3ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800b3f2:	4606      	mov	r6, r0
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	b991      	cbnz	r1, 800b41e <scalbn+0x36>
 800b3f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b3fc:	4323      	orrs	r3, r4
 800b3fe:	d03d      	beq.n	800b47c <scalbn+0x94>
 800b400:	4b35      	ldr	r3, [pc, #212]	@ (800b4d8 <scalbn+0xf0>)
 800b402:	4620      	mov	r0, r4
 800b404:	4629      	mov	r1, r5
 800b406:	2200      	movs	r2, #0
 800b408:	f7f5 f89a 	bl	8000540 <__aeabi_dmul>
 800b40c:	4b33      	ldr	r3, [pc, #204]	@ (800b4dc <scalbn+0xf4>)
 800b40e:	429e      	cmp	r6, r3
 800b410:	4604      	mov	r4, r0
 800b412:	460d      	mov	r5, r1
 800b414:	da0f      	bge.n	800b436 <scalbn+0x4e>
 800b416:	a328      	add	r3, pc, #160	@ (adr r3, 800b4b8 <scalbn+0xd0>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	e01e      	b.n	800b45c <scalbn+0x74>
 800b41e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800b422:	4291      	cmp	r1, r2
 800b424:	d10b      	bne.n	800b43e <scalbn+0x56>
 800b426:	4622      	mov	r2, r4
 800b428:	4620      	mov	r0, r4
 800b42a:	4629      	mov	r1, r5
 800b42c:	f7f4 fed2 	bl	80001d4 <__adddf3>
 800b430:	4604      	mov	r4, r0
 800b432:	460d      	mov	r5, r1
 800b434:	e022      	b.n	800b47c <scalbn+0x94>
 800b436:	460b      	mov	r3, r1
 800b438:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800b43c:	3936      	subs	r1, #54	@ 0x36
 800b43e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800b442:	4296      	cmp	r6, r2
 800b444:	dd0d      	ble.n	800b462 <scalbn+0x7a>
 800b446:	2d00      	cmp	r5, #0
 800b448:	a11d      	add	r1, pc, #116	@ (adr r1, 800b4c0 <scalbn+0xd8>)
 800b44a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b44e:	da02      	bge.n	800b456 <scalbn+0x6e>
 800b450:	a11d      	add	r1, pc, #116	@ (adr r1, 800b4c8 <scalbn+0xe0>)
 800b452:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b456:	a31a      	add	r3, pc, #104	@ (adr r3, 800b4c0 <scalbn+0xd8>)
 800b458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45c:	f7f5 f870 	bl	8000540 <__aeabi_dmul>
 800b460:	e7e6      	b.n	800b430 <scalbn+0x48>
 800b462:	1872      	adds	r2, r6, r1
 800b464:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800b468:	428a      	cmp	r2, r1
 800b46a:	dcec      	bgt.n	800b446 <scalbn+0x5e>
 800b46c:	2a00      	cmp	r2, #0
 800b46e:	dd08      	ble.n	800b482 <scalbn+0x9a>
 800b470:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b474:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b478:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b47c:	ec45 4b10 	vmov	d0, r4, r5
 800b480:	bd70      	pop	{r4, r5, r6, pc}
 800b482:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800b486:	da08      	bge.n	800b49a <scalbn+0xb2>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	a10b      	add	r1, pc, #44	@ (adr r1, 800b4b8 <scalbn+0xd0>)
 800b48c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b490:	dac1      	bge.n	800b416 <scalbn+0x2e>
 800b492:	a10f      	add	r1, pc, #60	@ (adr r1, 800b4d0 <scalbn+0xe8>)
 800b494:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b498:	e7bd      	b.n	800b416 <scalbn+0x2e>
 800b49a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b49e:	3236      	adds	r2, #54	@ 0x36
 800b4a0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800b4a4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b4e0 <scalbn+0xf8>)
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	e7d4      	b.n	800b45c <scalbn+0x74>
 800b4b2:	bf00      	nop
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	c2f8f359 	.word	0xc2f8f359
 800b4bc:	01a56e1f 	.word	0x01a56e1f
 800b4c0:	8800759c 	.word	0x8800759c
 800b4c4:	7e37e43c 	.word	0x7e37e43c
 800b4c8:	8800759c 	.word	0x8800759c
 800b4cc:	fe37e43c 	.word	0xfe37e43c
 800b4d0:	c2f8f359 	.word	0xc2f8f359
 800b4d4:	81a56e1f 	.word	0x81a56e1f
 800b4d8:	43500000 	.word	0x43500000
 800b4dc:	ffff3cb0 	.word	0xffff3cb0
 800b4e0:	3c900000 	.word	0x3c900000

0800b4e4 <with_errno>:
 800b4e4:	b510      	push	{r4, lr}
 800b4e6:	ed2d 8b02 	vpush	{d8}
 800b4ea:	eeb0 8a40 	vmov.f32	s16, s0
 800b4ee:	eef0 8a60 	vmov.f32	s17, s1
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	f7fe fb9e 	bl	8009c34 <__errno>
 800b4f8:	eeb0 0a48 	vmov.f32	s0, s16
 800b4fc:	eef0 0a68 	vmov.f32	s1, s17
 800b500:	ecbd 8b02 	vpop	{d8}
 800b504:	6004      	str	r4, [r0, #0]
 800b506:	bd10      	pop	{r4, pc}

0800b508 <xflow>:
 800b508:	4603      	mov	r3, r0
 800b50a:	b507      	push	{r0, r1, r2, lr}
 800b50c:	ec51 0b10 	vmov	r0, r1, d0
 800b510:	b183      	cbz	r3, 800b534 <xflow+0x2c>
 800b512:	4602      	mov	r2, r0
 800b514:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b518:	e9cd 2300 	strd	r2, r3, [sp]
 800b51c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b520:	f7f5 f80e 	bl	8000540 <__aeabi_dmul>
 800b524:	ec41 0b10 	vmov	d0, r0, r1
 800b528:	2022      	movs	r0, #34	@ 0x22
 800b52a:	b003      	add	sp, #12
 800b52c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b530:	f7ff bfd8 	b.w	800b4e4 <with_errno>
 800b534:	4602      	mov	r2, r0
 800b536:	460b      	mov	r3, r1
 800b538:	e7ee      	b.n	800b518 <xflow+0x10>
 800b53a:	0000      	movs	r0, r0
 800b53c:	0000      	movs	r0, r0
	...

0800b540 <__math_uflow>:
 800b540:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b548 <__math_uflow+0x8>
 800b544:	f7ff bfe0 	b.w	800b508 <xflow>
 800b548:	00000000 	.word	0x00000000
 800b54c:	10000000 	.word	0x10000000

0800b550 <__math_oflow>:
 800b550:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b558 <__math_oflow+0x8>
 800b554:	f7ff bfd8 	b.w	800b508 <xflow>
 800b558:	00000000 	.word	0x00000000
 800b55c:	70000000 	.word	0x70000000

0800b560 <scalbnf>:
 800b560:	ee10 3a10 	vmov	r3, s0
 800b564:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800b568:	d02b      	beq.n	800b5c2 <scalbnf+0x62>
 800b56a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800b56e:	d302      	bcc.n	800b576 <scalbnf+0x16>
 800b570:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b574:	4770      	bx	lr
 800b576:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800b57a:	d123      	bne.n	800b5c4 <scalbnf+0x64>
 800b57c:	4b24      	ldr	r3, [pc, #144]	@ (800b610 <scalbnf+0xb0>)
 800b57e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800b614 <scalbnf+0xb4>
 800b582:	4298      	cmp	r0, r3
 800b584:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b588:	db17      	blt.n	800b5ba <scalbnf+0x5a>
 800b58a:	ee10 3a10 	vmov	r3, s0
 800b58e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b592:	3a19      	subs	r2, #25
 800b594:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800b598:	4288      	cmp	r0, r1
 800b59a:	dd15      	ble.n	800b5c8 <scalbnf+0x68>
 800b59c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800b618 <scalbnf+0xb8>
 800b5a0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800b61c <scalbnf+0xbc>
 800b5a4:	ee10 3a10 	vmov	r3, s0
 800b5a8:	eeb0 7a67 	vmov.f32	s14, s15
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	bfb8      	it	lt
 800b5b0:	eef0 7a66 	vmovlt.f32	s15, s13
 800b5b4:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b5b8:	4770      	bx	lr
 800b5ba:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800b620 <scalbnf+0xc0>
 800b5be:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b5c2:	4770      	bx	lr
 800b5c4:	0dd2      	lsrs	r2, r2, #23
 800b5c6:	e7e5      	b.n	800b594 <scalbnf+0x34>
 800b5c8:	4410      	add	r0, r2
 800b5ca:	28fe      	cmp	r0, #254	@ 0xfe
 800b5cc:	dce6      	bgt.n	800b59c <scalbnf+0x3c>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	dd06      	ble.n	800b5e0 <scalbnf+0x80>
 800b5d2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b5d6:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b5da:	ee00 3a10 	vmov	s0, r3
 800b5de:	4770      	bx	lr
 800b5e0:	f110 0f16 	cmn.w	r0, #22
 800b5e4:	da09      	bge.n	800b5fa <scalbnf+0x9a>
 800b5e6:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800b620 <scalbnf+0xc0>
 800b5ea:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800b624 <scalbnf+0xc4>
 800b5ee:	ee10 3a10 	vmov	r3, s0
 800b5f2:	eeb0 7a67 	vmov.f32	s14, s15
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	e7d9      	b.n	800b5ae <scalbnf+0x4e>
 800b5fa:	3019      	adds	r0, #25
 800b5fc:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800b600:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800b604:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800b628 <scalbnf+0xc8>
 800b608:	ee07 3a90 	vmov	s15, r3
 800b60c:	e7d7      	b.n	800b5be <scalbnf+0x5e>
 800b60e:	bf00      	nop
 800b610:	ffff3cb0 	.word	0xffff3cb0
 800b614:	4c000000 	.word	0x4c000000
 800b618:	7149f2ca 	.word	0x7149f2ca
 800b61c:	f149f2ca 	.word	0xf149f2ca
 800b620:	0da24260 	.word	0x0da24260
 800b624:	8da24260 	.word	0x8da24260
 800b628:	33000000 	.word	0x33000000

0800b62c <with_errnof>:
 800b62c:	b510      	push	{r4, lr}
 800b62e:	ed2d 8b02 	vpush	{d8}
 800b632:	eeb0 8a40 	vmov.f32	s16, s0
 800b636:	4604      	mov	r4, r0
 800b638:	f7fe fafc 	bl	8009c34 <__errno>
 800b63c:	eeb0 0a48 	vmov.f32	s0, s16
 800b640:	ecbd 8b02 	vpop	{d8}
 800b644:	6004      	str	r4, [r0, #0]
 800b646:	bd10      	pop	{r4, pc}

0800b648 <xflowf>:
 800b648:	b130      	cbz	r0, 800b658 <xflowf+0x10>
 800b64a:	eef1 7a40 	vneg.f32	s15, s0
 800b64e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b652:	2022      	movs	r0, #34	@ 0x22
 800b654:	f7ff bfea 	b.w	800b62c <with_errnof>
 800b658:	eef0 7a40 	vmov.f32	s15, s0
 800b65c:	e7f7      	b.n	800b64e <xflowf+0x6>
	...

0800b660 <__math_uflowf>:
 800b660:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b668 <__math_uflowf+0x8>
 800b664:	f7ff bff0 	b.w	800b648 <xflowf>
 800b668:	10000000 	.word	0x10000000

0800b66c <__math_oflowf>:
 800b66c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800b674 <__math_oflowf+0x8>
 800b670:	f7ff bfea 	b.w	800b648 <xflowf>
 800b674:	70000000 	.word	0x70000000

0800b678 <__ieee754_sqrtf>:
 800b678:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b67c:	4770      	bx	lr
	...

0800b680 <_init>:
 800b680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b682:	bf00      	nop
 800b684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b686:	bc08      	pop	{r3}
 800b688:	469e      	mov	lr, r3
 800b68a:	4770      	bx	lr

0800b68c <_fini>:
 800b68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b68e:	bf00      	nop
 800b690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b692:	bc08      	pop	{r3}
 800b694:	469e      	mov	lr, r3
 800b696:	4770      	bx	lr
